// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// GetListTasksURL generates an URL for the get list tasks operation
type GetListTasksURL struct {
	Page       *int64
	PageSize   *int64
	Sort       *string
	StationsID []int64
	Statuses   []string
	Types      []string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetListTasksURL) WithBasePath(bp string) *GetListTasksURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetListTasksURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetListTasksURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/tasks"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var pageQ string
	if o.Page != nil {
		pageQ = swag.FormatInt64(*o.Page)
	}
	if pageQ != "" {
		qs.Set("page", pageQ)
	}

	var pageSizeQ string
	if o.PageSize != nil {
		pageSizeQ = swag.FormatInt64(*o.PageSize)
	}
	if pageSizeQ != "" {
		qs.Set("pageSize", pageSizeQ)
	}

	var sortQ string
	if o.Sort != nil {
		sortQ = *o.Sort
	}
	if sortQ != "" {
		qs.Set("sort", sortQ)
	}

	var stationsIDIR []string
	for _, stationsIDI := range o.StationsID {
		stationsIDIS := swag.FormatInt64(stationsIDI)
		if stationsIDIS != "" {
			stationsIDIR = append(stationsIDIR, stationsIDIS)
		}
	}

	stationsID := swag.JoinByFormat(stationsIDIR, "multi")

	for _, qsv := range stationsID {
		qs.Add("stationsID", qsv)
	}

	var statusesIR []string
	for _, statusesI := range o.Statuses {
		statusesIS := statusesI
		if statusesIS != "" {
			statusesIR = append(statusesIR, statusesIS)
		}
	}

	statuses := swag.JoinByFormat(statusesIR, "multi")

	for _, qsv := range statuses {
		qs.Add("statuses", qsv)
	}

	var typesIR []string
	for _, typesI := range o.Types {
		typesIS := typesI
		if typesIS != "" {
			typesIR = append(typesIR, typesIS)
		}
	}

	types := swag.JoinByFormat(typesIR, "multi")

	for _, qsv := range types {
		qs.Add("types", qsv)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetListTasksURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetListTasksURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetListTasksURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetListTasksURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetListTasksURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetListTasksURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
