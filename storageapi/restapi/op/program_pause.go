// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// ProgramPauseHandlerFunc turns a function with the right signature into a program pause handler
type ProgramPauseHandlerFunc func(ProgramPauseParams) ProgramPauseResponder

// Handle executing the request and returning a response
func (fn ProgramPauseHandlerFunc) Handle(params ProgramPauseParams) ProgramPauseResponder {
	return fn(params)
}

// ProgramPauseHandler interface for that can handle valid program pause params
type ProgramPauseHandler interface {
	Handle(ProgramPauseParams) ProgramPauseResponder
}

// NewProgramPause creates a new http.Handler for the program pause operation
func NewProgramPause(ctx *middleware.Context, handler ProgramPauseHandler) *ProgramPause {
	return &ProgramPause{Context: ctx, Handler: handler}
}

/*
	ProgramPause swagger:route POST /pause-program programPause

ProgramPause program pause API
*/
type ProgramPause struct {
	Context *middleware.Context
	Handler ProgramPauseHandler
}

func (o *ProgramPause) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewProgramPauseParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ProgramPauseBody ArgProgramPause
//
// swagger:model ProgramPauseBody
type ProgramPauseBody struct {

	// active
	// Required: true
	Active *bool `json:"active"`

	// hash
	// Required: true
	Hash *model.Hash `json:"hash"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *ProgramPauseBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// active
		// Required: true
		Active *bool `json:"active"`

		// hash
		// Required: true
		Hash *model.Hash `json:"hash"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Active = props.Active
	o.Hash = props.Hash
	return nil
}

// Validate validates this program pause body
func (o *ProgramPauseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProgramPauseBody) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"active", "body", o.Active); err != nil {
		return err
	}

	return nil
}

func (o *ProgramPauseBody) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if o.Hash != nil {
		if err := o.Hash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this program pause body based on the context it is used
func (o *ProgramPauseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProgramPauseBody) contextValidateHash(ctx context.Context, formats strfmt.Registry) error {

	if o.Hash != nil {
		if err := o.Hash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProgramPauseBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProgramPauseBody) UnmarshalBinary(b []byte) error {
	var res ProgramPauseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
