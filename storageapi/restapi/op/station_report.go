// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// StationReportHandlerFunc turns a function with the right signature into a station report handler
type StationReportHandlerFunc func(StationReportParams) StationReportResponder

// Handle executing the request and returning a response
func (fn StationReportHandlerFunc) Handle(params StationReportParams) StationReportResponder {
	return fn(params)
}

// StationReportHandler interface for that can handle valid station report params
type StationReportHandler interface {
	Handle(StationReportParams) StationReportResponder
}

// NewStationReport creates a new http.Handler for the station report operation
func NewStationReport(ctx *middleware.Context, handler StationReportHandler) *StationReport {
	return &StationReport{Context: ctx, Handler: handler}
}

/*StationReport swagger:route POST /station-report stationReport

StationReport station report API

*/
type StationReport struct {
	Context *middleware.Context
	Handler StationReportHandler
}

func (o *StationReport) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewStationReportParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// StationReportBody station report body
// swagger:model StationReportBody
type StationReportBody struct {

	// Unix time
	// Required: true
	EndDate *int64 `json:"endDate"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// Unix time
	// Required: true
	StartDate *int64 `json:"startDate"`
}

// Validate validates this station report body
func (o *StationReportBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StationReportBody) validateEndDate(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"endDate", "body", o.EndDate); err != nil {
		return err
	}

	return nil
}

func (o *StationReportBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *StationReportBody) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"startDate", "body", o.StartDate); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StationReportBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StationReportBody) UnmarshalBinary(b []byte) error {
	var res StationReportBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
