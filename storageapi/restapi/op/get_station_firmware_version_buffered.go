// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/OpenRbt/lea-central-wash/storageapi"
)

// GetStationFirmwareVersionBufferedHandlerFunc turns a function with the right signature into a get station firmware version buffered handler
type GetStationFirmwareVersionBufferedHandlerFunc func(GetStationFirmwareVersionBufferedParams, *storageapi.Profile) GetStationFirmwareVersionBufferedResponder

// Handle executing the request and returning a response
func (fn GetStationFirmwareVersionBufferedHandlerFunc) Handle(params GetStationFirmwareVersionBufferedParams, principal *storageapi.Profile) GetStationFirmwareVersionBufferedResponder {
	return fn(params, principal)
}

// GetStationFirmwareVersionBufferedHandler interface for that can handle valid get station firmware version buffered params
type GetStationFirmwareVersionBufferedHandler interface {
	Handle(GetStationFirmwareVersionBufferedParams, *storageapi.Profile) GetStationFirmwareVersionBufferedResponder
}

// NewGetStationFirmwareVersionBuffered creates a new http.Handler for the get station firmware version buffered operation
func NewGetStationFirmwareVersionBuffered(ctx *middleware.Context, handler GetStationFirmwareVersionBufferedHandler) *GetStationFirmwareVersionBuffered {
	return &GetStationFirmwareVersionBuffered{Context: ctx, Handler: handler}
}

/*
	GetStationFirmwareVersionBuffered swagger:route GET /stations/{id}/firmware-versions/buffered getStationFirmwareVersionBuffered

GetStationFirmwareVersionBuffered get station firmware version buffered API
*/
type GetStationFirmwareVersionBuffered struct {
	Context *middleware.Context
	Handler GetStationFirmwareVersionBufferedHandler
}

func (o *GetStationFirmwareVersionBuffered) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetStationFirmwareVersionBufferedParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *storageapi.Profile
	if uprinc != nil {
		principal = uprinc.(*storageapi.Profile) // this is really a storageapi.Profile, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
