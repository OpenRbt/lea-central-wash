// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StationEventsReportDatesHandlerFunc turns a function with the right signature into a station events report dates handler
type StationEventsReportDatesHandlerFunc func(StationEventsReportDatesParams) StationEventsReportDatesResponder

// Handle executing the request and returning a response
func (fn StationEventsReportDatesHandlerFunc) Handle(params StationEventsReportDatesParams) StationEventsReportDatesResponder {
	return fn(params)
}

// StationEventsReportDatesHandler interface for that can handle valid station events report dates params
type StationEventsReportDatesHandler interface {
	Handle(StationEventsReportDatesParams) StationEventsReportDatesResponder
}

// NewStationEventsReportDates creates a new http.Handler for the station events report dates operation
func NewStationEventsReportDates(ctx *middleware.Context, handler StationEventsReportDatesHandler) *StationEventsReportDates {
	return &StationEventsReportDates{Context: ctx, Handler: handler}
}

/* StationEventsReportDates swagger:route POST /station-events-report-dates stationEventsReportDates

StationEventsReportDates station events report dates API

*/
type StationEventsReportDates struct {
	Context *middleware.Context
	Handler StationEventsReportDatesHandler
}

func (o *StationEventsReportDates) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewStationEventsReportDatesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// StationEventsReportDatesBody station events report dates body
//
// swagger:model StationEventsReportDatesBody
type StationEventsReportDatesBody struct {

	// Unix time
	EndDate *int64 `json:"endDate,omitempty"`

	// Unix time
	StartDate *int64 `json:"startDate,omitempty"`

	// station ID
	// Required: true
	// Minimum: 1
	StationID *int64 `json:"stationID"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *StationEventsReportDatesBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// Unix time
		EndDate *int64 `json:"endDate,omitempty"`

		// Unix time
		StartDate *int64 `json:"startDate,omitempty"`

		// station ID
		// Required: true
		// Minimum: 1
		StationID *int64 `json:"stationID"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.EndDate = props.EndDate
	o.StartDate = props.StartDate
	o.StationID = props.StationID
	return nil
}

// Validate validates this station events report dates body
func (o *StationEventsReportDatesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StationEventsReportDatesBody) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"stationID", "body", o.StationID); err != nil {
		return err
	}

	if err := validate.MinimumInt("args"+"."+"stationID", "body", *o.StationID, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this station events report dates body based on context it is used
func (o *StationEventsReportDatesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StationEventsReportDatesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StationEventsReportDatesBody) UnmarshalBinary(b []byte) error {
	var res StationEventsReportDatesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
