// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// RunDispenserHandlerFunc turns a function with the right signature into a run dispenser handler
type RunDispenserHandlerFunc func(RunDispenserParams) RunDispenserResponder

// Handle executing the request and returning a response
func (fn RunDispenserHandlerFunc) Handle(params RunDispenserParams) RunDispenserResponder {
	return fn(params)
}

// RunDispenserHandler interface for that can handle valid run dispenser params
type RunDispenserHandler interface {
	Handle(RunDispenserParams) RunDispenserResponder
}

// NewRunDispenser creates a new http.Handler for the run dispenser operation
func NewRunDispenser(ctx *middleware.Context, handler RunDispenserHandler) *RunDispenser {
	return &RunDispenser{Context: ctx, Handler: handler}
}

/* RunDispenser swagger:route POST /run-dispenser runDispenser

RunDispenser run dispenser API

*/
type RunDispenser struct {
	Context *middleware.Context
	Handler RunDispenserHandler
}

func (o *RunDispenser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRunDispenserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// RunDispenserBody ArgRunDispenser
//
// swagger:model RunDispenserBody
type RunDispenserBody struct {

	// hash
	// Required: true
	Hash *model.Hash `json:"hash"`

	// volume
	// Required: true
	Volume *int64 `json:"volume"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *RunDispenserBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// hash
		// Required: true
		Hash *model.Hash `json:"hash"`

		// volume
		// Required: true
		Volume *int64 `json:"volume"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Hash = props.Hash
	o.Volume = props.Volume
	return nil
}

// Validate validates this run dispenser body
func (o *RunDispenserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RunDispenserBody) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if o.Hash != nil {
		if err := o.Hash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

func (o *RunDispenserBody) validateVolume(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"volume", "body", o.Volume); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this run dispenser body based on the context it is used
func (o *RunDispenserBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RunDispenserBody) contextValidateHash(ctx context.Context, formats strfmt.Registry) error {

	if o.Hash != nil {
		if err := o.Hash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RunDispenserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RunDispenserBody) UnmarshalBinary(b []byte) error {
	var res RunDispenserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
