// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// StationsKeyPairHandlerFunc turns a function with the right signature into a stations key pair handler
type StationsKeyPairHandlerFunc func(StationsKeyPairParams) StationsKeyPairResponder

// Handle executing the request and returning a response
func (fn StationsKeyPairHandlerFunc) Handle(params StationsKeyPairParams) StationsKeyPairResponder {
	return fn(params)
}

// StationsKeyPairHandler interface for that can handle valid stations key pair params
type StationsKeyPairHandler interface {
	Handle(StationsKeyPairParams) StationsKeyPairResponder
}

// NewStationsKeyPair creates a new http.Handler for the stations key pair operation
func NewStationsKeyPair(ctx *middleware.Context, handler StationsKeyPairHandler) *StationsKeyPair {
	return &StationsKeyPair{Context: ctx, Handler: handler}
}

/*StationsKeyPair swagger:route POST /stations-key-pair stationsKeyPair

StationsKeyPair stations key pair API

*/
type StationsKeyPair struct {
	Context *middleware.Context
	Handler StationsKeyPairHandler
}

func (o *StationsKeyPair) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewStationsKeyPairParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
