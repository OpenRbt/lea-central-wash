// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PayHandlerFunc turns a function with the right signature into a pay handler
type PayHandlerFunc func(PayParams) PayResponder

// Handle executing the request and returning a response
func (fn PayHandlerFunc) Handle(params PayParams) PayResponder {
	return fn(params)
}

// PayHandler interface for that can handle valid pay params
type PayHandler interface {
	Handle(PayParams) PayResponder
}

// NewPay creates a new http.Handler for the pay operation
func NewPay(ctx *middleware.Context, handler PayHandler) *Pay {
	return &Pay{Context: ctx, Handler: handler}
}

/*
	Pay swagger:route POST /pay pay

Pay pay API
*/
type Pay struct {
	Context *middleware.Context
	Handler PayHandler
}

func (o *Pay) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPayParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PayBody pay
//
// swagger:model PayBody
type PayBody struct {

	// amount
	Amount int64 `json:"amount,omitempty"`

	// hash
	// Required: true
	Hash *string `json:"hash"`
}

// Validate validates this pay body
func (o *PayBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PayBody) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this pay body based on context it is used
func (o *PayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PayBody) UnmarshalBinary(b []byte) error {
	var res PayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
