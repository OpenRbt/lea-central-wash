// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// GetVolumeHandlerFunc turns a function with the right signature into a get volume handler
type GetVolumeHandlerFunc func(GetVolumeParams) GetVolumeResponder

// Handle executing the request and returning a response
func (fn GetVolumeHandlerFunc) Handle(params GetVolumeParams) GetVolumeResponder {
	return fn(params)
}

// GetVolumeHandler interface for that can handle valid get volume params
type GetVolumeHandler interface {
	Handle(GetVolumeParams) GetVolumeResponder
}

// NewGetVolume creates a new http.Handler for the get volume operation
func NewGetVolume(ctx *middleware.Context, handler GetVolumeHandler) *GetVolume {
	return &GetVolume{Context: ctx, Handler: handler}
}

/* GetVolume swagger:route POST /volume-arduino getVolume

GetVolume get volume API

*/
type GetVolume struct {
	Context *middleware.Context
	Handler GetVolumeHandler
}

func (o *GetVolume) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetVolumeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetVolumeBody VolumeArduino
//
// swagger:model GetVolumeBody
type GetVolumeBody struct {

	// hash
	// Required: true
	Hash *model.Hash `json:"hash"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *GetVolumeBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// hash
		// Required: true
		Hash *model.Hash `json:"hash"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Hash = props.Hash
	return nil
}

// Validate validates this get volume body
func (o *GetVolumeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetVolumeBody) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if o.Hash != nil {
		if err := o.Hash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get volume body based on the context it is used
func (o *GetVolumeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetVolumeBody) contextValidateHash(ctx context.Context, formats strfmt.Registry) error {

	if o.Hash != nil {
		if err := o.Hash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetVolumeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetVolumeBody) UnmarshalBinary(b []byte) error {
	var res GetVolumeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetVolumeOKBody ResponseVolumeArduino
//
// swagger:model GetVolumeOKBody
type GetVolumeOKBody struct {

	// volume
	// Required: true
	Volume *int64 `json:"volume"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *GetVolumeOKBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// volume
		// Required: true
		Volume *int64 `json:"volume"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Volume = props.Volume
	return nil
}

// Validate validates this get volume o k body
func (o *GetVolumeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetVolumeOKBody) validateVolume(formats strfmt.Registry) error {

	if err := validate.Required("getVolumeOK"+"."+"volume", "body", o.Volume); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get volume o k body based on context it is used
func (o *GetVolumeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetVolumeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetVolumeOKBody) UnmarshalBinary(b []byte) error {
	var res GetVolumeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
