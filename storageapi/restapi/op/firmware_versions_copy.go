// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/OpenRbt/lea-central-wash/storageapi"
)

// FirmwareVersionsCopyHandlerFunc turns a function with the right signature into a firmware versions copy handler
type FirmwareVersionsCopyHandlerFunc func(FirmwareVersionsCopyParams, *storageapi.Profile) FirmwareVersionsCopyResponder

// Handle executing the request and returning a response
func (fn FirmwareVersionsCopyHandlerFunc) Handle(params FirmwareVersionsCopyParams, principal *storageapi.Profile) FirmwareVersionsCopyResponder {
	return fn(params, principal)
}

// FirmwareVersionsCopyHandler interface for that can handle valid firmware versions copy params
type FirmwareVersionsCopyHandler interface {
	Handle(FirmwareVersionsCopyParams, *storageapi.Profile) FirmwareVersionsCopyResponder
}

// NewFirmwareVersionsCopy creates a new http.Handler for the firmware versions copy operation
func NewFirmwareVersionsCopy(ctx *middleware.Context, handler FirmwareVersionsCopyHandler) *FirmwareVersionsCopy {
	return &FirmwareVersionsCopy{Context: ctx, Handler: handler}
}

/*
	FirmwareVersionsCopy swagger:route POST /stations/{id}/firmware-versions/copy-to/{toID} firmwareVersionsCopy

FirmwareVersionsCopy firmware versions copy API
*/
type FirmwareVersionsCopy struct {
	Context *middleware.Context
	Handler FirmwareVersionsCopyHandler
}

func (o *FirmwareVersionsCopy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFirmwareVersionsCopyParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *storageapi.Profile
	if uprinc != nil {
		principal = uprinc.(*storageapi.Profile) // this is really a storageapi.Profile, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
