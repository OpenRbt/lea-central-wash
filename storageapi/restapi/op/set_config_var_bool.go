// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SetConfigVarBoolHandlerFunc turns a function with the right signature into a set config var bool handler
type SetConfigVarBoolHandlerFunc func(SetConfigVarBoolParams) SetConfigVarBoolResponder

// Handle executing the request and returning a response
func (fn SetConfigVarBoolHandlerFunc) Handle(params SetConfigVarBoolParams) SetConfigVarBoolResponder {
	return fn(params)
}

// SetConfigVarBoolHandler interface for that can handle valid set config var bool params
type SetConfigVarBoolHandler interface {
	Handle(SetConfigVarBoolParams) SetConfigVarBoolResponder
}

// NewSetConfigVarBool creates a new http.Handler for the set config var bool operation
func NewSetConfigVarBool(ctx *middleware.Context, handler SetConfigVarBoolHandler) *SetConfigVarBool {
	return &SetConfigVarBool{Context: ctx, Handler: handler}
}

/* SetConfigVarBool swagger:route POST /set-config-var-bool setConfigVarBool

SetConfigVarBool set config var bool API

*/
type SetConfigVarBool struct {
	Context *middleware.Context
	Handler SetConfigVarBoolHandler
}

func (o *SetConfigVarBool) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSetConfigVarBoolParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
