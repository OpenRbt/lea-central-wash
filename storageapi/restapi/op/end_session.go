// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EndSessionHandlerFunc turns a function with the right signature into a end session handler
type EndSessionHandlerFunc func(EndSessionParams) EndSessionResponder

// Handle executing the request and returning a response
func (fn EndSessionHandlerFunc) Handle(params EndSessionParams) EndSessionResponder {
	return fn(params)
}

// EndSessionHandler interface for that can handle valid end session params
type EndSessionHandler interface {
	Handle(EndSessionParams) EndSessionResponder
}

// NewEndSession creates a new http.Handler for the end session operation
func NewEndSession(ctx *middleware.Context, handler EndSessionHandler) *EndSession {
	return &EndSession{Context: ctx, Handler: handler}
}

/*
	EndSession swagger:route POST /end-session endSession

EndSession end session API
*/
type EndSession struct {
	Context *middleware.Context
	Handler EndSessionHandler
}

func (o *EndSession) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewEndSessionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// EndSessionBody ArgEndSession
//
// swagger:model EndSessionBody
type EndSessionBody struct {

	// hash
	// Required: true
	Hash *string `json:"hash"`

	// session ID
	// Required: true
	SessionID *string `json:"sessionID"`
}

// Validate validates this end session body
func (o *EndSessionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSessionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EndSessionBody) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	return nil
}

func (o *EndSessionBody) validateSessionID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"sessionID", "body", o.SessionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this end session body based on context it is used
func (o *EndSessionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *EndSessionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EndSessionBody) UnmarshalBinary(b []byte) error {
	var res EndSessionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
