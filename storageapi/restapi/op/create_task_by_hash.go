// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateTaskByHashHandlerFunc turns a function with the right signature into a create task by hash handler
type CreateTaskByHashHandlerFunc func(CreateTaskByHashParams) CreateTaskByHashResponder

// Handle executing the request and returning a response
func (fn CreateTaskByHashHandlerFunc) Handle(params CreateTaskByHashParams) CreateTaskByHashResponder {
	return fn(params)
}

// CreateTaskByHashHandler interface for that can handle valid create task by hash params
type CreateTaskByHashHandler interface {
	Handle(CreateTaskByHashParams) CreateTaskByHashResponder
}

// NewCreateTaskByHash creates a new http.Handler for the create task by hash operation
func NewCreateTaskByHash(ctx *middleware.Context, handler CreateTaskByHashHandler) *CreateTaskByHash {
	return &CreateTaskByHash{Context: ctx, Handler: handler}
}

/*
	CreateTaskByHash swagger:route POST /tasks/create-by-hash createTaskByHash

CreateTaskByHash create task by hash API
*/
type CreateTaskByHash struct {
	Context *middleware.Context
	Handler CreateTaskByHashHandler
}

func (o *CreateTaskByHash) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateTaskByHashParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
