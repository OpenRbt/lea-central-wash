// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/OpenRbt/lea-central-wash/storageapi"
)

// StationStatCurrentHandlerFunc turns a function with the right signature into a station stat current handler
type StationStatCurrentHandlerFunc func(StationStatCurrentParams, *storageapi.Profile) StationStatCurrentResponder

// Handle executing the request and returning a response
func (fn StationStatCurrentHandlerFunc) Handle(params StationStatCurrentParams, principal *storageapi.Profile) StationStatCurrentResponder {
	return fn(params, principal)
}

// StationStatCurrentHandler interface for that can handle valid station stat current params
type StationStatCurrentHandler interface {
	Handle(StationStatCurrentParams, *storageapi.Profile) StationStatCurrentResponder
}

// NewStationStatCurrent creates a new http.Handler for the station stat current operation
func NewStationStatCurrent(ctx *middleware.Context, handler StationStatCurrentHandler) *StationStatCurrent {
	return &StationStatCurrent{Context: ctx, Handler: handler}
}

/*
	StationStatCurrent swagger:route POST /station-stat-current stationStatCurrent

StationStatCurrent station stat current API
*/
type StationStatCurrent struct {
	Context *middleware.Context
	Handler StationStatCurrentHandler
}

func (o *StationStatCurrent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewStationStatCurrentParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *storageapi.Profile
	if uprinc != nil {
		principal = uprinc.(*storageapi.Profile) // this is really a storageapi.Profile, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// StationStatCurrentBody ArgStationStat
//
// swagger:model StationStatCurrentBody
type StationStatCurrentBody struct {

	// station ID
	StationID *int64 `json:"stationID,omitempty"`
}

// Validate validates this station stat current body
func (o *StationStatCurrentBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this station stat current body based on context it is used
func (o *StationStatCurrentBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StationStatCurrentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StationStatCurrentBody) UnmarshalBinary(b []byte) error {
	var res StationStatCurrentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
