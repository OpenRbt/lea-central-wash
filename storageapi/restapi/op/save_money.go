// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SaveMoneyHandlerFunc turns a function with the right signature into a save money handler
type SaveMoneyHandlerFunc func(SaveMoneyParams) SaveMoneyResponder

// Handle executing the request and returning a response
func (fn SaveMoneyHandlerFunc) Handle(params SaveMoneyParams) SaveMoneyResponder {
	return fn(params)
}

// SaveMoneyHandler interface for that can handle valid save money params
type SaveMoneyHandler interface {
	Handle(SaveMoneyParams) SaveMoneyResponder
}

// NewSaveMoney creates a new http.Handler for the save money operation
func NewSaveMoney(ctx *middleware.Context, handler SaveMoneyHandler) *SaveMoney {
	return &SaveMoney{Context: ctx, Handler: handler}
}

/*SaveMoney swagger:route POST /save-money saveMoney

SaveMoney save money API

*/
type SaveMoney struct {
	Context *middleware.Context
	Handler SaveMoneyHandler
}

func (o *SaveMoney) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSaveMoneyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
