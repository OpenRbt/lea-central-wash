// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// SetProgramNameHandlerFunc turns a function with the right signature into a set program name handler
type SetProgramNameHandlerFunc func(SetProgramNameParams) SetProgramNameResponder

// Handle executing the request and returning a response
func (fn SetProgramNameHandlerFunc) Handle(params SetProgramNameParams) SetProgramNameResponder {
	return fn(params)
}

// SetProgramNameHandler interface for that can handle valid set program name params
type SetProgramNameHandler interface {
	Handle(SetProgramNameParams) SetProgramNameResponder
}

// NewSetProgramName creates a new http.Handler for the set program name operation
func NewSetProgramName(ctx *middleware.Context, handler SetProgramNameHandler) *SetProgramName {
	return &SetProgramName{Context: ctx, Handler: handler}
}

/*SetProgramName swagger:route POST /set-program-name setProgramName

SetProgramName set program name API

*/
type SetProgramName struct {
	Context *middleware.Context
	Handler SetProgramNameHandler
}

func (o *SetProgramName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetProgramNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SetProgramNameBody set program name body
// swagger:model SetProgramNameBody
type SetProgramNameBody struct {

	// name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// program ID
	// Required: true
	// Minimum: 1
	ProgramID *int64 `json:"programID"`

	// station ID
	// Required: true
	// Minimum: 1
	StationID *int64 `json:"stationID"`
}

// Validate validates this set program name body
func (o *SetProgramNameBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProgramID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetProgramNameBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("args"+"."+"name", "body", string(*o.Name), 1); err != nil {
		return err
	}

	return nil
}

func (o *SetProgramNameBody) validateProgramID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"programID", "body", o.ProgramID); err != nil {
		return err
	}

	if err := validate.MinimumInt("args"+"."+"programID", "body", int64(*o.ProgramID), 1, false); err != nil {
		return err
	}

	return nil
}

func (o *SetProgramNameBody) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"stationID", "body", o.StationID); err != nil {
		return err
	}

	if err := validate.MinimumInt("args"+"."+"stationID", "body", int64(*o.StationID), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetProgramNameBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetProgramNameBody) UnmarshalBinary(b []byte) error {
	var res SetProgramNameBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
