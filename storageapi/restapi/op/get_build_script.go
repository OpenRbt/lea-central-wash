// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/OpenRbt/lea-central-wash/storageapi"
)

// GetBuildScriptHandlerFunc turns a function with the right signature into a get build script handler
type GetBuildScriptHandlerFunc func(GetBuildScriptParams, *storageapi.Profile) GetBuildScriptResponder

// Handle executing the request and returning a response
func (fn GetBuildScriptHandlerFunc) Handle(params GetBuildScriptParams, principal *storageapi.Profile) GetBuildScriptResponder {
	return fn(params, principal)
}

// GetBuildScriptHandler interface for that can handle valid get build script params
type GetBuildScriptHandler interface {
	Handle(GetBuildScriptParams, *storageapi.Profile) GetBuildScriptResponder
}

// NewGetBuildScript creates a new http.Handler for the get build script operation
func NewGetBuildScript(ctx *middleware.Context, handler GetBuildScriptHandler) *GetBuildScript {
	return &GetBuildScript{Context: ctx, Handler: handler}
}

/*
	GetBuildScript swagger:route GET /build-scripts/{id} getBuildScript

GetBuildScript get build script API
*/
type GetBuildScript struct {
	Context *middleware.Context
	Handler GetBuildScriptHandler
}

func (o *GetBuildScript) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetBuildScriptParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *storageapi.Profile
	if uprinc != nil {
		principal = uprinc.(*storageapi.Profile) // this is really a storageapi.Profile, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
