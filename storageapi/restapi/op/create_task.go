// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/OpenRbt/lea-central-wash/storageapi"
)

// CreateTaskHandlerFunc turns a function with the right signature into a create task handler
type CreateTaskHandlerFunc func(CreateTaskParams, *storageapi.Profile) CreateTaskResponder

// Handle executing the request and returning a response
func (fn CreateTaskHandlerFunc) Handle(params CreateTaskParams, principal *storageapi.Profile) CreateTaskResponder {
	return fn(params, principal)
}

// CreateTaskHandler interface for that can handle valid create task params
type CreateTaskHandler interface {
	Handle(CreateTaskParams, *storageapi.Profile) CreateTaskResponder
}

// NewCreateTask creates a new http.Handler for the create task operation
func NewCreateTask(ctx *middleware.Context, handler CreateTaskHandler) *CreateTask {
	return &CreateTask{Context: ctx, Handler: handler}
}

/*
	CreateTask swagger:route POST /tasks createTask

CreateTask create task API
*/
type CreateTask struct {
	Context *middleware.Context
	Handler CreateTaskHandler
}

func (o *CreateTask) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateTaskParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *storageapi.Profile
	if uprinc != nil {
		principal = uprinc.(*storageapi.Profile) // this is really a storageapi.Profile, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
