// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	model "github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// SetProgramRelaysHandlerFunc turns a function with the right signature into a set program relays handler
type SetProgramRelaysHandlerFunc func(SetProgramRelaysParams) SetProgramRelaysResponder

// Handle executing the request and returning a response
func (fn SetProgramRelaysHandlerFunc) Handle(params SetProgramRelaysParams) SetProgramRelaysResponder {
	return fn(params)
}

// SetProgramRelaysHandler interface for that can handle valid set program relays params
type SetProgramRelaysHandler interface {
	Handle(SetProgramRelaysParams) SetProgramRelaysResponder
}

// NewSetProgramRelays creates a new http.Handler for the set program relays operation
func NewSetProgramRelays(ctx *middleware.Context, handler SetProgramRelaysHandler) *SetProgramRelays {
	return &SetProgramRelays{Context: ctx, Handler: handler}
}

/*SetProgramRelays swagger:route POST /set-program-relays setProgramRelays

SetProgramRelays set program relays API

*/
type SetProgramRelays struct {
	Context *middleware.Context
	Handler SetProgramRelaysHandler
}

func (o *SetProgramRelays) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetProgramRelaysParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SetProgramRelaysBody set program relays body
// swagger:model SetProgramRelaysBody
type SetProgramRelaysBody struct {

	// program ID
	// Required: true
	// Minimum: 1
	ProgramID *int64 `json:"programID"`

	// relays
	Relays []*model.RelayConfig `json:"relays"`

	// station ID
	// Required: true
	// Minimum: 1
	StationID *int64 `json:"stationID"`
}

// Validate validates this set program relays body
func (o *SetProgramRelaysBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProgramID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRelays(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetProgramRelaysBody) validateProgramID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"programID", "body", o.ProgramID); err != nil {
		return err
	}

	if err := validate.MinimumInt("args"+"."+"programID", "body", int64(*o.ProgramID), 1, false); err != nil {
		return err
	}

	return nil
}

func (o *SetProgramRelaysBody) validateRelays(formats strfmt.Registry) error {

	if swag.IsZero(o.Relays) { // not required
		return nil
	}

	for i := 0; i < len(o.Relays); i++ {
		if swag.IsZero(o.Relays[i]) { // not required
			continue
		}

		if o.Relays[i] != nil {
			if err := o.Relays[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("args" + "." + "relays" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SetProgramRelaysBody) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"stationID", "body", o.StationID); err != nil {
		return err
	}

	if err := validate.MinimumInt("args"+"."+"stationID", "body", int64(*o.StationID), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetProgramRelaysBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetProgramRelaysBody) UnmarshalBinary(b []byte) error {
	var res SetProgramRelaysBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
