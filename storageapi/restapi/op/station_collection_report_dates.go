// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/DiaElectronics/lea-central-wash/storageapi"
	"github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// StationCollectionReportDatesHandlerFunc turns a function with the right signature into a station collection report dates handler
type StationCollectionReportDatesHandlerFunc func(StationCollectionReportDatesParams, *storageapi.Profile) StationCollectionReportDatesResponder

// Handle executing the request and returning a response
func (fn StationCollectionReportDatesHandlerFunc) Handle(params StationCollectionReportDatesParams, principal *storageapi.Profile) StationCollectionReportDatesResponder {
	return fn(params, principal)
}

// StationCollectionReportDatesHandler interface for that can handle valid station collection report dates params
type StationCollectionReportDatesHandler interface {
	Handle(StationCollectionReportDatesParams, *storageapi.Profile) StationCollectionReportDatesResponder
}

// NewStationCollectionReportDates creates a new http.Handler for the station collection report dates operation
func NewStationCollectionReportDates(ctx *middleware.Context, handler StationCollectionReportDatesHandler) *StationCollectionReportDates {
	return &StationCollectionReportDates{Context: ctx, Handler: handler}
}

/* StationCollectionReportDates swagger:route POST /station-collection-report-dates stationCollectionReportDates

StationCollectionReportDates station collection report dates API

*/
type StationCollectionReportDates struct {
	Context *middleware.Context
	Handler StationCollectionReportDatesHandler
}

func (o *StationCollectionReportDates) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewStationCollectionReportDatesParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *storageapi.Profile
	if uprinc != nil {
		principal = uprinc.(*storageapi.Profile) // this is really a storageapi.Profile, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// StationCollectionReportDatesBody station collection report dates body
//
// swagger:model StationCollectionReportDatesBody
type StationCollectionReportDatesBody struct {

	// Unix time
	EndDate *int64 `json:"endDate,omitempty"`

	// Unix time
	StartDate *int64 `json:"startDate,omitempty"`

	// station ID
	StationID int64 `json:"stationID,omitempty"`
}

// Validate validates this station collection report dates body
func (o *StationCollectionReportDatesBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this station collection report dates body based on context it is used
func (o *StationCollectionReportDatesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StationCollectionReportDatesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StationCollectionReportDatesBody) UnmarshalBinary(b []byte) error {
	var res StationCollectionReportDatesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// StationCollectionReportDatesOKBody station collection report dates o k body
//
// swagger:model StationCollectionReportDatesOKBody
type StationCollectionReportDatesOKBody struct {

	// collection reports
	// Required: true
	CollectionReports []*model.CollectionReportWithUser `json:"collectionReports"`
}

// Validate validates this station collection report dates o k body
func (o *StationCollectionReportDatesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCollectionReports(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StationCollectionReportDatesOKBody) validateCollectionReports(formats strfmt.Registry) error {

	if err := validate.Required("stationCollectionReportDatesOK"+"."+"collectionReports", "body", o.CollectionReports); err != nil {
		return err
	}

	for i := 0; i < len(o.CollectionReports); i++ {
		if swag.IsZero(o.CollectionReports[i]) { // not required
			continue
		}

		if o.CollectionReports[i] != nil {
			if err := o.CollectionReports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stationCollectionReportDatesOK" + "." + "collectionReports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this station collection report dates o k body based on the context it is used
func (o *StationCollectionReportDatesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCollectionReports(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StationCollectionReportDatesOKBody) contextValidateCollectionReports(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.CollectionReports); i++ {

		if o.CollectionReports[i] != nil {
			if err := o.CollectionReports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stationCollectionReportDatesOK" + "." + "collectionReports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StationCollectionReportDatesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StationCollectionReportDatesOKBody) UnmarshalBinary(b []byte) error {
	var res StationCollectionReportDatesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
