// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/DiaElectronics/lea-central-wash/storageapi"
)

// GetLocalConfigVarIntHandlerFunc turns a function with the right signature into a get local config var int handler
type GetLocalConfigVarIntHandlerFunc func(GetLocalConfigVarIntParams, *storageapi.Profile) GetLocalConfigVarIntResponder

// Handle executing the request and returning a response
func (fn GetLocalConfigVarIntHandlerFunc) Handle(params GetLocalConfigVarIntParams, principal *storageapi.Profile) GetLocalConfigVarIntResponder {
	return fn(params, principal)
}

// GetLocalConfigVarIntHandler interface for that can handle valid get local config var int params
type GetLocalConfigVarIntHandler interface {
	Handle(GetLocalConfigVarIntParams, *storageapi.Profile) GetLocalConfigVarIntResponder
}

// NewGetLocalConfigVarInt creates a new http.Handler for the get local config var int operation
func NewGetLocalConfigVarInt(ctx *middleware.Context, handler GetLocalConfigVarIntHandler) *GetLocalConfigVarInt {
	return &GetLocalConfigVarInt{Context: ctx, Handler: handler}
}

/*
	GetLocalConfigVarInt swagger:route POST /get-local-config-var-int getLocalConfigVarInt

GetLocalConfigVarInt get local config var int API
*/
type GetLocalConfigVarInt struct {
	Context *middleware.Context
	Handler GetLocalConfigVarIntHandler
}

func (o *GetLocalConfigVarInt) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetLocalConfigVarIntParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *storageapi.Profile
	if uprinc != nil {
		principal = uprinc.(*storageapi.Profile) // this is really a storageapi.Profile, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetLocalConfigVarIntBody ArgGetLocalConfigVar
//
// swagger:model GetLocalConfigVarIntBody
type GetLocalConfigVarIntBody struct {

	// name
	Name string `json:"name,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *GetLocalConfigVarIntBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// name
		Name string `json:"name,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Name = props.Name
	return nil
}

// Validate validates this get local config var int body
func (o *GetLocalConfigVarIntBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get local config var int body based on context it is used
func (o *GetLocalConfigVarIntBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetLocalConfigVarIntBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetLocalConfigVarIntBody) UnmarshalBinary(b []byte) error {
	var res GetLocalConfigVarIntBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
