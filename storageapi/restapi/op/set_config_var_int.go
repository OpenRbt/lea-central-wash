// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SetConfigVarIntHandlerFunc turns a function with the right signature into a set config var int handler
type SetConfigVarIntHandlerFunc func(SetConfigVarIntParams) SetConfigVarIntResponder

// Handle executing the request and returning a response
func (fn SetConfigVarIntHandlerFunc) Handle(params SetConfigVarIntParams) SetConfigVarIntResponder {
	return fn(params)
}

// SetConfigVarIntHandler interface for that can handle valid set config var int params
type SetConfigVarIntHandler interface {
	Handle(SetConfigVarIntParams) SetConfigVarIntResponder
}

// NewSetConfigVarInt creates a new http.Handler for the set config var int operation
func NewSetConfigVarInt(ctx *middleware.Context, handler SetConfigVarIntHandler) *SetConfigVarInt {
	return &SetConfigVarInt{Context: ctx, Handler: handler}
}

/* SetConfigVarInt swagger:route POST /set-config-var-int setConfigVarInt

SetConfigVarInt set config var int API

*/
type SetConfigVarInt struct {
	Context *middleware.Context
	Handler SetConfigVarIntHandler
}

func (o *SetConfigVarInt) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSetConfigVarIntParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
