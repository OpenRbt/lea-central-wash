// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SetBonusesHandlerFunc turns a function with the right signature into a set bonuses handler
type SetBonusesHandlerFunc func(SetBonusesParams) SetBonusesResponder

// Handle executing the request and returning a response
func (fn SetBonusesHandlerFunc) Handle(params SetBonusesParams) SetBonusesResponder {
	return fn(params)
}

// SetBonusesHandler interface for that can handle valid set bonuses params
type SetBonusesHandler interface {
	Handle(SetBonusesParams) SetBonusesResponder
}

// NewSetBonuses creates a new http.Handler for the set bonuses operation
func NewSetBonuses(ctx *middleware.Context, handler SetBonusesHandler) *SetBonuses {
	return &SetBonuses{Context: ctx, Handler: handler}
}

/* SetBonuses swagger:route POST /set-bonuses setBonuses

SetBonuses set bonuses API

*/
type SetBonuses struct {
	Context *middleware.Context
	Handler SetBonusesHandler
}

func (o *SetBonuses) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSetBonusesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SetBonusesBody ArgSetBonuses
//
// swagger:model SetBonusesBody
type SetBonusesBody struct {

	// bonuses
	Bonuses int64 `json:"bonuses,omitempty"`

	// hash
	// Required: true
	Hash *string `json:"hash"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *SetBonusesBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// bonuses
		Bonuses int64 `json:"bonuses,omitempty"`

		// hash
		// Required: true
		Hash *string `json:"hash"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Bonuses = props.Bonuses
	o.Hash = props.Hash
	return nil
}

// Validate validates this set bonuses body
func (o *SetBonusesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetBonusesBody) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this set bonuses body based on context it is used
func (o *SetBonusesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SetBonusesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetBonusesBody) UnmarshalBinary(b []byte) error {
	var res SetBonusesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
