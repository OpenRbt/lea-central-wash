// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/OpenRbt/lea-central-wash/storageapi"
)

// DeleteTasksHandlerFunc turns a function with the right signature into a delete tasks handler
type DeleteTasksHandlerFunc func(DeleteTasksParams, *storageapi.Profile) DeleteTasksResponder

// Handle executing the request and returning a response
func (fn DeleteTasksHandlerFunc) Handle(params DeleteTasksParams, principal *storageapi.Profile) DeleteTasksResponder {
	return fn(params, principal)
}

// DeleteTasksHandler interface for that can handle valid delete tasks params
type DeleteTasksHandler interface {
	Handle(DeleteTasksParams, *storageapi.Profile) DeleteTasksResponder
}

// NewDeleteTasks creates a new http.Handler for the delete tasks operation
func NewDeleteTasks(ctx *middleware.Context, handler DeleteTasksHandler) *DeleteTasks {
	return &DeleteTasks{Context: ctx, Handler: handler}
}

/*
	DeleteTasks swagger:route DELETE /tasks deleteTasks

DeleteTasks delete tasks API
*/
type DeleteTasks struct {
	Context *middleware.Context
	Handler DeleteTasksHandler
}

func (o *DeleteTasks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteTasksParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *storageapi.Profile
	if uprinc != nil {
		principal = uprinc.(*storageapi.Profile) // this is really a storageapi.Profile, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
