// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/OpenRbt/lea-central-wash/storageapi"
)

// GetListBuildScriptsHandlerFunc turns a function with the right signature into a get list build scripts handler
type GetListBuildScriptsHandlerFunc func(GetListBuildScriptsParams, *storageapi.Profile) GetListBuildScriptsResponder

// Handle executing the request and returning a response
func (fn GetListBuildScriptsHandlerFunc) Handle(params GetListBuildScriptsParams, principal *storageapi.Profile) GetListBuildScriptsResponder {
	return fn(params, principal)
}

// GetListBuildScriptsHandler interface for that can handle valid get list build scripts params
type GetListBuildScriptsHandler interface {
	Handle(GetListBuildScriptsParams, *storageapi.Profile) GetListBuildScriptsResponder
}

// NewGetListBuildScripts creates a new http.Handler for the get list build scripts operation
func NewGetListBuildScripts(ctx *middleware.Context, handler GetListBuildScriptsHandler) *GetListBuildScripts {
	return &GetListBuildScripts{Context: ctx, Handler: handler}
}

/*
	GetListBuildScripts swagger:route GET /build-scripts getListBuildScripts

GetListBuildScripts get list build scripts API
*/
type GetListBuildScripts struct {
	Context *middleware.Context
	Handler GetListBuildScriptsHandler
}

func (o *GetListBuildScripts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetListBuildScriptsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *storageapi.Profile
	if uprinc != nil {
		principal = uprinc.(*storageapi.Profile) // this is really a storageapi.Profile, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
