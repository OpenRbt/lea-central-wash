// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/DiaElectronics/lea-central-wash/storageapi"
)

// GetLocalConfigVarStringHandlerFunc turns a function with the right signature into a get local config var string handler
type GetLocalConfigVarStringHandlerFunc func(GetLocalConfigVarStringParams, *storageapi.Profile) GetLocalConfigVarStringResponder

// Handle executing the request and returning a response
func (fn GetLocalConfigVarStringHandlerFunc) Handle(params GetLocalConfigVarStringParams, principal *storageapi.Profile) GetLocalConfigVarStringResponder {
	return fn(params, principal)
}

// GetLocalConfigVarStringHandler interface for that can handle valid get local config var string params
type GetLocalConfigVarStringHandler interface {
	Handle(GetLocalConfigVarStringParams, *storageapi.Profile) GetLocalConfigVarStringResponder
}

// NewGetLocalConfigVarString creates a new http.Handler for the get local config var string operation
func NewGetLocalConfigVarString(ctx *middleware.Context, handler GetLocalConfigVarStringHandler) *GetLocalConfigVarString {
	return &GetLocalConfigVarString{Context: ctx, Handler: handler}
}

/*
	GetLocalConfigVarString swagger:route POST /get-local-config-var-string getLocalConfigVarString

GetLocalConfigVarString get local config var string API
*/
type GetLocalConfigVarString struct {
	Context *middleware.Context
	Handler GetLocalConfigVarStringHandler
}

func (o *GetLocalConfigVarString) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetLocalConfigVarStringParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *storageapi.Profile
	if uprinc != nil {
		principal = uprinc.(*storageapi.Profile) // this is really a storageapi.Profile, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetLocalConfigVarStringBody ArgGetLocalConfigVar
//
// swagger:model GetLocalConfigVarStringBody
type GetLocalConfigVarStringBody struct {

	// name
	Name string `json:"name,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *GetLocalConfigVarStringBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// name
		Name string `json:"name,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Name = props.Name
	return nil
}

// Validate validates this get local config var string body
func (o *GetLocalConfigVarStringBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get local config var string body based on context it is used
func (o *GetLocalConfigVarStringBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetLocalConfigVarStringBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetLocalConfigVarStringBody) UnmarshalBinary(b []byte) error {
	var res GetLocalConfigVarStringBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
