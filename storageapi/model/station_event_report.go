// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StationEventReport station event report
//
// swagger:model StationEventReport
type StationEventReport struct {

	// events report
	EventsReport []*StationEvent `json:"eventsReport"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *StationEventReport) UnmarshalJSON(data []byte) error {
	var props struct {

		// events report
		EventsReport []*StationEvent `json:"eventsReport"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.EventsReport = props.EventsReport
	return nil
}

// Validate validates this station event report
func (m *StationEventReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventsReport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StationEventReport) validateEventsReport(formats strfmt.Registry) error {
	if swag.IsZero(m.EventsReport) { // not required
		return nil
	}

	for i := 0; i < len(m.EventsReport); i++ {
		if swag.IsZero(m.EventsReport[i]) { // not required
			continue
		}

		if m.EventsReport[i] != nil {
			if err := m.EventsReport[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventsReport" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this station event report based on the context it is used
func (m *StationEventReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventsReport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StationEventReport) contextValidateEventsReport(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EventsReport); i++ {

		if m.EventsReport[i] != nil {
			if err := m.EventsReport[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventsReport" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StationEventReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StationEventReport) UnmarshalBinary(b []byte) error {
	var res StationEventReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
