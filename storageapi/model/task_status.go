// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TaskStatus task status
//
// swagger:model TaskStatus
type TaskStatus string

func NewTaskStatus(value TaskStatus) *TaskStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TaskStatus.
func (m TaskStatus) Pointer() *TaskStatus {
	return &m
}

const (

	// TaskStatusQueue captures enum value "queue"
	TaskStatusQueue TaskStatus = "queue"

	// TaskStatusStarted captures enum value "started"
	TaskStatusStarted TaskStatus = "started"

	// TaskStatusCompleted captures enum value "completed"
	TaskStatusCompleted TaskStatus = "completed"

	// TaskStatusError captures enum value "error"
	TaskStatusError TaskStatus = "error"

	// TaskStatusCanceled captures enum value "canceled"
	TaskStatusCanceled TaskStatus = "canceled"
)

// for schema
var taskStatusEnum []interface{}

func init() {
	var res []TaskStatus
	if err := json.Unmarshal([]byte(`["queue","started","completed","error","canceled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskStatusEnum = append(taskStatusEnum, v)
	}
}

func (m TaskStatus) validateTaskStatusEnum(path, location string, value TaskStatus) error {
	if err := validate.EnumCase(path, location, value, taskStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this task status
func (m TaskStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTaskStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this task status based on context it is used
func (m TaskStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
