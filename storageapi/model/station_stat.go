// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StationStat station stat
//
// swagger:model StationStat
type StationStat struct {

	// program stats
	ProgramStats []*ProgramStat `json:"programStats"`

	// pump time on
	PumpTimeOn int64 `json:"pumpTimeOn,omitempty"`

	// relay stats
	RelayStats []*RelayStat `json:"relayStats"`

	// station ID
	StationID int64 `json:"stationID,omitempty"`
}

// Validate validates this station stat
func (m *StationStat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProgramStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelayStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StationStat) validateProgramStats(formats strfmt.Registry) error {
	if swag.IsZero(m.ProgramStats) { // not required
		return nil
	}

	for i := 0; i < len(m.ProgramStats); i++ {
		if swag.IsZero(m.ProgramStats[i]) { // not required
			continue
		}

		if m.ProgramStats[i] != nil {
			if err := m.ProgramStats[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("programStats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StationStat) validateRelayStats(formats strfmt.Registry) error {
	if swag.IsZero(m.RelayStats) { // not required
		return nil
	}

	for i := 0; i < len(m.RelayStats); i++ {
		if swag.IsZero(m.RelayStats[i]) { // not required
			continue
		}

		if m.RelayStats[i] != nil {
			if err := m.RelayStats[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relayStats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this station stat based on the context it is used
func (m *StationStat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProgramStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelayStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StationStat) contextValidateProgramStats(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProgramStats); i++ {

		if m.ProgramStats[i] != nil {
			if err := m.ProgramStats[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("programStats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StationStat) contextValidateRelayStats(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RelayStats); i++ {

		if m.RelayStats[i] != nil {
			if err := m.RelayStats[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relayStats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StationStat) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StationStat) UnmarshalBinary(b []byte) error {
	var res StationStat
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
