// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServiceStatus service status
//
// swagger:model ServiceStatus
type ServiceStatus struct {

	// available
	Available bool `json:"available,omitempty"`

	// Unix time
	DateLastErrUTC *int64 `json:"dateLastErrUTC,omitempty"`

	// disabled on server
	DisabledOnServer bool `json:"disabledOnServer,omitempty"`

	// is connected
	IsConnected bool `json:"isConnected,omitempty"`

	// last err
	LastErr string `json:"lastErr,omitempty"`

	// unpaid stations
	UnpaidStations []int64 `json:"unpaidStations"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *ServiceStatus) UnmarshalJSON(data []byte) error {
	var props struct {

		// available
		Available bool `json:"available,omitempty"`

		// Unix time
		DateLastErrUTC *int64 `json:"dateLastErrUTC,omitempty"`

		// disabled on server
		DisabledOnServer bool `json:"disabledOnServer,omitempty"`

		// is connected
		IsConnected bool `json:"isConnected,omitempty"`

		// last err
		LastErr string `json:"lastErr,omitempty"`

		// unpaid stations
		UnpaidStations []int64 `json:"unpaidStations"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Available = props.Available
	m.DateLastErrUTC = props.DateLastErrUTC
	m.DisabledOnServer = props.DisabledOnServer
	m.IsConnected = props.IsConnected
	m.LastErr = props.LastErr
	m.UnpaidStations = props.UnpaidStations
	return nil
}

// Validate validates this service status
func (m *ServiceStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service status based on context it is used
func (m *ServiceStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceStatus) UnmarshalBinary(b []byte) error {
	var res ServiceStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
