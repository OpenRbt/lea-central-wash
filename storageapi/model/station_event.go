// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StationEvent station event
//
// swagger:model StationEvent
type StationEvent struct {

	// ctime
	Ctime int64 `json:"ctime,omitempty"`

	// info
	Info string `json:"info,omitempty"`

	// module
	Module string `json:"module,omitempty"`

	// station ID
	StationID int64 `json:"stationID,omitempty"`

	// status
	// Enum: [OK WARNING ERROR CRITICAL]
	Status string `json:"status,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *StationEvent) UnmarshalJSON(data []byte) error {
	var props struct {

		// ctime
		Ctime int64 `json:"ctime,omitempty"`

		// info
		Info string `json:"info,omitempty"`

		// module
		Module string `json:"module,omitempty"`

		// station ID
		StationID int64 `json:"stationID,omitempty"`

		// status
		// Enum: [OK WARNING ERROR CRITICAL]
		Status string `json:"status,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Ctime = props.Ctime
	m.Info = props.Info
	m.Module = props.Module
	m.StationID = props.StationID
	m.Status = props.Status
	return nil
}

// Validate validates this station event
func (m *StationEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var stationEventTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK","WARNING","ERROR","CRITICAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stationEventTypeStatusPropEnum = append(stationEventTypeStatusPropEnum, v)
	}
}

const (

	// StationEventStatusOK captures enum value "OK"
	StationEventStatusOK string = "OK"

	// StationEventStatusWARNING captures enum value "WARNING"
	StationEventStatusWARNING string = "WARNING"

	// StationEventStatusERROR captures enum value "ERROR"
	StationEventStatusERROR string = "ERROR"

	// StationEventStatusCRITICAL captures enum value "CRITICAL"
	StationEventStatusCRITICAL string = "CRITICAL"
)

// prop value enum
func (m *StationEvent) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stationEventTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StationEvent) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this station event based on context it is used
func (m *StationEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StationEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StationEvent) UnmarshalBinary(b []byte) error {
	var res StationEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
