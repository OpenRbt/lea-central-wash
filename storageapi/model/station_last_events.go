// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StationLastEvents station last events
//
// swagger:model StationLastEvents
type StationLastEvents struct {

	// critical ctime
	CriticalCtime int64 `json:"critical_ctime,omitempty"`

	// error ctime
	ErrorCtime int64 `json:"error_ctime,omitempty"`

	// ok ctime
	OkCtime int64 `json:"ok_ctime,omitempty"`

	// warning ctime
	WarningCtime int64 `json:"warning_ctime,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *StationLastEvents) UnmarshalJSON(data []byte) error {
	var props struct {

		// critical ctime
		CriticalCtime int64 `json:"critical_ctime,omitempty"`

		// error ctime
		ErrorCtime int64 `json:"error_ctime,omitempty"`

		// ok ctime
		OkCtime int64 `json:"ok_ctime,omitempty"`

		// warning ctime
		WarningCtime int64 `json:"warning_ctime,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.CriticalCtime = props.CriticalCtime
	m.ErrorCtime = props.ErrorCtime
	m.OkCtime = props.OkCtime
	m.WarningCtime = props.WarningCtime
	return nil
}

// Validate validates this station last events
func (m *StationLastEvents) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this station last events based on context it is used
func (m *StationLastEvents) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StationLastEvents) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StationLastEvents) UnmarshalBinary(b []byte) error {
	var res StationLastEvents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
