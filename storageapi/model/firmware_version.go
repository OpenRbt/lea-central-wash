// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirmwareVersion firmware version
//
// swagger:model FirmwareVersion
type FirmwareVersion struct {

	// built at
	// Required: true
	// Format: date-time
	BuiltAt *strfmt.DateTime `json:"builtAt"`

	// commited at
	// Required: true
	// Format: date-time
	CommitedAt *strfmt.DateTime `json:"commitedAt"`

	// hash binar
	// Required: true
	HashBinar *string `json:"hashBinar"`

	// hash env
	// Required: true
	HashEnv *string `json:"hashEnv"`

	// hash lua
	// Required: true
	HashLua *string `json:"hashLua"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// is current
	// Required: true
	IsCurrent *bool `json:"isCurrent"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *FirmwareVersion) UnmarshalJSON(data []byte) error {
	var props struct {

		// built at
		// Required: true
		// Format: date-time
		BuiltAt *strfmt.DateTime `json:"builtAt"`

		// commited at
		// Required: true
		// Format: date-time
		CommitedAt *strfmt.DateTime `json:"commitedAt"`

		// hash binar
		// Required: true
		HashBinar *string `json:"hashBinar"`

		// hash env
		// Required: true
		HashEnv *string `json:"hashEnv"`

		// hash lua
		// Required: true
		HashLua *string `json:"hashLua"`

		// id
		// Required: true
		ID *int64 `json:"id"`

		// is current
		// Required: true
		IsCurrent *bool `json:"isCurrent"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.BuiltAt = props.BuiltAt
	m.CommitedAt = props.CommitedAt
	m.HashBinar = props.HashBinar
	m.HashEnv = props.HashEnv
	m.HashLua = props.HashLua
	m.ID = props.ID
	m.IsCurrent = props.IsCurrent
	return nil
}

// Validate validates this firmware version
func (m *FirmwareVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuiltAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHashBinar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHashEnv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHashLua(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsCurrent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirmwareVersion) validateBuiltAt(formats strfmt.Registry) error {

	if err := validate.Required("builtAt", "body", m.BuiltAt); err != nil {
		return err
	}

	if err := validate.FormatOf("builtAt", "body", "date-time", m.BuiltAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FirmwareVersion) validateCommitedAt(formats strfmt.Registry) error {

	if err := validate.Required("commitedAt", "body", m.CommitedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("commitedAt", "body", "date-time", m.CommitedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FirmwareVersion) validateHashBinar(formats strfmt.Registry) error {

	if err := validate.Required("hashBinar", "body", m.HashBinar); err != nil {
		return err
	}

	return nil
}

func (m *FirmwareVersion) validateHashEnv(formats strfmt.Registry) error {

	if err := validate.Required("hashEnv", "body", m.HashEnv); err != nil {
		return err
	}

	return nil
}

func (m *FirmwareVersion) validateHashLua(formats strfmt.Registry) error {

	if err := validate.Required("hashLua", "body", m.HashLua); err != nil {
		return err
	}

	return nil
}

func (m *FirmwareVersion) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *FirmwareVersion) validateIsCurrent(formats strfmt.Registry) error {

	if err := validate.Required("isCurrent", "body", m.IsCurrent); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this firmware version based on context it is used
func (m *FirmwareVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareVersion) UnmarshalBinary(b []byte) error {
	var res FirmwareVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
