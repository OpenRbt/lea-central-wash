// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new op API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for op API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddAdvertisingCampaign(params *AddAdvertisingCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*AddAdvertisingCampaignNoContent, error)

	AddServiceAmount(params *AddServiceAmountParams) (*AddServiceAmountNoContent, error)

	AdvertisingCampaign(params *AdvertisingCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*AdvertisingCampaignOK, error)

	AdvertisingCampaignByID(params *AdvertisingCampaignByIDParams, authInfo runtime.ClientAuthInfoWriter) (*AdvertisingCampaignByIDOK, error)

	CardReaderConfig(params *CardReaderConfigParams) (*CardReaderConfigOK, error)

	CardReaderConfigByHash(params *CardReaderConfigByHashParams) (*CardReaderConfigByHashOK, error)

	CreateUser(params *CreateUserParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserCreated, error)

	DelAdvertisingCampaign(params *DelAdvertisingCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*DelAdvertisingCampaignNoContent, error)

	DelStation(params *DelStationParams) (*DelStationNoContent, error)

	DeleteUser(params *DeleteUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserNoContent, error)

	EditAdvertisingCampaign(params *EditAdvertisingCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*EditAdvertisingCampaignNoContent, error)

	GetConfigVarBool(params *GetConfigVarBoolParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigVarBoolOK, error)

	GetConfigVarInt(params *GetConfigVarIntParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigVarIntOK, error)

	GetConfigVarString(params *GetConfigVarStringParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigVarStringOK, error)

	GetPing(params *GetPingParams) (*GetPingOK, error)

	GetStationDiscounts(params *GetStationDiscountsParams) (*GetStationDiscountsOK, error)

	GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOK, error)

	GetUsers(params *GetUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersOK, error)

	Info(params *InfoParams) (*InfoOK, error)

	Kasse(params *KasseParams) (*KasseOK, error)

	Load(params *LoadParams) (*LoadOK, error)

	LoadFromStation(params *LoadFromStationParams) (*LoadFromStationOK, error)

	LoadMoney(params *LoadMoneyParams) (*LoadMoneyOK, error)

	LoadRelay(params *LoadRelayParams) (*LoadRelayOK, error)

	OpenStation(params *OpenStationParams) (*OpenStationNoContent, error)

	Ping(params *PingParams) (*PingOK, error)

	PressButton(params *PressButtonParams) (*PressButtonNoContent, error)

	Programs(params *ProgramsParams) (*ProgramsOK, error)

	ResetStationStat(params *ResetStationStatParams, authInfo runtime.ClientAuthInfoWriter) (*ResetStationStatNoContent, error)

	RunProgram(params *RunProgramParams) (*RunProgramNoContent, error)

	Save(params *SaveParams) (*SaveNoContent, error)

	SaveCollection(params *SaveCollectionParams, authInfo runtime.ClientAuthInfoWriter) (*SaveCollectionNoContent, error)

	SaveIfNotExists(params *SaveIfNotExistsParams) (*SaveIfNotExistsNoContent, error)

	SaveMoney(params *SaveMoneyParams) (*SaveMoneyNoContent, error)

	SaveRelay(params *SaveRelayParams) (*SaveRelayNoContent, error)

	SetCardReaderConfig(params *SetCardReaderConfigParams) (*SetCardReaderConfigNoContent, error)

	SetConfigVarBool(params *SetConfigVarBoolParams, authInfo runtime.ClientAuthInfoWriter) (*SetConfigVarBoolNoContent, error)

	SetConfigVarInt(params *SetConfigVarIntParams, authInfo runtime.ClientAuthInfoWriter) (*SetConfigVarIntNoContent, error)

	SetConfigVarString(params *SetConfigVarStringParams, authInfo runtime.ClientAuthInfoWriter) (*SetConfigVarStringNoContent, error)

	SetKasse(params *SetKasseParams) (*SetKasseNoContent, error)

	SetProgram(params *SetProgramParams) (*SetProgramNoContent, error)

	SetStation(params *SetStationParams) (*SetStationNoContent, error)

	SetStationButton(params *SetStationButtonParams) (*SetStationButtonNoContent, error)

	Station(params *StationParams) (*StationOK, error)

	StationButton(params *StationButtonParams) (*StationButtonOK, error)

	StationByHash(params *StationByHashParams) (*StationByHashOK, error)

	StationCollectionReportDates(params *StationCollectionReportDatesParams, authInfo runtime.ClientAuthInfoWriter) (*StationCollectionReportDatesOK, error)

	StationProgramByHash(params *StationProgramByHashParams) (*StationProgramByHashOK, error)

	StationReportCurrentMoney(params *StationReportCurrentMoneyParams) (*StationReportCurrentMoneyOK, error)

	StationReportDates(params *StationReportDatesParams) (*StationReportDatesOK, error)

	StationStatCurrent(params *StationStatCurrentParams, authInfo runtime.ClientAuthInfoWriter) (*StationStatCurrentOK, error)

	StationStatDates(params *StationStatDatesParams, authInfo runtime.ClientAuthInfoWriter) (*StationStatDatesOK, error)

	StationsVariables(params *StationsVariablesParams) (*StationsVariablesOK, error)

	Status(params *StatusParams) (*StatusOK, error)

	StatusCollection(params *StatusCollectionParams, authInfo runtime.ClientAuthInfoWriter) (*StatusCollectionOK, error)

	UpdateUser(params *UpdateUserParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserCreated, error)

	UpdateUserPassword(params *UpdateUserPasswordParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserPasswordCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddAdvertisingCampaign add advertising campaign API
*/
func (a *Client) AddAdvertisingCampaign(params *AddAdvertisingCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*AddAdvertisingCampaignNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAdvertisingCampaignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addAdvertisingCampaign",
		Method:             "POST",
		PathPattern:        "/add-advertising-campaign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddAdvertisingCampaignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAdvertisingCampaignNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addAdvertisingCampaign: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddServiceAmount add service amount API
*/
func (a *Client) AddServiceAmount(params *AddServiceAmountParams) (*AddServiceAmountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddServiceAmountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addServiceAmount",
		Method:             "POST",
		PathPattern:        "/add-service-amount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddServiceAmountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddServiceAmountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addServiceAmount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdvertisingCampaign advertising campaign API
*/
func (a *Client) AdvertisingCampaign(params *AdvertisingCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*AdvertisingCampaignOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdvertisingCampaignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "advertisingCampaign",
		Method:             "POST",
		PathPattern:        "/advertising-campaign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdvertisingCampaignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdvertisingCampaignOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for advertisingCampaign: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdvertisingCampaignByID advertising campaign by ID API
*/
func (a *Client) AdvertisingCampaignByID(params *AdvertisingCampaignByIDParams, authInfo runtime.ClientAuthInfoWriter) (*AdvertisingCampaignByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdvertisingCampaignByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "advertisingCampaignByID",
		Method:             "POST",
		PathPattern:        "/advertising-campaign-by-id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdvertisingCampaignByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdvertisingCampaignByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for advertisingCampaignByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CardReaderConfig card reader config API
*/
func (a *Client) CardReaderConfig(params *CardReaderConfigParams) (*CardReaderConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardReaderConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cardReaderConfig",
		Method:             "POST",
		PathPattern:        "/card-reader-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CardReaderConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardReaderConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cardReaderConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CardReaderConfigByHash card reader config by hash API
*/
func (a *Client) CardReaderConfigByHash(params *CardReaderConfigByHashParams) (*CardReaderConfigByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardReaderConfigByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cardReaderConfigByHash",
		Method:             "POST",
		PathPattern:        "/card-reader-config-by-hash",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CardReaderConfigByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardReaderConfigByHashOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cardReaderConfigByHash: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUser create user API
*/
func (a *Client) CreateUser(params *CreateUserParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUser",
		Method:             "POST",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DelAdvertisingCampaign del advertising campaign API
*/
func (a *Client) DelAdvertisingCampaign(params *DelAdvertisingCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*DelAdvertisingCampaignNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelAdvertisingCampaignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delAdvertisingCampaign",
		Method:             "POST",
		PathPattern:        "/del-advertising-campaign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DelAdvertisingCampaignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelAdvertisingCampaignNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delAdvertisingCampaign: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DelStation del station API
*/
func (a *Client) DelStation(params *DelStationParams) (*DelStationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelStationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delStation",
		Method:             "POST",
		PathPattern:        "/del-station",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DelStationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelStationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delStation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUser delete user API
*/
func (a *Client) DeleteUser(params *DeleteUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUser",
		Method:             "DELETE",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EditAdvertisingCampaign edit advertising campaign API
*/
func (a *Client) EditAdvertisingCampaign(params *EditAdvertisingCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*EditAdvertisingCampaignNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditAdvertisingCampaignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "editAdvertisingCampaign",
		Method:             "POST",
		PathPattern:        "/edit-advertising-campaign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditAdvertisingCampaignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditAdvertisingCampaignNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editAdvertisingCampaign: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConfigVarBool get config var bool API
*/
func (a *Client) GetConfigVarBool(params *GetConfigVarBoolParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigVarBoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigVarBoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfigVarBool",
		Method:             "POST",
		PathPattern:        "/get-config-var-bool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigVarBoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigVarBoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConfigVarBool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConfigVarInt get config var int API
*/
func (a *Client) GetConfigVarInt(params *GetConfigVarIntParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigVarIntOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigVarIntParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfigVarInt",
		Method:             "POST",
		PathPattern:        "/get-config-var-int",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigVarIntReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigVarIntOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConfigVarInt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConfigVarString get config var string API
*/
func (a *Client) GetConfigVarString(params *GetConfigVarStringParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigVarStringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigVarStringParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfigVarString",
		Method:             "POST",
		PathPattern:        "/get-config-var-string",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigVarStringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigVarStringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConfigVarString: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPing get ping API
*/
func (a *Client) GetPing(params *GetPingParams) (*GetPingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPing",
		Method:             "GET",
		PathPattern:        "/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStationDiscounts get station discounts API
*/
func (a *Client) GetStationDiscounts(params *GetStationDiscountsParams) (*GetStationDiscountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStationDiscountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStationDiscounts",
		Method:             "POST",
		PathPattern:        "/get-station-discounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStationDiscountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStationDiscountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStationDiscounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUser get user API
*/
func (a *Client) GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUser",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsers get users API
*/
func (a *Client) GetUsers(params *GetUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsers",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Info info API
*/
func (a *Client) Info(params *InfoParams) (*InfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "info",
		Method:             "GET",
		PathPattern:        "/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for info: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Kasse kasse API
*/
func (a *Client) Kasse(params *KasseParams) (*KasseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKasseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "kasse",
		Method:             "POST",
		PathPattern:        "/kasse",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &KasseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KasseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for kasse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Load load API
*/
func (a *Client) Load(params *LoadParams) (*LoadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "load",
		Method:             "POST",
		PathPattern:        "/load",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for load: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LoadFromStation load from station API
*/
func (a *Client) LoadFromStation(params *LoadFromStationParams) (*LoadFromStationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadFromStationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "loadFromStation",
		Method:             "POST",
		PathPattern:        "/load-from-station",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadFromStationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoadFromStationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for loadFromStation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LoadMoney load money API
*/
func (a *Client) LoadMoney(params *LoadMoneyParams) (*LoadMoneyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadMoneyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "loadMoney",
		Method:             "POST",
		PathPattern:        "/load-money",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadMoneyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoadMoneyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for loadMoney: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LoadRelay load relay API
*/
func (a *Client) LoadRelay(params *LoadRelayParams) (*LoadRelayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadRelayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "loadRelay",
		Method:             "POST",
		PathPattern:        "/load-relay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadRelayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoadRelayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for loadRelay: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenStation open station API
*/
func (a *Client) OpenStation(params *OpenStationParams) (*OpenStationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenStationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "openStation",
		Method:             "POST",
		PathPattern:        "/open-station",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OpenStationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenStationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for openStation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Ping ping API
*/
func (a *Client) Ping(params *PingParams) (*PingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ping",
		Method:             "POST",
		PathPattern:        "/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PressButton press button API
*/
func (a *Client) PressButton(params *PressButtonParams) (*PressButtonNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPressButtonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pressButton",
		Method:             "POST",
		PathPattern:        "/press-button",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PressButtonReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PressButtonNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pressButton: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Programs programs API
*/
func (a *Client) Programs(params *ProgramsParams) (*ProgramsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProgramsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "programs",
		Method:             "POST",
		PathPattern:        "/programs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProgramsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProgramsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for programs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResetStationStat reset station stat API
*/
func (a *Client) ResetStationStat(params *ResetStationStatParams, authInfo runtime.ClientAuthInfoWriter) (*ResetStationStatNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetStationStatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resetStationStat",
		Method:             "POST",
		PathPattern:        "/reset-station-stat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResetStationStatReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetStationStatNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resetStationStat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RunProgram run program API
*/
func (a *Client) RunProgram(params *RunProgramParams) (*RunProgramNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunProgramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "runProgram",
		Method:             "POST",
		PathPattern:        "/run-program",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RunProgramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunProgramNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for runProgram: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Save save API
*/
func (a *Client) Save(params *SaveParams) (*SaveNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "save",
		Method:             "POST",
		PathPattern:        "/save",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for save: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SaveCollection save collection API
*/
func (a *Client) SaveCollection(params *SaveCollectionParams, authInfo runtime.ClientAuthInfoWriter) (*SaveCollectionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "saveCollection",
		Method:             "POST",
		PathPattern:        "/save-collection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveCollectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveCollectionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveCollection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SaveIfNotExists save if not exists API
*/
func (a *Client) SaveIfNotExists(params *SaveIfNotExistsParams) (*SaveIfNotExistsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveIfNotExistsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "saveIfNotExists",
		Method:             "POST",
		PathPattern:        "/save-if-not-exists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveIfNotExistsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveIfNotExistsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveIfNotExists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SaveMoney save money API
*/
func (a *Client) SaveMoney(params *SaveMoneyParams) (*SaveMoneyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveMoneyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "saveMoney",
		Method:             "POST",
		PathPattern:        "/save-money",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveMoneyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveMoneyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveMoney: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SaveRelay save relay API
*/
func (a *Client) SaveRelay(params *SaveRelayParams) (*SaveRelayNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveRelayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "saveRelay",
		Method:             "POST",
		PathPattern:        "/save-relay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveRelayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveRelayNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveRelay: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetCardReaderConfig set card reader config API
*/
func (a *Client) SetCardReaderConfig(params *SetCardReaderConfigParams) (*SetCardReaderConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCardReaderConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setCardReaderConfig",
		Method:             "POST",
		PathPattern:        "/set-card-reader-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCardReaderConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetCardReaderConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setCardReaderConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetConfigVarBool set config var bool API
*/
func (a *Client) SetConfigVarBool(params *SetConfigVarBoolParams, authInfo runtime.ClientAuthInfoWriter) (*SetConfigVarBoolNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetConfigVarBoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setConfigVarBool",
		Method:             "POST",
		PathPattern:        "/set-config-var-bool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetConfigVarBoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetConfigVarBoolNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setConfigVarBool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetConfigVarInt set config var int API
*/
func (a *Client) SetConfigVarInt(params *SetConfigVarIntParams, authInfo runtime.ClientAuthInfoWriter) (*SetConfigVarIntNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetConfigVarIntParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setConfigVarInt",
		Method:             "POST",
		PathPattern:        "/set-config-var-int",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetConfigVarIntReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetConfigVarIntNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setConfigVarInt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetConfigVarString set config var string API
*/
func (a *Client) SetConfigVarString(params *SetConfigVarStringParams, authInfo runtime.ClientAuthInfoWriter) (*SetConfigVarStringNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetConfigVarStringParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setConfigVarString",
		Method:             "POST",
		PathPattern:        "/set-config-var-string",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetConfigVarStringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetConfigVarStringNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setConfigVarString: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetKasse set kasse API
*/
func (a *Client) SetKasse(params *SetKasseParams) (*SetKasseNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetKasseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setKasse",
		Method:             "POST",
		PathPattern:        "/set-kasse",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetKasseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetKasseNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setKasse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetProgram set program API
*/
func (a *Client) SetProgram(params *SetProgramParams) (*SetProgramNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetProgramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setProgram",
		Method:             "POST",
		PathPattern:        "/set-program",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetProgramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetProgramNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setProgram: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetStation set station API
*/
func (a *Client) SetStation(params *SetStationParams) (*SetStationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetStationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setStation",
		Method:             "POST",
		PathPattern:        "/set-station",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetStationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetStationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setStation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetStationButton set station button API
*/
func (a *Client) SetStationButton(params *SetStationButtonParams) (*SetStationButtonNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetStationButtonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setStationButton",
		Method:             "POST",
		PathPattern:        "/set-station-button",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetStationButtonReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetStationButtonNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setStationButton: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Station station API
*/
func (a *Client) Station(params *StationParams) (*StationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "station",
		Method:             "POST",
		PathPattern:        "/station",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for station: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationButton station button API
*/
func (a *Client) StationButton(params *StationButtonParams) (*StationButtonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationButtonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stationButton",
		Method:             "POST",
		PathPattern:        "/station-button",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StationButtonReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationButtonOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stationButton: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationByHash station by hash API
*/
func (a *Client) StationByHash(params *StationByHashParams) (*StationByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stationByHash",
		Method:             "POST",
		PathPattern:        "/station-by-hash",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StationByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationByHashOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stationByHash: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationCollectionReportDates station collection report dates API
*/
func (a *Client) StationCollectionReportDates(params *StationCollectionReportDatesParams, authInfo runtime.ClientAuthInfoWriter) (*StationCollectionReportDatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationCollectionReportDatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stationCollectionReportDates",
		Method:             "POST",
		PathPattern:        "/station-collection-report-dates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StationCollectionReportDatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationCollectionReportDatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stationCollectionReportDates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationProgramByHash station program by hash API
*/
func (a *Client) StationProgramByHash(params *StationProgramByHashParams) (*StationProgramByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationProgramByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stationProgramByHash",
		Method:             "POST",
		PathPattern:        "/station-program-by-hash",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StationProgramByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationProgramByHashOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stationProgramByHash: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationReportCurrentMoney station report current money API
*/
func (a *Client) StationReportCurrentMoney(params *StationReportCurrentMoneyParams) (*StationReportCurrentMoneyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationReportCurrentMoneyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stationReportCurrentMoney",
		Method:             "POST",
		PathPattern:        "/station-report-current-money",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StationReportCurrentMoneyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationReportCurrentMoneyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stationReportCurrentMoney: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationReportDates station report dates API
*/
func (a *Client) StationReportDates(params *StationReportDatesParams) (*StationReportDatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationReportDatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stationReportDates",
		Method:             "POST",
		PathPattern:        "/station-report-dates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StationReportDatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationReportDatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stationReportDates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationStatCurrent station stat current API
*/
func (a *Client) StationStatCurrent(params *StationStatCurrentParams, authInfo runtime.ClientAuthInfoWriter) (*StationStatCurrentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationStatCurrentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stationStatCurrent",
		Method:             "POST",
		PathPattern:        "/station-stat-current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StationStatCurrentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationStatCurrentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stationStatCurrent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationStatDates station stat dates API
*/
func (a *Client) StationStatDates(params *StationStatDatesParams, authInfo runtime.ClientAuthInfoWriter) (*StationStatDatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationStatDatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stationStatDates",
		Method:             "POST",
		PathPattern:        "/station-stat-dates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StationStatDatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationStatDatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stationStatDates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationsVariables stations variables API
*/
func (a *Client) StationsVariables(params *StationsVariablesParams) (*StationsVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationsVariablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stationsVariables",
		Method:             "POST",
		PathPattern:        "/stations-variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StationsVariablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationsVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stationsVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Status status API
*/
func (a *Client) Status(params *StatusParams) (*StatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "status",
		Method:             "GET",
		PathPattern:        "/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StatusCollection status collection API
*/
func (a *Client) StatusCollection(params *StatusCollectionParams, authInfo runtime.ClientAuthInfoWriter) (*StatusCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "statusCollection",
		Method:             "GET",
		PathPattern:        "/status-collection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StatusCollectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatusCollectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for statusCollection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUser update user API
*/
func (a *Client) UpdateUser(params *UpdateUserParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUser",
		Method:             "PUT",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUserPassword update user password API
*/
func (a *Client) UpdateUserPassword(params *UpdateUserPasswordParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserPasswordCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUserPassword",
		Method:             "POST",
		PathPattern:        "/user-password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserPasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserPasswordCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserPassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
