// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new op API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for op API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddServiceAmount add service amount API
*/
func (a *Client) AddServiceAmount(params *AddServiceAmountParams) (*AddServiceAmountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddServiceAmountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addServiceAmount",
		Method:             "POST",
		PathPattern:        "/add-service-amount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddServiceAmountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddServiceAmountNoContent), nil

}

/*
DelStation del station API
*/
func (a *Client) DelStation(params *DelStationParams) (*DelStationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelStationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delStation",
		Method:             "POST",
		PathPattern:        "/del-station",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DelStationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DelStationNoContent), nil

}

/*
GetPing get ping API
*/
func (a *Client) GetPing(params *GetPingParams) (*GetPingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPing",
		Method:             "GET",
		PathPattern:        "/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPingOK), nil

}

/*
Info info API
*/
func (a *Client) Info(params *InfoParams) (*InfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "info",
		Method:             "GET",
		PathPattern:        "/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InfoOK), nil

}

/*
Load load API
*/
func (a *Client) Load(params *LoadParams) (*LoadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "load",
		Method:             "POST",
		PathPattern:        "/load",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadOK), nil

}

/*
LoadMoney load money API
*/
func (a *Client) LoadMoney(params *LoadMoneyParams) (*LoadMoneyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadMoneyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "loadMoney",
		Method:             "POST",
		PathPattern:        "/load-money",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadMoneyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadMoneyOK), nil

}

/*
LoadRelay load relay API
*/
func (a *Client) LoadRelay(params *LoadRelayParams) (*LoadRelayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadRelayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "loadRelay",
		Method:             "POST",
		PathPattern:        "/load-relay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadRelayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadRelayOK), nil

}

/*
Ping ping API
*/
func (a *Client) Ping(params *PingParams) (*PingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ping",
		Method:             "POST",
		PathPattern:        "/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PingOK), nil

}

/*
Save save API
*/
func (a *Client) Save(params *SaveParams) (*SaveNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "save",
		Method:             "POST",
		PathPattern:        "/save",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SaveNoContent), nil

}

/*
SaveMoney save money API
*/
func (a *Client) SaveMoney(params *SaveMoneyParams) (*SaveMoneyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveMoneyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "saveMoney",
		Method:             "POST",
		PathPattern:        "/save-money",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveMoneyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SaveMoneyNoContent), nil

}

/*
SaveRelay save relay API
*/
func (a *Client) SaveRelay(params *SaveRelayParams) (*SaveRelayNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveRelayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "saveRelay",
		Method:             "POST",
		PathPattern:        "/save-relay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveRelayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SaveRelayNoContent), nil

}

/*
SetStation set station API
*/
func (a *Client) SetStation(params *SetStationParams) (*SetStationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetStationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setStation",
		Method:             "POST",
		PathPattern:        "/set-station",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetStationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetStationNoContent), nil

}

/*
StationReport station report API
*/
func (a *Client) StationReport(params *StationReportParams) (*StationReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stationReport",
		Method:             "POST",
		PathPattern:        "/station-report",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StationReportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StationReportOK), nil

}

/*
Status status API
*/
func (a *Client) Status(params *StatusParams) (*StatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "status",
		Method:             "GET",
		PathPattern:        "/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StatusOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
