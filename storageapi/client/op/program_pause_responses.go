// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// ProgramPauseReader is a Reader for the ProgramPause structure.
type ProgramPauseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProgramPauseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewProgramPauseNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewProgramPauseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProgramPauseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProgramPauseNoContent creates a ProgramPauseNoContent with default headers values
func NewProgramPauseNoContent() *ProgramPauseNoContent {
	return &ProgramPauseNoContent{}
}

/*
ProgramPauseNoContent describes a response with status code 204, with default header values.

OK
*/
type ProgramPauseNoContent struct {
}

// IsSuccess returns true when this program pause no content response has a 2xx status code
func (o *ProgramPauseNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this program pause no content response has a 3xx status code
func (o *ProgramPauseNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this program pause no content response has a 4xx status code
func (o *ProgramPauseNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this program pause no content response has a 5xx status code
func (o *ProgramPauseNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this program pause no content response a status code equal to that given
func (o *ProgramPauseNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the program pause no content response
func (o *ProgramPauseNoContent) Code() int {
	return 204
}

func (o *ProgramPauseNoContent) Error() string {
	return fmt.Sprintf("[POST /pause-program][%d] programPauseNoContent ", 204)
}

func (o *ProgramPauseNoContent) String() string {
	return fmt.Sprintf("[POST /pause-program][%d] programPauseNoContent ", 204)
}

func (o *ProgramPauseNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewProgramPauseNotFound creates a ProgramPauseNotFound with default headers values
func NewProgramPauseNotFound() *ProgramPauseNotFound {
	return &ProgramPauseNotFound{}
}

/*
ProgramPauseNotFound describes a response with status code 404, with default header values.

not found
*/
type ProgramPauseNotFound struct {
	Payload string
}

// IsSuccess returns true when this program pause not found response has a 2xx status code
func (o *ProgramPauseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this program pause not found response has a 3xx status code
func (o *ProgramPauseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this program pause not found response has a 4xx status code
func (o *ProgramPauseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this program pause not found response has a 5xx status code
func (o *ProgramPauseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this program pause not found response a status code equal to that given
func (o *ProgramPauseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the program pause not found response
func (o *ProgramPauseNotFound) Code() int {
	return 404
}

func (o *ProgramPauseNotFound) Error() string {
	return fmt.Sprintf("[POST /pause-program][%d] programPauseNotFound  %+v", 404, o.Payload)
}

func (o *ProgramPauseNotFound) String() string {
	return fmt.Sprintf("[POST /pause-program][%d] programPauseNotFound  %+v", 404, o.Payload)
}

func (o *ProgramPauseNotFound) GetPayload() string {
	return o.Payload
}

func (o *ProgramPauseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProgramPauseInternalServerError creates a ProgramPauseInternalServerError with default headers values
func NewProgramPauseInternalServerError() *ProgramPauseInternalServerError {
	return &ProgramPauseInternalServerError{}
}

/*
ProgramPauseInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type ProgramPauseInternalServerError struct {
}

// IsSuccess returns true when this program pause internal server error response has a 2xx status code
func (o *ProgramPauseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this program pause internal server error response has a 3xx status code
func (o *ProgramPauseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this program pause internal server error response has a 4xx status code
func (o *ProgramPauseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this program pause internal server error response has a 5xx status code
func (o *ProgramPauseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this program pause internal server error response a status code equal to that given
func (o *ProgramPauseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the program pause internal server error response
func (o *ProgramPauseInternalServerError) Code() int {
	return 500
}

func (o *ProgramPauseInternalServerError) Error() string {
	return fmt.Sprintf("[POST /pause-program][%d] programPauseInternalServerError ", 500)
}

func (o *ProgramPauseInternalServerError) String() string {
	return fmt.Sprintf("[POST /pause-program][%d] programPauseInternalServerError ", 500)
}

func (o *ProgramPauseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ProgramPauseBody ArgProgramPause
swagger:model ProgramPauseBody
*/
type ProgramPauseBody struct {

	// active
	// Required: true
	Active *bool `json:"active"`

	// hash
	// Required: true
	Hash *model.Hash `json:"hash"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *ProgramPauseBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// active
		// Required: true
		Active *bool `json:"active"`

		// hash
		// Required: true
		Hash *model.Hash `json:"hash"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Active = props.Active
	o.Hash = props.Hash
	return nil
}

// Validate validates this program pause body
func (o *ProgramPauseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProgramPauseBody) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"active", "body", o.Active); err != nil {
		return err
	}

	return nil
}

func (o *ProgramPauseBody) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if o.Hash != nil {
		if err := o.Hash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this program pause body based on the context it is used
func (o *ProgramPauseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProgramPauseBody) contextValidateHash(ctx context.Context, formats strfmt.Registry) error {

	if o.Hash != nil {
		if err := o.Hash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProgramPauseBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProgramPauseBody) UnmarshalBinary(b []byte) error {
	var res ProgramPauseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
