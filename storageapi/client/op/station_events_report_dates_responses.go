// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// StationEventsReportDatesReader is a Reader for the StationEventsReportDates structure.
type StationEventsReportDatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StationEventsReportDatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStationEventsReportDatesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewStationEventsReportDatesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStationEventsReportDatesOK creates a StationEventsReportDatesOK with default headers values
func NewStationEventsReportDatesOK() *StationEventsReportDatesOK {
	return &StationEventsReportDatesOK{}
}

/* StationEventsReportDatesOK describes a response with status code 200, with default header values.

ok
*/
type StationEventsReportDatesOK struct {
	Payload *model.StationEventReport
}

func (o *StationEventsReportDatesOK) Error() string {
	return fmt.Sprintf("[POST /station-events-report-dates][%d] stationEventsReportDatesOK  %+v", 200, o.Payload)
}
func (o *StationEventsReportDatesOK) GetPayload() *model.StationEventReport {
	return o.Payload
}

func (o *StationEventsReportDatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.StationEventReport)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStationEventsReportDatesInternalServerError creates a StationEventsReportDatesInternalServerError with default headers values
func NewStationEventsReportDatesInternalServerError() *StationEventsReportDatesInternalServerError {
	return &StationEventsReportDatesInternalServerError{}
}

/* StationEventsReportDatesInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type StationEventsReportDatesInternalServerError struct {
}

func (o *StationEventsReportDatesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /station-events-report-dates][%d] stationEventsReportDatesInternalServerError ", 500)
}

func (o *StationEventsReportDatesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*StationEventsReportDatesBody station events report dates body
swagger:model StationEventsReportDatesBody
*/
type StationEventsReportDatesBody struct {

	// Unix time
	EndDate *int64 `json:"endDate,omitempty"`

	// Unix time
	StartDate *int64 `json:"startDate,omitempty"`

	// station ID
	// Required: true
	// Minimum: 1
	StationID *int64 `json:"stationID"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *StationEventsReportDatesBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// Unix time
		EndDate *int64 `json:"endDate,omitempty"`

		// Unix time
		StartDate *int64 `json:"startDate,omitempty"`

		// station ID
		// Required: true
		// Minimum: 1
		StationID *int64 `json:"stationID"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.EndDate = props.EndDate
	o.StartDate = props.StartDate
	o.StationID = props.StationID
	return nil
}

// Validate validates this station events report dates body
func (o *StationEventsReportDatesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StationEventsReportDatesBody) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"stationID", "body", o.StationID); err != nil {
		return err
	}

	if err := validate.MinimumInt("args"+"."+"stationID", "body", *o.StationID, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this station events report dates body based on context it is used
func (o *StationEventsReportDatesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StationEventsReportDatesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StationEventsReportDatesBody) UnmarshalBinary(b []byte) error {
	var res StationEventsReportDatesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
