// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// VolumeDispenserReader is a Reader for the VolumeDispenser structure.
type VolumeDispenserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VolumeDispenserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVolumeDispenserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewVolumeDispenserNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewVolumeDispenserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewVolumeDispenserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewVolumeDispenserOK creates a VolumeDispenserOK with default headers values
func NewVolumeDispenserOK() *VolumeDispenserOK {
	return &VolumeDispenserOK{}
}

/*
VolumeDispenserOK describes a response with status code 200, with default header values.

OK
*/
type VolumeDispenserOK struct {
	Payload *VolumeDispenserOKBody
}

// IsSuccess returns true when this volume dispenser o k response has a 2xx status code
func (o *VolumeDispenserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this volume dispenser o k response has a 3xx status code
func (o *VolumeDispenserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume dispenser o k response has a 4xx status code
func (o *VolumeDispenserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this volume dispenser o k response has a 5xx status code
func (o *VolumeDispenserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this volume dispenser o k response a status code equal to that given
func (o *VolumeDispenserOK) IsCode(code int) bool {
	return code == 200
}

func (o *VolumeDispenserOK) Error() string {
	return fmt.Sprintf("[POST /volume-dispenser][%d] volumeDispenserOK  %+v", 200, o.Payload)
}

func (o *VolumeDispenserOK) String() string {
	return fmt.Sprintf("[POST /volume-dispenser][%d] volumeDispenserOK  %+v", 200, o.Payload)
}

func (o *VolumeDispenserOK) GetPayload() *VolumeDispenserOKBody {
	return o.Payload
}

func (o *VolumeDispenserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(VolumeDispenserOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVolumeDispenserNoContent creates a VolumeDispenserNoContent with default headers values
func NewVolumeDispenserNoContent() *VolumeDispenserNoContent {
	return &VolumeDispenserNoContent{}
}

/*
VolumeDispenserNoContent describes a response with status code 204, with default header values.

OK
*/
type VolumeDispenserNoContent struct {
}

// IsSuccess returns true when this volume dispenser no content response has a 2xx status code
func (o *VolumeDispenserNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this volume dispenser no content response has a 3xx status code
func (o *VolumeDispenserNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume dispenser no content response has a 4xx status code
func (o *VolumeDispenserNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this volume dispenser no content response has a 5xx status code
func (o *VolumeDispenserNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this volume dispenser no content response a status code equal to that given
func (o *VolumeDispenserNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *VolumeDispenserNoContent) Error() string {
	return fmt.Sprintf("[POST /volume-dispenser][%d] volumeDispenserNoContent ", 204)
}

func (o *VolumeDispenserNoContent) String() string {
	return fmt.Sprintf("[POST /volume-dispenser][%d] volumeDispenserNoContent ", 204)
}

func (o *VolumeDispenserNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVolumeDispenserNotFound creates a VolumeDispenserNotFound with default headers values
func NewVolumeDispenserNotFound() *VolumeDispenserNotFound {
	return &VolumeDispenserNotFound{}
}

/*
VolumeDispenserNotFound describes a response with status code 404, with default header values.

not found
*/
type VolumeDispenserNotFound struct {
	Payload string
}

// IsSuccess returns true when this volume dispenser not found response has a 2xx status code
func (o *VolumeDispenserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this volume dispenser not found response has a 3xx status code
func (o *VolumeDispenserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume dispenser not found response has a 4xx status code
func (o *VolumeDispenserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this volume dispenser not found response has a 5xx status code
func (o *VolumeDispenserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this volume dispenser not found response a status code equal to that given
func (o *VolumeDispenserNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *VolumeDispenserNotFound) Error() string {
	return fmt.Sprintf("[POST /volume-dispenser][%d] volumeDispenserNotFound  %+v", 404, o.Payload)
}

func (o *VolumeDispenserNotFound) String() string {
	return fmt.Sprintf("[POST /volume-dispenser][%d] volumeDispenserNotFound  %+v", 404, o.Payload)
}

func (o *VolumeDispenserNotFound) GetPayload() string {
	return o.Payload
}

func (o *VolumeDispenserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVolumeDispenserInternalServerError creates a VolumeDispenserInternalServerError with default headers values
func NewVolumeDispenserInternalServerError() *VolumeDispenserInternalServerError {
	return &VolumeDispenserInternalServerError{}
}

/*
VolumeDispenserInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type VolumeDispenserInternalServerError struct {
}

// IsSuccess returns true when this volume dispenser internal server error response has a 2xx status code
func (o *VolumeDispenserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this volume dispenser internal server error response has a 3xx status code
func (o *VolumeDispenserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume dispenser internal server error response has a 4xx status code
func (o *VolumeDispenserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this volume dispenser internal server error response has a 5xx status code
func (o *VolumeDispenserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this volume dispenser internal server error response a status code equal to that given
func (o *VolumeDispenserInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *VolumeDispenserInternalServerError) Error() string {
	return fmt.Sprintf("[POST /volume-dispenser][%d] volumeDispenserInternalServerError ", 500)
}

func (o *VolumeDispenserInternalServerError) String() string {
	return fmt.Sprintf("[POST /volume-dispenser][%d] volumeDispenserInternalServerError ", 500)
}

func (o *VolumeDispenserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
VolumeDispenserBody VolumeDispenser
swagger:model VolumeDispenserBody
*/
type VolumeDispenserBody struct {

	// hash
	// Required: true
	Hash *model.Hash `json:"hash"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *VolumeDispenserBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// hash
		// Required: true
		Hash *model.Hash `json:"hash"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Hash = props.Hash
	return nil
}

// Validate validates this volume dispenser body
func (o *VolumeDispenserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VolumeDispenserBody) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if o.Hash != nil {
		if err := o.Hash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this volume dispenser body based on the context it is used
func (o *VolumeDispenserBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VolumeDispenserBody) contextValidateHash(ctx context.Context, formats strfmt.Registry) error {

	if o.Hash != nil {
		if err := o.Hash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VolumeDispenserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VolumeDispenserBody) UnmarshalBinary(b []byte) error {
	var res VolumeDispenserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VolumeDispenserOKBody ResponseVolumeDispenser
swagger:model VolumeDispenserOKBody
*/
type VolumeDispenserOKBody struct {

	// status
	// Required: true
	Status *string `json:"status"`

	// volume
	// Required: true
	Volume *int64 `json:"volume"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *VolumeDispenserOKBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// status
		// Required: true
		Status *string `json:"status"`

		// volume
		// Required: true
		Volume *int64 `json:"volume"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Status = props.Status
	o.Volume = props.Volume
	return nil
}

// Validate validates this volume dispenser o k body
func (o *VolumeDispenserOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VolumeDispenserOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("volumeDispenserOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

func (o *VolumeDispenserOKBody) validateVolume(formats strfmt.Registry) error {

	if err := validate.Required("volumeDispenserOK"+"."+"volume", "body", o.Volume); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this volume dispenser o k body based on context it is used
func (o *VolumeDispenserOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VolumeDispenserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VolumeDispenserOKBody) UnmarshalBinary(b []byte) error {
	var res VolumeDispenserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
