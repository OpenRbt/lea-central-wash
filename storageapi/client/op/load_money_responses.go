// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	model "github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// LoadMoneyReader is a Reader for the LoadMoney structure.
type LoadMoneyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoadMoneyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewLoadMoneyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewLoadMoneyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewLoadMoneyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewLoadMoneyOK creates a LoadMoneyOK with default headers values
func NewLoadMoneyOK() *LoadMoneyOK {
	return &LoadMoneyOK{}
}

/*LoadMoneyOK handles this case with default header values.

OK
*/
type LoadMoneyOK struct {
	Payload *model.MoneyReport
}

func (o *LoadMoneyOK) Error() string {
	return fmt.Sprintf("[POST /load-money][%d] loadMoneyOK  %+v", 200, o.Payload)
}

func (o *LoadMoneyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.MoneyReport)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadMoneyNotFound creates a LoadMoneyNotFound with default headers values
func NewLoadMoneyNotFound() *LoadMoneyNotFound {
	return &LoadMoneyNotFound{}
}

/*LoadMoneyNotFound handles this case with default header values.

not found
*/
type LoadMoneyNotFound struct {
}

func (o *LoadMoneyNotFound) Error() string {
	return fmt.Sprintf("[POST /load-money][%d] loadMoneyNotFound ", 404)
}

func (o *LoadMoneyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLoadMoneyInternalServerError creates a LoadMoneyInternalServerError with default headers values
func NewLoadMoneyInternalServerError() *LoadMoneyInternalServerError {
	return &LoadMoneyInternalServerError{}
}

/*LoadMoneyInternalServerError handles this case with default header values.

internal error
*/
type LoadMoneyInternalServerError struct {
}

func (o *LoadMoneyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /load-money][%d] loadMoneyInternalServerError ", 500)
}

func (o *LoadMoneyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*LoadMoneyBody load money body
swagger:model LoadMoneyBody
*/
type LoadMoneyBody struct {

	// hash
	// Required: true
	Hash model.Hash `json:"hash"`
}

// Validate validates this load money body
func (o *LoadMoneyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoadMoneyBody) validateHash(formats strfmt.Registry) error {

	if err := o.Hash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "hash")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *LoadMoneyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoadMoneyBody) UnmarshalBinary(b []byte) error {
	var res LoadMoneyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
