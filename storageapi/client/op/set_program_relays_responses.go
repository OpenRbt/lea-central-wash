// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	model "github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// SetProgramRelaysReader is a Reader for the SetProgramRelays structure.
type SetProgramRelaysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetProgramRelaysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewSetProgramRelaysNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewSetProgramRelaysInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetProgramRelaysNoContent creates a SetProgramRelaysNoContent with default headers values
func NewSetProgramRelaysNoContent() *SetProgramRelaysNoContent {
	return &SetProgramRelaysNoContent{}
}

/*SetProgramRelaysNoContent handles this case with default header values.

OK
*/
type SetProgramRelaysNoContent struct {
}

func (o *SetProgramRelaysNoContent) Error() string {
	return fmt.Sprintf("[POST /set-program-relays][%d] setProgramRelaysNoContent ", 204)
}

func (o *SetProgramRelaysNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetProgramRelaysInternalServerError creates a SetProgramRelaysInternalServerError with default headers values
func NewSetProgramRelaysInternalServerError() *SetProgramRelaysInternalServerError {
	return &SetProgramRelaysInternalServerError{}
}

/*SetProgramRelaysInternalServerError handles this case with default header values.

internal error
*/
type SetProgramRelaysInternalServerError struct {
}

func (o *SetProgramRelaysInternalServerError) Error() string {
	return fmt.Sprintf("[POST /set-program-relays][%d] setProgramRelaysInternalServerError ", 500)
}

func (o *SetProgramRelaysInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*SetProgramRelaysBody set program relays body
swagger:model SetProgramRelaysBody
*/
type SetProgramRelaysBody struct {

	// program ID
	// Required: true
	// Minimum: 1
	ProgramID *int64 `json:"programID"`

	// relays
	Relays []*model.RelayConfig `json:"relays"`

	// station ID
	// Required: true
	// Minimum: 1
	StationID *int64 `json:"stationID"`
}

// Validate validates this set program relays body
func (o *SetProgramRelaysBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProgramID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRelays(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetProgramRelaysBody) validateProgramID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"programID", "body", o.ProgramID); err != nil {
		return err
	}

	if err := validate.MinimumInt("args"+"."+"programID", "body", int64(*o.ProgramID), 1, false); err != nil {
		return err
	}

	return nil
}

func (o *SetProgramRelaysBody) validateRelays(formats strfmt.Registry) error {

	if swag.IsZero(o.Relays) { // not required
		return nil
	}

	for i := 0; i < len(o.Relays); i++ {
		if swag.IsZero(o.Relays[i]) { // not required
			continue
		}

		if o.Relays[i] != nil {
			if err := o.Relays[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("args" + "." + "relays" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SetProgramRelaysBody) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"stationID", "body", o.StationID); err != nil {
		return err
	}

	if err := validate.MinimumInt("args"+"."+"stationID", "body", int64(*o.StationID), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetProgramRelaysBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetProgramRelaysBody) UnmarshalBinary(b []byte) error {
	var res SetProgramRelaysBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
