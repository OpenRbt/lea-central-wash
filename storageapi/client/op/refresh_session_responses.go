// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// RefreshSessionReader is a Reader for the RefreshSession structure.
type RefreshSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RefreshSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRefreshSessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRefreshSessionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRefreshSessionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRefreshSessionOK creates a RefreshSessionOK with default headers values
func NewRefreshSessionOK() *RefreshSessionOK {
	return &RefreshSessionOK{}
}

/*
RefreshSessionOK describes a response with status code 200, with default header values.

OK
*/
type RefreshSessionOK struct {
	Payload *model.SessionRefresh
}

// IsSuccess returns true when this refresh session o k response has a 2xx status code
func (o *RefreshSessionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this refresh session o k response has a 3xx status code
func (o *RefreshSessionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh session o k response has a 4xx status code
func (o *RefreshSessionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh session o k response has a 5xx status code
func (o *RefreshSessionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh session o k response a status code equal to that given
func (o *RefreshSessionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the refresh session o k response
func (o *RefreshSessionOK) Code() int {
	return 200
}

func (o *RefreshSessionOK) Error() string {
	return fmt.Sprintf("[POST /refresh-session][%d] refreshSessionOK  %+v", 200, o.Payload)
}

func (o *RefreshSessionOK) String() string {
	return fmt.Sprintf("[POST /refresh-session][%d] refreshSessionOK  %+v", 200, o.Payload)
}

func (o *RefreshSessionOK) GetPayload() *model.SessionRefresh {
	return o.Payload
}

func (o *RefreshSessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.SessionRefresh)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshSessionNotFound creates a RefreshSessionNotFound with default headers values
func NewRefreshSessionNotFound() *RefreshSessionNotFound {
	return &RefreshSessionNotFound{}
}

/*
RefreshSessionNotFound describes a response with status code 404, with default header values.

hash not found
*/
type RefreshSessionNotFound struct {
}

// IsSuccess returns true when this refresh session not found response has a 2xx status code
func (o *RefreshSessionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh session not found response has a 3xx status code
func (o *RefreshSessionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh session not found response has a 4xx status code
func (o *RefreshSessionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh session not found response has a 5xx status code
func (o *RefreshSessionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh session not found response a status code equal to that given
func (o *RefreshSessionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the refresh session not found response
func (o *RefreshSessionNotFound) Code() int {
	return 404
}

func (o *RefreshSessionNotFound) Error() string {
	return fmt.Sprintf("[POST /refresh-session][%d] refreshSessionNotFound ", 404)
}

func (o *RefreshSessionNotFound) String() string {
	return fmt.Sprintf("[POST /refresh-session][%d] refreshSessionNotFound ", 404)
}

func (o *RefreshSessionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefreshSessionInternalServerError creates a RefreshSessionInternalServerError with default headers values
func NewRefreshSessionInternalServerError() *RefreshSessionInternalServerError {
	return &RefreshSessionInternalServerError{}
}

/*
RefreshSessionInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type RefreshSessionInternalServerError struct {
}

// IsSuccess returns true when this refresh session internal server error response has a 2xx status code
func (o *RefreshSessionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh session internal server error response has a 3xx status code
func (o *RefreshSessionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh session internal server error response has a 4xx status code
func (o *RefreshSessionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh session internal server error response has a 5xx status code
func (o *RefreshSessionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this refresh session internal server error response a status code equal to that given
func (o *RefreshSessionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the refresh session internal server error response
func (o *RefreshSessionInternalServerError) Code() int {
	return 500
}

func (o *RefreshSessionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /refresh-session][%d] refreshSessionInternalServerError ", 500)
}

func (o *RefreshSessionInternalServerError) String() string {
	return fmt.Sprintf("[POST /refresh-session][%d] refreshSessionInternalServerError ", 500)
}

func (o *RefreshSessionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
RefreshSessionBody RefreshSession
swagger:model RefreshSessionBody
*/
type RefreshSessionBody struct {

	// hash
	// Required: true
	Hash *string `json:"hash"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *RefreshSessionBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// hash
		// Required: true
		Hash *string `json:"hash"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Hash = props.Hash
	return nil
}

// Validate validates this refresh session body
func (o *RefreshSessionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshSessionBody) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this refresh session body based on context it is used
func (o *RefreshSessionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshSessionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshSessionBody) UnmarshalBinary(b []byte) error {
	var res RefreshSessionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
