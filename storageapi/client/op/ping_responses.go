// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// PingReader is a Reader for the Ping structure.
type PingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPingOK creates a PingOK with default headers values
func NewPingOK() *PingOK {
	return &PingOK{}
}

/* PingOK describes a response with status code 200, with default header values.

OK
*/
type PingOK struct {
	Payload *PingOKBody
}

// IsSuccess returns true when this ping o k response has a 2xx status code
func (o *PingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ping o k response has a 3xx status code
func (o *PingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ping o k response has a 4xx status code
func (o *PingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ping o k response has a 5xx status code
func (o *PingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ping o k response a status code equal to that given
func (o *PingOK) IsCode(code int) bool {
	return code == 200
}

func (o *PingOK) Error() string {
	return fmt.Sprintf("[POST /ping][%d] pingOK  %+v", 200, o.Payload)
}

func (o *PingOK) String() string {
	return fmt.Sprintf("[POST /ping][%d] pingOK  %+v", 200, o.Payload)
}

func (o *PingOK) GetPayload() *PingOKBody {
	return o.Payload
}

func (o *PingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PingOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PingBody ArgPing
swagger:model PingBody
*/
type PingBody struct {

	// current balance
	CurrentBalance int64 `json:"currentBalance,omitempty"`

	// current program
	CurrentProgram int64 `json:"currentProgram,omitempty"`

	// hash
	// Required: true
	Hash *model.Hash `json:"hash"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *PingBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// current balance
		CurrentBalance int64 `json:"currentBalance,omitempty"`

		// current program
		CurrentProgram int64 `json:"currentProgram,omitempty"`

		// hash
		// Required: true
		Hash *model.Hash `json:"hash"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.CurrentBalance = props.CurrentBalance
	o.CurrentProgram = props.CurrentProgram
	o.Hash = props.Hash
	return nil
}

// Validate validates this ping body
func (o *PingBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PingBody) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if o.Hash != nil {
		if err := o.Hash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ping body based on the context it is used
func (o *PingBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PingBody) contextValidateHash(ctx context.Context, formats strfmt.Registry) error {

	if o.Hash != nil {
		if err := o.Hash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PingBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PingBody) UnmarshalBinary(b []byte) error {
	var res PingBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PingOKBody ResponsePing
swagger:model PingOKBody
*/
type PingOKBody struct {

	// button ID
	ButtonID int64 `json:"ButtonID,omitempty"`

	// last discount update
	LastDiscountUpdate int64 `json:"lastDiscountUpdate,omitempty"`

	// last update
	LastUpdate int64 `json:"lastUpdate,omitempty"`

	// open station
	// Required: true
	OpenStation *bool `json:"openStation"`

	// service amount
	// Required: true
	ServiceAmount *int64 `json:"serviceAmount"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *PingOKBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// button ID
		ButtonID int64 `json:"ButtonID,omitempty"`

		// last discount update
		LastDiscountUpdate int64 `json:"lastDiscountUpdate,omitempty"`

		// last update
		LastUpdate int64 `json:"lastUpdate,omitempty"`

		// open station
		// Required: true
		OpenStation *bool `json:"openStation"`

		// service amount
		// Required: true
		ServiceAmount *int64 `json:"serviceAmount"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.ButtonID = props.ButtonID
	o.LastDiscountUpdate = props.LastDiscountUpdate
	o.LastUpdate = props.LastUpdate
	o.OpenStation = props.OpenStation
	o.ServiceAmount = props.ServiceAmount
	return nil
}

// Validate validates this ping o k body
func (o *PingOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOpenStation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServiceAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PingOKBody) validateOpenStation(formats strfmt.Registry) error {

	if err := validate.Required("pingOK"+"."+"openStation", "body", o.OpenStation); err != nil {
		return err
	}

	return nil
}

func (o *PingOKBody) validateServiceAmount(formats strfmt.Registry) error {

	if err := validate.Required("pingOK"+"."+"serviceAmount", "body", o.ServiceAmount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ping o k body based on context it is used
func (o *PingOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PingOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PingOKBody) UnmarshalBinary(b []byte) error {
	var res PingOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
