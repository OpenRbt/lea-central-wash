// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	model "github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// PingReader is a Reader for the Ping structure.
type PingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPingOK creates a PingOK with default headers values
func NewPingOK() *PingOK {
	return &PingOK{}
}

/*PingOK handles this case with default header values.

OK
*/
type PingOK struct {
	Payload *PingOKBody
}

func (o *PingOK) Error() string {
	return fmt.Sprintf("[POST /ping][%d] pingOK  %+v", 200, o.Payload)
}

func (o *PingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PingOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PingBody ping body
swagger:model PingBody
*/
type PingBody struct {

	// current balance
	CurrentBalance int64 `json:"currentBalance,omitempty"`

	// current program
	CurrentProgram int64 `json:"currentProgram,omitempty"`

	// hash
	// Required: true
	Hash model.Hash `json:"hash"`

	// service mode finished
	ServiceModeFinished bool `json:"serviceModeFinished,omitempty"`
}

// Validate validates this ping body
func (o *PingBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PingBody) validateHash(formats strfmt.Registry) error {

	if err := o.Hash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "hash")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PingBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PingBody) UnmarshalBinary(b []byte) error {
	var res PingBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PingOKBody ping o k body
swagger:model PingOKBody
*/
type PingOKBody struct {

	// button ID
	ButtonID int64 `json:"ButtonID,omitempty"`

	// last update
	LastUpdate int64 `json:"lastUpdate,omitempty"`

	// open station
	// Required: true
	OpenStation *bool `json:"openStation"`

	// service amount
	// Required: true
	ServiceAmount *int64 `json:"serviceAmount"`

	// working mode
	// Required: true
	// Enum: [REGULAR SERVICE]
	WorkingMode *string `json:"workingMode"`
}

// Validate validates this ping o k body
func (o *PingOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOpenStation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServiceAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWorkingMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PingOKBody) validateOpenStation(formats strfmt.Registry) error {

	if err := validate.Required("pingOK"+"."+"openStation", "body", o.OpenStation); err != nil {
		return err
	}

	return nil
}

func (o *PingOKBody) validateServiceAmount(formats strfmt.Registry) error {

	if err := validate.Required("pingOK"+"."+"serviceAmount", "body", o.ServiceAmount); err != nil {
		return err
	}

	return nil
}

var pingOKBodyTypeWorkingModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REGULAR","SERVICE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pingOKBodyTypeWorkingModePropEnum = append(pingOKBodyTypeWorkingModePropEnum, v)
	}
}

const (

	// PingOKBodyWorkingModeREGULAR captures enum value "REGULAR"
	PingOKBodyWorkingModeREGULAR string = "REGULAR"

	// PingOKBodyWorkingModeSERVICE captures enum value "SERVICE"
	PingOKBodyWorkingModeSERVICE string = "SERVICE"
)

// prop value enum
func (o *PingOKBody) validateWorkingModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pingOKBodyTypeWorkingModePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *PingOKBody) validateWorkingMode(formats strfmt.Registry) error {

	if err := validate.Required("pingOK"+"."+"workingMode", "body", o.WorkingMode); err != nil {
		return err
	}

	// value enum
	if err := o.validateWorkingModeEnum("pingOK"+"."+"workingMode", "body", *o.WorkingMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PingOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PingOKBody) UnmarshalBinary(b []byte) error {
	var res PingOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
