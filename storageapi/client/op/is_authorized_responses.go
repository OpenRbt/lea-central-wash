// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// IsAuthorizedReader is a Reader for the IsAuthorized structure.
type IsAuthorizedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IsAuthorizedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIsAuthorizedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewIsAuthorizedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIsAuthorizedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewIsAuthorizedOK creates a IsAuthorizedOK with default headers values
func NewIsAuthorizedOK() *IsAuthorizedOK {
	return &IsAuthorizedOK{}
}

/*
IsAuthorizedOK describes a response with status code 200, with default header values.

OK
*/
type IsAuthorizedOK struct {
	Payload *model.IsAuthorized
}

// IsSuccess returns true when this is authorized o k response has a 2xx status code
func (o *IsAuthorizedOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this is authorized o k response has a 3xx status code
func (o *IsAuthorizedOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this is authorized o k response has a 4xx status code
func (o *IsAuthorizedOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this is authorized o k response has a 5xx status code
func (o *IsAuthorizedOK) IsServerError() bool {
	return false
}

// IsCode returns true when this is authorized o k response a status code equal to that given
func (o *IsAuthorizedOK) IsCode(code int) bool {
	return code == 200
}

func (o *IsAuthorizedOK) Error() string {
	return fmt.Sprintf("[POST /is-authorized][%d] isAuthorizedOK  %+v", 200, o.Payload)
}

func (o *IsAuthorizedOK) String() string {
	return fmt.Sprintf("[POST /is-authorized][%d] isAuthorizedOK  %+v", 200, o.Payload)
}

func (o *IsAuthorizedOK) GetPayload() *model.IsAuthorized {
	return o.Payload
}

func (o *IsAuthorizedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.IsAuthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIsAuthorizedNotFound creates a IsAuthorizedNotFound with default headers values
func NewIsAuthorizedNotFound() *IsAuthorizedNotFound {
	return &IsAuthorizedNotFound{}
}

/*
IsAuthorizedNotFound describes a response with status code 404, with default header values.

hash not found
*/
type IsAuthorizedNotFound struct {
}

// IsSuccess returns true when this is authorized not found response has a 2xx status code
func (o *IsAuthorizedNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this is authorized not found response has a 3xx status code
func (o *IsAuthorizedNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this is authorized not found response has a 4xx status code
func (o *IsAuthorizedNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this is authorized not found response has a 5xx status code
func (o *IsAuthorizedNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this is authorized not found response a status code equal to that given
func (o *IsAuthorizedNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *IsAuthorizedNotFound) Error() string {
	return fmt.Sprintf("[POST /is-authorized][%d] isAuthorizedNotFound ", 404)
}

func (o *IsAuthorizedNotFound) String() string {
	return fmt.Sprintf("[POST /is-authorized][%d] isAuthorizedNotFound ", 404)
}

func (o *IsAuthorizedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIsAuthorizedInternalServerError creates a IsAuthorizedInternalServerError with default headers values
func NewIsAuthorizedInternalServerError() *IsAuthorizedInternalServerError {
	return &IsAuthorizedInternalServerError{}
}

/*
IsAuthorizedInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type IsAuthorizedInternalServerError struct {
}

// IsSuccess returns true when this is authorized internal server error response has a 2xx status code
func (o *IsAuthorizedInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this is authorized internal server error response has a 3xx status code
func (o *IsAuthorizedInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this is authorized internal server error response has a 4xx status code
func (o *IsAuthorizedInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this is authorized internal server error response has a 5xx status code
func (o *IsAuthorizedInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this is authorized internal server error response a status code equal to that given
func (o *IsAuthorizedInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *IsAuthorizedInternalServerError) Error() string {
	return fmt.Sprintf("[POST /is-authorized][%d] isAuthorizedInternalServerError ", 500)
}

func (o *IsAuthorizedInternalServerError) String() string {
	return fmt.Sprintf("[POST /is-authorized][%d] isAuthorizedInternalServerError ", 500)
}

func (o *IsAuthorizedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
IsAuthorizedBody ArgIsAuthorized
swagger:model IsAuthorizedBody
*/
type IsAuthorizedBody struct {

	// hash
	// Required: true
	Hash *string `json:"hash"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *IsAuthorizedBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// hash
		// Required: true
		Hash *string `json:"hash"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Hash = props.Hash
	return nil
}

// Validate validates this is authorized body
func (o *IsAuthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IsAuthorizedBody) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this is authorized body based on context it is used
func (o *IsAuthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *IsAuthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IsAuthorizedBody) UnmarshalBinary(b []byte) error {
	var res IsAuthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
