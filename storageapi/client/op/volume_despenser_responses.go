// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// VolumeDespenserReader is a Reader for the VolumeDespenser structure.
type VolumeDespenserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VolumeDespenserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVolumeDespenserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewVolumeDespenserNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewVolumeDespenserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewVolumeDespenserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewVolumeDespenserOK creates a VolumeDespenserOK with default headers values
func NewVolumeDespenserOK() *VolumeDespenserOK {
	return &VolumeDespenserOK{}
}

/* VolumeDespenserOK describes a response with status code 200, with default header values.

OK
*/
type VolumeDespenserOK struct {
	Payload *VolumeDespenserOKBody
}

// IsSuccess returns true when this volume despenser o k response has a 2xx status code
func (o *VolumeDespenserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this volume despenser o k response has a 3xx status code
func (o *VolumeDespenserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume despenser o k response has a 4xx status code
func (o *VolumeDespenserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this volume despenser o k response has a 5xx status code
func (o *VolumeDespenserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this volume despenser o k response a status code equal to that given
func (o *VolumeDespenserOK) IsCode(code int) bool {
	return code == 200
}

func (o *VolumeDespenserOK) Error() string {
	return fmt.Sprintf("[POST /volume-despenser][%d] volumeDespenserOK  %+v", 200, o.Payload)
}

func (o *VolumeDespenserOK) String() string {
	return fmt.Sprintf("[POST /volume-despenser][%d] volumeDespenserOK  %+v", 200, o.Payload)
}

func (o *VolumeDespenserOK) GetPayload() *VolumeDespenserOKBody {
	return o.Payload
}

func (o *VolumeDespenserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(VolumeDespenserOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVolumeDespenserNoContent creates a VolumeDespenserNoContent with default headers values
func NewVolumeDespenserNoContent() *VolumeDespenserNoContent {
	return &VolumeDespenserNoContent{}
}

/* VolumeDespenserNoContent describes a response with status code 204, with default header values.

OK
*/
type VolumeDespenserNoContent struct {
}

// IsSuccess returns true when this volume despenser no content response has a 2xx status code
func (o *VolumeDespenserNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this volume despenser no content response has a 3xx status code
func (o *VolumeDespenserNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume despenser no content response has a 4xx status code
func (o *VolumeDespenserNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this volume despenser no content response has a 5xx status code
func (o *VolumeDespenserNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this volume despenser no content response a status code equal to that given
func (o *VolumeDespenserNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *VolumeDespenserNoContent) Error() string {
	return fmt.Sprintf("[POST /volume-despenser][%d] volumeDespenserNoContent ", 204)
}

func (o *VolumeDespenserNoContent) String() string {
	return fmt.Sprintf("[POST /volume-despenser][%d] volumeDespenserNoContent ", 204)
}

func (o *VolumeDespenserNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVolumeDespenserNotFound creates a VolumeDespenserNotFound with default headers values
func NewVolumeDespenserNotFound() *VolumeDespenserNotFound {
	return &VolumeDespenserNotFound{}
}

/* VolumeDespenserNotFound describes a response with status code 404, with default header values.

not found
*/
type VolumeDespenserNotFound struct {
	Payload string
}

// IsSuccess returns true when this volume despenser not found response has a 2xx status code
func (o *VolumeDespenserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this volume despenser not found response has a 3xx status code
func (o *VolumeDespenserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume despenser not found response has a 4xx status code
func (o *VolumeDespenserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this volume despenser not found response has a 5xx status code
func (o *VolumeDespenserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this volume despenser not found response a status code equal to that given
func (o *VolumeDespenserNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *VolumeDespenserNotFound) Error() string {
	return fmt.Sprintf("[POST /volume-despenser][%d] volumeDespenserNotFound  %+v", 404, o.Payload)
}

func (o *VolumeDespenserNotFound) String() string {
	return fmt.Sprintf("[POST /volume-despenser][%d] volumeDespenserNotFound  %+v", 404, o.Payload)
}

func (o *VolumeDespenserNotFound) GetPayload() string {
	return o.Payload
}

func (o *VolumeDespenserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVolumeDespenserInternalServerError creates a VolumeDespenserInternalServerError with default headers values
func NewVolumeDespenserInternalServerError() *VolumeDespenserInternalServerError {
	return &VolumeDespenserInternalServerError{}
}

/* VolumeDespenserInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type VolumeDespenserInternalServerError struct {
}

// IsSuccess returns true when this volume despenser internal server error response has a 2xx status code
func (o *VolumeDespenserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this volume despenser internal server error response has a 3xx status code
func (o *VolumeDespenserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume despenser internal server error response has a 4xx status code
func (o *VolumeDespenserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this volume despenser internal server error response has a 5xx status code
func (o *VolumeDespenserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this volume despenser internal server error response a status code equal to that given
func (o *VolumeDespenserInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *VolumeDespenserInternalServerError) Error() string {
	return fmt.Sprintf("[POST /volume-despenser][%d] volumeDespenserInternalServerError ", 500)
}

func (o *VolumeDespenserInternalServerError) String() string {
	return fmt.Sprintf("[POST /volume-despenser][%d] volumeDespenserInternalServerError ", 500)
}

func (o *VolumeDespenserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*VolumeDespenserBody VolumeDespenser
swagger:model VolumeDespenserBody
*/
type VolumeDespenserBody struct {

	// hash
	// Required: true
	Hash *model.Hash `json:"hash"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *VolumeDespenserBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// hash
		// Required: true
		Hash *model.Hash `json:"hash"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Hash = props.Hash
	return nil
}

// Validate validates this volume despenser body
func (o *VolumeDespenserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VolumeDespenserBody) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if o.Hash != nil {
		if err := o.Hash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this volume despenser body based on the context it is used
func (o *VolumeDespenserBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VolumeDespenserBody) contextValidateHash(ctx context.Context, formats strfmt.Registry) error {

	if o.Hash != nil {
		if err := o.Hash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VolumeDespenserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VolumeDespenserBody) UnmarshalBinary(b []byte) error {
	var res VolumeDespenserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*VolumeDespenserOKBody ResponseVolumeDespenser
swagger:model VolumeDespenserOKBody
*/
type VolumeDespenserOKBody struct {

	// volume
	// Required: true
	Volume *int64 `json:"volume"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *VolumeDespenserOKBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// volume
		// Required: true
		Volume *int64 `json:"volume"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Volume = props.Volume
	return nil
}

// Validate validates this volume despenser o k body
func (o *VolumeDespenserOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VolumeDespenserOKBody) validateVolume(formats strfmt.Registry) error {

	if err := validate.Required("volumeDespenserOK"+"."+"volume", "body", o.Volume); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this volume despenser o k body based on context it is used
func (o *VolumeDespenserOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VolumeDespenserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VolumeDespenserOKBody) UnmarshalBinary(b []byte) error {
	var res VolumeDespenserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
