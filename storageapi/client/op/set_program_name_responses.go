// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// SetProgramNameReader is a Reader for the SetProgramName structure.
type SetProgramNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetProgramNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewSetProgramNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewSetProgramNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetProgramNameNoContent creates a SetProgramNameNoContent with default headers values
func NewSetProgramNameNoContent() *SetProgramNameNoContent {
	return &SetProgramNameNoContent{}
}

/*SetProgramNameNoContent handles this case with default header values.

OK
*/
type SetProgramNameNoContent struct {
}

func (o *SetProgramNameNoContent) Error() string {
	return fmt.Sprintf("[POST /set-program-name][%d] setProgramNameNoContent ", 204)
}

func (o *SetProgramNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetProgramNameInternalServerError creates a SetProgramNameInternalServerError with default headers values
func NewSetProgramNameInternalServerError() *SetProgramNameInternalServerError {
	return &SetProgramNameInternalServerError{}
}

/*SetProgramNameInternalServerError handles this case with default header values.

internal error
*/
type SetProgramNameInternalServerError struct {
}

func (o *SetProgramNameInternalServerError) Error() string {
	return fmt.Sprintf("[POST /set-program-name][%d] setProgramNameInternalServerError ", 500)
}

func (o *SetProgramNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*SetProgramNameBody set program name body
swagger:model SetProgramNameBody
*/
type SetProgramNameBody struct {

	// name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// program ID
	// Required: true
	// Minimum: 1
	ProgramID *int64 `json:"programID"`

	// station ID
	// Required: true
	// Minimum: 1
	StationID *int64 `json:"stationID"`
}

// Validate validates this set program name body
func (o *SetProgramNameBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProgramID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetProgramNameBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("args"+"."+"name", "body", string(*o.Name), 1); err != nil {
		return err
	}

	return nil
}

func (o *SetProgramNameBody) validateProgramID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"programID", "body", o.ProgramID); err != nil {
		return err
	}

	if err := validate.MinimumInt("args"+"."+"programID", "body", int64(*o.ProgramID), 1, false); err != nil {
		return err
	}

	return nil
}

func (o *SetProgramNameBody) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"stationID", "body", o.StationID); err != nil {
		return err
	}

	if err := validate.MinimumInt("args"+"."+"stationID", "body", int64(*o.StationID), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetProgramNameBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetProgramNameBody) UnmarshalBinary(b []byte) error {
	var res SetProgramNameBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
