// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	model "github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// RunProgramReader is a Reader for the RunProgram structure.
type RunProgramReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunProgramReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewRunProgramNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewRunProgramNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewRunProgramInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRunProgramNoContent creates a RunProgramNoContent with default headers values
func NewRunProgramNoContent() *RunProgramNoContent {
	return &RunProgramNoContent{}
}

/*RunProgramNoContent handles this case with default header values.

OK
*/
type RunProgramNoContent struct {
}

func (o *RunProgramNoContent) Error() string {
	return fmt.Sprintf("[POST /run-program][%d] runProgramNoContent ", 204)
}

func (o *RunProgramNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunProgramNotFound creates a RunProgramNotFound with default headers values
func NewRunProgramNotFound() *RunProgramNotFound {
	return &RunProgramNotFound{}
}

/*RunProgramNotFound handles this case with default header values.

not found
*/
type RunProgramNotFound struct {
	Payload string
}

func (o *RunProgramNotFound) Error() string {
	return fmt.Sprintf("[POST /run-program][%d] runProgramNotFound  %+v", 404, o.Payload)
}

func (o *RunProgramNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunProgramInternalServerError creates a RunProgramInternalServerError with default headers values
func NewRunProgramInternalServerError() *RunProgramInternalServerError {
	return &RunProgramInternalServerError{}
}

/*RunProgramInternalServerError handles this case with default header values.

internal error
*/
type RunProgramInternalServerError struct {
}

func (o *RunProgramInternalServerError) Error() string {
	return fmt.Sprintf("[POST /run-program][%d] runProgramInternalServerError ", 500)
}

func (o *RunProgramInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*RunProgramBody run program body
swagger:model RunProgramBody
*/
type RunProgramBody struct {

	// hash
	// Required: true
	Hash model.Hash `json:"hash"`

	// preflight
	// Required: true
	Preflight *bool `json:"preflight"`

	// program ID
	// Required: true
	ProgramID *int64 `json:"programID"`
}

// Validate validates this run program body
func (o *RunProgramBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePreflight(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProgramID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RunProgramBody) validateHash(formats strfmt.Registry) error {

	if err := o.Hash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "hash")
		}
		return err
	}

	return nil
}

func (o *RunProgramBody) validatePreflight(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"preflight", "body", o.Preflight); err != nil {
		return err
	}

	return nil
}

func (o *RunProgramBody) validateProgramID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"programID", "body", o.ProgramID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RunProgramBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RunProgramBody) UnmarshalBinary(b []byte) error {
	var res RunProgramBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
