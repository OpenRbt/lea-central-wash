// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// GetVolumeReader is a Reader for the GetVolume structure.
type GetVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetVolumeNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVolumeOK creates a GetVolumeOK with default headers values
func NewGetVolumeOK() *GetVolumeOK {
	return &GetVolumeOK{}
}

/* GetVolumeOK describes a response with status code 200, with default header values.

OK
*/
type GetVolumeOK struct {
	Payload *GetVolumeOKBody
}

// IsSuccess returns true when this get volume o k response has a 2xx status code
func (o *GetVolumeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get volume o k response has a 3xx status code
func (o *GetVolumeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get volume o k response has a 4xx status code
func (o *GetVolumeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get volume o k response has a 5xx status code
func (o *GetVolumeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get volume o k response a status code equal to that given
func (o *GetVolumeOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetVolumeOK) Error() string {
	return fmt.Sprintf("[POST /volume-arduino][%d] getVolumeOK  %+v", 200, o.Payload)
}

func (o *GetVolumeOK) String() string {
	return fmt.Sprintf("[POST /volume-arduino][%d] getVolumeOK  %+v", 200, o.Payload)
}

func (o *GetVolumeOK) GetPayload() *GetVolumeOKBody {
	return o.Payload
}

func (o *GetVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetVolumeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumeNoContent creates a GetVolumeNoContent with default headers values
func NewGetVolumeNoContent() *GetVolumeNoContent {
	return &GetVolumeNoContent{}
}

/* GetVolumeNoContent describes a response with status code 204, with default header values.

OK
*/
type GetVolumeNoContent struct {
}

// IsSuccess returns true when this get volume no content response has a 2xx status code
func (o *GetVolumeNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get volume no content response has a 3xx status code
func (o *GetVolumeNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get volume no content response has a 4xx status code
func (o *GetVolumeNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this get volume no content response has a 5xx status code
func (o *GetVolumeNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this get volume no content response a status code equal to that given
func (o *GetVolumeNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *GetVolumeNoContent) Error() string {
	return fmt.Sprintf("[POST /volume-arduino][%d] getVolumeNoContent ", 204)
}

func (o *GetVolumeNoContent) String() string {
	return fmt.Sprintf("[POST /volume-arduino][%d] getVolumeNoContent ", 204)
}

func (o *GetVolumeNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVolumeNotFound creates a GetVolumeNotFound with default headers values
func NewGetVolumeNotFound() *GetVolumeNotFound {
	return &GetVolumeNotFound{}
}

/* GetVolumeNotFound describes a response with status code 404, with default header values.

not found
*/
type GetVolumeNotFound struct {
	Payload string
}

// IsSuccess returns true when this get volume not found response has a 2xx status code
func (o *GetVolumeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get volume not found response has a 3xx status code
func (o *GetVolumeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get volume not found response has a 4xx status code
func (o *GetVolumeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get volume not found response has a 5xx status code
func (o *GetVolumeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get volume not found response a status code equal to that given
func (o *GetVolumeNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetVolumeNotFound) Error() string {
	return fmt.Sprintf("[POST /volume-arduino][%d] getVolumeNotFound  %+v", 404, o.Payload)
}

func (o *GetVolumeNotFound) String() string {
	return fmt.Sprintf("[POST /volume-arduino][%d] getVolumeNotFound  %+v", 404, o.Payload)
}

func (o *GetVolumeNotFound) GetPayload() string {
	return o.Payload
}

func (o *GetVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumeInternalServerError creates a GetVolumeInternalServerError with default headers values
func NewGetVolumeInternalServerError() *GetVolumeInternalServerError {
	return &GetVolumeInternalServerError{}
}

/* GetVolumeInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type GetVolumeInternalServerError struct {
}

// IsSuccess returns true when this get volume internal server error response has a 2xx status code
func (o *GetVolumeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get volume internal server error response has a 3xx status code
func (o *GetVolumeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get volume internal server error response has a 4xx status code
func (o *GetVolumeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get volume internal server error response has a 5xx status code
func (o *GetVolumeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get volume internal server error response a status code equal to that given
func (o *GetVolumeInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /volume-arduino][%d] getVolumeInternalServerError ", 500)
}

func (o *GetVolumeInternalServerError) String() string {
	return fmt.Sprintf("[POST /volume-arduino][%d] getVolumeInternalServerError ", 500)
}

func (o *GetVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetVolumeBody VolumeArduino
swagger:model GetVolumeBody
*/
type GetVolumeBody struct {

	// hash
	// Required: true
	Hash *model.Hash `json:"hash"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *GetVolumeBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// hash
		// Required: true
		Hash *model.Hash `json:"hash"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Hash = props.Hash
	return nil
}

// Validate validates this get volume body
func (o *GetVolumeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetVolumeBody) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if err := validate.Required("args"+"."+"hash", "body", o.Hash); err != nil {
		return err
	}

	if o.Hash != nil {
		if err := o.Hash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get volume body based on the context it is used
func (o *GetVolumeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetVolumeBody) contextValidateHash(ctx context.Context, formats strfmt.Registry) error {

	if o.Hash != nil {
		if err := o.Hash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("args" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetVolumeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetVolumeBody) UnmarshalBinary(b []byte) error {
	var res GetVolumeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetVolumeOKBody ResponseVolumeArduino
swagger:model GetVolumeOKBody
*/
type GetVolumeOKBody struct {

	// volume
	// Required: true
	Volume *int64 `json:"volume"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *GetVolumeOKBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// volume
		// Required: true
		Volume *int64 `json:"volume"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Volume = props.Volume
	return nil
}

// Validate validates this get volume o k body
func (o *GetVolumeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetVolumeOKBody) validateVolume(formats strfmt.Registry) error {

	if err := validate.Required("getVolumeOK"+"."+"volume", "body", o.Volume); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get volume o k body based on context it is used
func (o *GetVolumeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetVolumeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetVolumeOKBody) UnmarshalBinary(b []byte) error {
	var res GetVolumeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
