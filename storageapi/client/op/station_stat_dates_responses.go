// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// StationStatDatesReader is a Reader for the StationStatDates structure.
type StationStatDatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StationStatDatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStationStatDatesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewStationStatDatesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStationStatDatesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStationStatDatesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStationStatDatesOK creates a StationStatDatesOK with default headers values
func NewStationStatDatesOK() *StationStatDatesOK {
	return &StationStatDatesOK{}
}

/*
StationStatDatesOK describes a response with status code 200, with default header values.

OK
*/
type StationStatDatesOK struct {
	Payload model.StationsStat
}

// IsSuccess returns true when this station stat dates o k response has a 2xx status code
func (o *StationStatDatesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this station stat dates o k response has a 3xx status code
func (o *StationStatDatesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this station stat dates o k response has a 4xx status code
func (o *StationStatDatesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this station stat dates o k response has a 5xx status code
func (o *StationStatDatesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this station stat dates o k response a status code equal to that given
func (o *StationStatDatesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the station stat dates o k response
func (o *StationStatDatesOK) Code() int {
	return 200
}

func (o *StationStatDatesOK) Error() string {
	return fmt.Sprintf("[POST /station-stat-dates][%d] stationStatDatesOK  %+v", 200, o.Payload)
}

func (o *StationStatDatesOK) String() string {
	return fmt.Sprintf("[POST /station-stat-dates][%d] stationStatDatesOK  %+v", 200, o.Payload)
}

func (o *StationStatDatesOK) GetPayload() model.StationsStat {
	return o.Payload
}

func (o *StationStatDatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStationStatDatesUnauthorized creates a StationStatDatesUnauthorized with default headers values
func NewStationStatDatesUnauthorized() *StationStatDatesUnauthorized {
	return &StationStatDatesUnauthorized{}
}

/*
StationStatDatesUnauthorized describes a response with status code 401, with default header values.

PIN is missing or invalid
*/
type StationStatDatesUnauthorized struct {
}

// IsSuccess returns true when this station stat dates unauthorized response has a 2xx status code
func (o *StationStatDatesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this station stat dates unauthorized response has a 3xx status code
func (o *StationStatDatesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this station stat dates unauthorized response has a 4xx status code
func (o *StationStatDatesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this station stat dates unauthorized response has a 5xx status code
func (o *StationStatDatesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this station stat dates unauthorized response a status code equal to that given
func (o *StationStatDatesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the station stat dates unauthorized response
func (o *StationStatDatesUnauthorized) Code() int {
	return 401
}

func (o *StationStatDatesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /station-stat-dates][%d] stationStatDatesUnauthorized ", 401)
}

func (o *StationStatDatesUnauthorized) String() string {
	return fmt.Sprintf("[POST /station-stat-dates][%d] stationStatDatesUnauthorized ", 401)
}

func (o *StationStatDatesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStationStatDatesForbidden creates a StationStatDatesForbidden with default headers values
func NewStationStatDatesForbidden() *StationStatDatesForbidden {
	return &StationStatDatesForbidden{}
}

/*
StationStatDatesForbidden describes a response with status code 403, with default header values.

Access forbidden
*/
type StationStatDatesForbidden struct {
}

// IsSuccess returns true when this station stat dates forbidden response has a 2xx status code
func (o *StationStatDatesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this station stat dates forbidden response has a 3xx status code
func (o *StationStatDatesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this station stat dates forbidden response has a 4xx status code
func (o *StationStatDatesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this station stat dates forbidden response has a 5xx status code
func (o *StationStatDatesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this station stat dates forbidden response a status code equal to that given
func (o *StationStatDatesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the station stat dates forbidden response
func (o *StationStatDatesForbidden) Code() int {
	return 403
}

func (o *StationStatDatesForbidden) Error() string {
	return fmt.Sprintf("[POST /station-stat-dates][%d] stationStatDatesForbidden ", 403)
}

func (o *StationStatDatesForbidden) String() string {
	return fmt.Sprintf("[POST /station-stat-dates][%d] stationStatDatesForbidden ", 403)
}

func (o *StationStatDatesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStationStatDatesInternalServerError creates a StationStatDatesInternalServerError with default headers values
func NewStationStatDatesInternalServerError() *StationStatDatesInternalServerError {
	return &StationStatDatesInternalServerError{}
}

/*
StationStatDatesInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type StationStatDatesInternalServerError struct {
}

// IsSuccess returns true when this station stat dates internal server error response has a 2xx status code
func (o *StationStatDatesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this station stat dates internal server error response has a 3xx status code
func (o *StationStatDatesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this station stat dates internal server error response has a 4xx status code
func (o *StationStatDatesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this station stat dates internal server error response has a 5xx status code
func (o *StationStatDatesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this station stat dates internal server error response a status code equal to that given
func (o *StationStatDatesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the station stat dates internal server error response
func (o *StationStatDatesInternalServerError) Code() int {
	return 500
}

func (o *StationStatDatesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /station-stat-dates][%d] stationStatDatesInternalServerError ", 500)
}

func (o *StationStatDatesInternalServerError) String() string {
	return fmt.Sprintf("[POST /station-stat-dates][%d] stationStatDatesInternalServerError ", 500)
}

func (o *StationStatDatesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
StationStatDatesBody ArgStationStatDates
swagger:model StationStatDatesBody
*/
type StationStatDatesBody struct {

	// Unix time
	// Required: true
	EndDate *int64 `json:"endDate"`

	// Unix time
	// Required: true
	StartDate *int64 `json:"startDate"`

	// station ID
	StationID *int64 `json:"stationID,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *StationStatDatesBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// Unix time
		// Required: true
		EndDate *int64 `json:"endDate"`

		// Unix time
		// Required: true
		StartDate *int64 `json:"startDate"`

		// station ID
		StationID *int64 `json:"stationID,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.EndDate = props.EndDate
	o.StartDate = props.StartDate
	o.StationID = props.StationID
	return nil
}

// Validate validates this station stat dates body
func (o *StationStatDatesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StationStatDatesBody) validateEndDate(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"endDate", "body", o.EndDate); err != nil {
		return err
	}

	return nil
}

func (o *StationStatDatesBody) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"startDate", "body", o.StartDate); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this station stat dates body based on context it is used
func (o *StationStatDatesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StationStatDatesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StationStatDatesBody) UnmarshalBinary(b []byte) error {
	var res StationStatDatesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
