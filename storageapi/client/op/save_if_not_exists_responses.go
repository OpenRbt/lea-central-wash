// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	model "github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// SaveIfNotExistsReader is a Reader for the SaveIfNotExists structure.
type SaveIfNotExistsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SaveIfNotExistsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewSaveIfNotExistsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewSaveIfNotExistsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewSaveIfNotExistsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSaveIfNotExistsNoContent creates a SaveIfNotExistsNoContent with default headers values
func NewSaveIfNotExistsNoContent() *SaveIfNotExistsNoContent {
	return &SaveIfNotExistsNoContent{}
}

/*SaveIfNotExistsNoContent handles this case with default header values.

OK
*/
type SaveIfNotExistsNoContent struct {
}

func (o *SaveIfNotExistsNoContent) Error() string {
	return fmt.Sprintf("[POST /save-if-not-exists][%d] saveIfNotExistsNoContent ", 204)
}

func (o *SaveIfNotExistsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSaveIfNotExistsNotFound creates a SaveIfNotExistsNotFound with default headers values
func NewSaveIfNotExistsNotFound() *SaveIfNotExistsNotFound {
	return &SaveIfNotExistsNotFound{}
}

/*SaveIfNotExistsNotFound handles this case with default header values.

not found
*/
type SaveIfNotExistsNotFound struct {
}

func (o *SaveIfNotExistsNotFound) Error() string {
	return fmt.Sprintf("[POST /save-if-not-exists][%d] saveIfNotExistsNotFound ", 404)
}

func (o *SaveIfNotExistsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSaveIfNotExistsInternalServerError creates a SaveIfNotExistsInternalServerError with default headers values
func NewSaveIfNotExistsInternalServerError() *SaveIfNotExistsInternalServerError {
	return &SaveIfNotExistsInternalServerError{}
}

/*SaveIfNotExistsInternalServerError handles this case with default header values.

internal error
*/
type SaveIfNotExistsInternalServerError struct {
}

func (o *SaveIfNotExistsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /save-if-not-exists][%d] saveIfNotExistsInternalServerError ", 500)
}

func (o *SaveIfNotExistsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*SaveIfNotExistsBody save if not exists body
swagger:model SaveIfNotExistsBody
*/
type SaveIfNotExistsBody struct {

	// hash
	// Required: true
	Hash model.Hash `json:"hash"`

	// key pair
	// Required: true
	KeyPair *model.KeyPair `json:"keyPair"`
}

// Validate validates this save if not exists body
func (o *SaveIfNotExistsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyPair(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveIfNotExistsBody) validateHash(formats strfmt.Registry) error {

	if err := o.Hash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "hash")
		}
		return err
	}

	return nil
}

func (o *SaveIfNotExistsBody) validateKeyPair(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"keyPair", "body", o.KeyPair); err != nil {
		return err
	}

	if o.KeyPair != nil {
		if err := o.KeyPair.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + "keyPair")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SaveIfNotExistsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SaveIfNotExistsBody) UnmarshalBinary(b []byte) error {
	var res SaveIfNotExistsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
