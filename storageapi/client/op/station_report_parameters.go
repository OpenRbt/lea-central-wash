// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStationReportParams creates a new StationReportParams object
// with the default values initialized.
func NewStationReportParams() *StationReportParams {
	var ()
	return &StationReportParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStationReportParamsWithTimeout creates a new StationReportParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStationReportParamsWithTimeout(timeout time.Duration) *StationReportParams {
	var ()
	return &StationReportParams{

		timeout: timeout,
	}
}

// NewStationReportParamsWithContext creates a new StationReportParams object
// with the default values initialized, and the ability to set a context for a request
func NewStationReportParamsWithContext(ctx context.Context) *StationReportParams {
	var ()
	return &StationReportParams{

		Context: ctx,
	}
}

// NewStationReportParamsWithHTTPClient creates a new StationReportParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStationReportParamsWithHTTPClient(client *http.Client) *StationReportParams {
	var ()
	return &StationReportParams{
		HTTPClient: client,
	}
}

/*StationReportParams contains all the parameters to send to the API endpoint
for the station report operation typically these are written to a http.Request
*/
type StationReportParams struct {

	/*Args*/
	Args StationReportBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the station report params
func (o *StationReportParams) WithTimeout(timeout time.Duration) *StationReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the station report params
func (o *StationReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the station report params
func (o *StationReportParams) WithContext(ctx context.Context) *StationReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the station report params
func (o *StationReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the station report params
func (o *StationReportParams) WithHTTPClient(client *http.Client) *StationReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the station report params
func (o *StationReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArgs adds the args to the station report params
func (o *StationReportParams) WithArgs(args StationReportBody) *StationReportParams {
	o.SetArgs(args)
	return o
}

// SetArgs adds the args to the station report params
func (o *StationReportParams) SetArgs(args StationReportBody) {
	o.Args = args
}

// WriteToRequest writes these params to a swagger request
func (o *StationReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Args); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
