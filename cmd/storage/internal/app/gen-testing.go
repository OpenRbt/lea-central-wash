// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package app is a generated GoMock package.
package app

import (
	context "context"
	reflect "reflect"
	time "time"

	vo "github.com/OpenRbt/lea-central-wash/cmd/storage/internal/rabbit/entity/vo"
	gomock "github.com/golang/mock/gomock"
	go_uuid "github.com/satori/go.uuid"
)

// MockApp is a mock of App interface.
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp.
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance.
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// AddAdvertisingCampaign mocks base method.
func (m *MockApp) AddAdvertisingCampaign(arg0 context.Context, arg1 *Auth, arg2 AdvertisingCampaign) (AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdvertisingCampaign", arg0, arg1, arg2)
	ret0, _ := ret[0].(AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAdvertisingCampaign indicates an expected call of AddAdvertisingCampaign.
func (mr *MockAppMockRecorder) AddAdvertisingCampaign(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdvertisingCampaign", reflect.TypeOf((*MockApp)(nil).AddAdvertisingCampaign), arg0, arg1, arg2)
}

// AddServiceAmount mocks base method.
func (m *MockApp) AddServiceAmount(stationID StationID, money int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddServiceAmount", stationID, money)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddServiceAmount indicates an expected call of AddServiceAmount.
func (mr *MockAppMockRecorder) AddServiceAmount(stationID, money interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceAmount", reflect.TypeOf((*MockApp)(nil).AddServiceAmount), stationID, money)
}

// AddSessionsToPool mocks base method.
func (m *MockApp) AddSessionsToPool(stationID StationID, sessionsIDs ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{stationID}
	for _, a := range sessionsIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSessionsToPool", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSessionsToPool indicates an expected call of AddSessionsToPool.
func (mr *MockAppMockRecorder) AddSessionsToPool(stationID interface{}, sessionsIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stationID}, sessionsIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSessionsToPool", reflect.TypeOf((*MockApp)(nil).AddSessionsToPool), varargs...)
}

// AdvertisingCampaign mocks base method.
func (m *MockApp) AdvertisingCampaign(auth *Auth, startDate, endDate *time.Time) ([]AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvertisingCampaign", auth, startDate, endDate)
	ret0, _ := ret[0].([]AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdvertisingCampaign indicates an expected call of AdvertisingCampaign.
func (mr *MockAppMockRecorder) AdvertisingCampaign(auth, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertisingCampaign", reflect.TypeOf((*MockApp)(nil).AdvertisingCampaign), auth, startDate, endDate)
}

// AdvertisingCampaignByID mocks base method.
func (m *MockApp) AdvertisingCampaignByID(auth *Auth, id int64) (*AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvertisingCampaignByID", auth, id)
	ret0, _ := ret[0].(*AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdvertisingCampaignByID indicates an expected call of AdvertisingCampaignByID.
func (mr *MockAppMockRecorder) AdvertisingCampaignByID(auth, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertisingCampaignByID", reflect.TypeOf((*MockApp)(nil).AdvertisingCampaignByID), auth, id)
}

// AssignSessionBonuses mocks base method.
func (m *MockApp) AssignSessionBonuses(sessionID string, amount int, post StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignSessionBonuses", sessionID, amount, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignSessionBonuses indicates an expected call of AssignSessionBonuses.
func (mr *MockAppMockRecorder) AssignSessionBonuses(sessionID, amount, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignSessionBonuses", reflect.TypeOf((*MockApp)(nil).AssignSessionBonuses), sessionID, amount, post)
}

// AssignSessionUser mocks base method.
func (m *MockApp) AssignSessionUser(sessionID, userID string, post StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignSessionUser", sessionID, userID, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignSessionUser indicates an expected call of AssignSessionUser.
func (mr *MockAppMockRecorder) AssignSessionUser(sessionID, userID, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignSessionUser", reflect.TypeOf((*MockApp)(nil).AssignSessionUser), sessionID, userID, post)
}

// CardReaderConfig mocks base method.
func (m *MockApp) CardReaderConfig(arg0 StationID) (*CardReaderConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CardReaderConfig", arg0)
	ret0, _ := ret[0].(*CardReaderConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CardReaderConfig indicates an expected call of CardReaderConfig.
func (mr *MockAppMockRecorder) CardReaderConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CardReaderConfig", reflect.TypeOf((*MockApp)(nil).CardReaderConfig), arg0)
}

// CollectionReports mocks base method.
func (m *MockApp) CollectionReports(id StationID, startDate, endDate *time.Time) ([]CollectionReportWithUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionReports", id, startDate, endDate)
	ret0, _ := ret[0].([]CollectionReportWithUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionReports indicates an expected call of CollectionReports.
func (mr *MockAppMockRecorder) CollectionReports(id, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionReports", reflect.TypeOf((*MockApp)(nil).CollectionReports), id, startDate, endDate)
}

// CreateAdvertisingCampaignFromManagement mocks base method.
func (m *MockApp) CreateAdvertisingCampaignFromManagement(ctx context.Context, advert AdvertisingCampaign) (AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdvertisingCampaignFromManagement", ctx, advert)
	ret0, _ := ret[0].(AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdvertisingCampaignFromManagement indicates an expected call of CreateAdvertisingCampaignFromManagement.
func (mr *MockAppMockRecorder) CreateAdvertisingCampaignFromManagement(ctx, advert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdvertisingCampaignFromManagement", reflect.TypeOf((*MockApp)(nil).CreateAdvertisingCampaignFromManagement), ctx, advert)
}

// CreateSession mocks base method.
func (m *MockApp) CreateSession(url string, stationID StationID) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", url, stationID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockAppMockRecorder) CreateSession(url, stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockApp)(nil).CreateSession), url, stationID)
}

// CreateUser mocks base method.
func (m *MockApp) CreateUser(userData UserData, auth *Auth) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userData, auth)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAppMockRecorder) CreateUser(userData, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockApp)(nil).CreateUser), userData, auth)
}

// DelAdvertisingCampaign mocks base method.
func (m *MockApp) DelAdvertisingCampaign(auth *Auth, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelAdvertisingCampaign", auth, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelAdvertisingCampaign indicates an expected call of DelAdvertisingCampaign.
func (mr *MockAppMockRecorder) DelAdvertisingCampaign(auth, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelAdvertisingCampaign", reflect.TypeOf((*MockApp)(nil).DelAdvertisingCampaign), auth, id)
}

// DelStation mocks base method.
func (m *MockApp) DelStation(id StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelStation", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelStation indicates an expected call of DelStation.
func (mr *MockAppMockRecorder) DelStation(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelStation", reflect.TypeOf((*MockApp)(nil).DelStation), id)
}

// DeleteConfigString mocks base method.
func (m *MockApp) DeleteConfigString(auth *Auth, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigString", auth, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfigString indicates an expected call of DeleteConfigString.
func (mr *MockAppMockRecorder) DeleteConfigString(auth, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigString", reflect.TypeOf((*MockApp)(nil).DeleteConfigString), auth, name)
}

// DeleteUser mocks base method.
func (m *MockApp) DeleteUser(login string, auth *Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", login, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAppMockRecorder) DeleteUser(login, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockApp)(nil).DeleteUser), login, auth)
}

// DispenserStop mocks base method.
func (m *MockApp) DispenserStop(stationID StationID, stopProgramID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispenserStop", stationID, stopProgramID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispenserStop indicates an expected call of DispenserStop.
func (mr *MockAppMockRecorder) DispenserStop(stationID, stopProgramID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispenserStop", reflect.TypeOf((*MockApp)(nil).DispenserStop), stationID, stopProgramID)
}

// EditAdvertisingCampaign mocks base method.
func (m *MockApp) EditAdvertisingCampaign(auth *Auth, a AdvertisingCampaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditAdvertisingCampaign", auth, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditAdvertisingCampaign indicates an expected call of EditAdvertisingCampaign.
func (mr *MockAppMockRecorder) EditAdvertisingCampaign(auth, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditAdvertisingCampaign", reflect.TypeOf((*MockApp)(nil).EditAdvertisingCampaign), auth, a)
}

// EndSession mocks base method.
func (m *MockApp) EndSession(stationID StationID, sessionID BonusSessionID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndSession", stationID, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndSession indicates an expected call of EndSession.
func (mr *MockAppMockRecorder) EndSession(stationID, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSession", reflect.TypeOf((*MockApp)(nil).EndSession), stationID, sessionID)
}

// FetchSessions mocks base method.
func (m *MockApp) FetchSessions() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSessions")
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchSessions indicates an expected call of FetchSessions.
func (mr *MockAppMockRecorder) FetchSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSessions", reflect.TypeOf((*MockApp)(nil).FetchSessions))
}

// Get mocks base method.
func (m *MockApp) Get(stationID StationID) (StationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", stationID)
	ret0, _ := ret[0].(StationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAppMockRecorder) Get(stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApp)(nil).Get), stationID)
}

// GetConfigBool mocks base method.
func (m *MockApp) GetConfigBool(auth *Auth, name string) (*ConfigBool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigBool", auth, name)
	ret0, _ := ret[0].(*ConfigBool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigBool indicates an expected call of GetConfigBool.
func (mr *MockAppMockRecorder) GetConfigBool(auth, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigBool", reflect.TypeOf((*MockApp)(nil).GetConfigBool), auth, name)
}

// GetConfigInt mocks base method.
func (m *MockApp) GetConfigInt(auth *Auth, name string) (*ConfigInt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigInt", auth, name)
	ret0, _ := ret[0].(*ConfigInt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigInt indicates an expected call of GetConfigInt.
func (mr *MockAppMockRecorder) GetConfigInt(auth, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigInt", reflect.TypeOf((*MockApp)(nil).GetConfigInt), auth, name)
}

// GetConfigString mocks base method.
func (m *MockApp) GetConfigString(auth *Auth, name string) (*ConfigString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigString", auth, name)
	ret0, _ := ret[0].(*ConfigString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigString indicates an expected call of GetConfigString.
func (mr *MockAppMockRecorder) GetConfigString(auth, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigString", reflect.TypeOf((*MockApp)(nil).GetConfigString), auth, name)
}

// GetLastPayment mocks base method.
func (m *MockApp) GetLastPayment(postID StationID) (Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastPayment", postID)
	ret0, _ := ret[0].(Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastPayment indicates an expected call of GetLastPayment.
func (mr *MockAppMockRecorder) GetLastPayment(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastPayment", reflect.TypeOf((*MockApp)(nil).GetLastPayment), postID)
}

// GetLevel mocks base method.
func (m *MockApp) GetLevel() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockAppMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockApp)(nil).GetLevel))
}

// GetRabbitConfig mocks base method.
func (m *MockApp) GetRabbitConfig() (RabbitConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRabbitConfig")
	ret0, _ := ret[0].(RabbitConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRabbitConfig indicates an expected call of GetRabbitConfig.
func (mr *MockAppMockRecorder) GetRabbitConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRabbitConfig", reflect.TypeOf((*MockApp)(nil).GetRabbitConfig))
}

// GetSbpConfig mocks base method.
func (m *MockApp) GetSbpConfig(envServerSbpID, envServerSbpPassword string) (SbpRabbitConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSbpConfig", envServerSbpID, envServerSbpPassword)
	ret0, _ := ret[0].(SbpRabbitConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSbpConfig indicates an expected call of GetSbpConfig.
func (mr *MockAppMockRecorder) GetSbpConfig(envServerSbpID, envServerSbpPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSbpConfig", reflect.TypeOf((*MockApp)(nil).GetSbpConfig), envServerSbpID, envServerSbpPassword)
}

// GetServerInfo mocks base method.
func (m *MockApp) GetServerInfo() ServerInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerInfo")
	ret0, _ := ret[0].(ServerInfo)
	return ret0
}

// GetServerInfo indicates an expected call of GetServerInfo.
func (mr *MockAppMockRecorder) GetServerInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerInfo", reflect.TypeOf((*MockApp)(nil).GetServerInfo))
}

// GetStationConfigBool mocks base method.
func (m *MockApp) GetStationConfigBool(name string, stationID StationID) (*StationConfigBool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationConfigBool", name, stationID)
	ret0, _ := ret[0].(*StationConfigBool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationConfigBool indicates an expected call of GetStationConfigBool.
func (mr *MockAppMockRecorder) GetStationConfigBool(name, stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationConfigBool", reflect.TypeOf((*MockApp)(nil).GetStationConfigBool), name, stationID)
}

// GetStationConfigInt mocks base method.
func (m *MockApp) GetStationConfigInt(name string, stationID StationID) (*StationConfigInt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationConfigInt", name, stationID)
	ret0, _ := ret[0].(*StationConfigInt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationConfigInt indicates an expected call of GetStationConfigInt.
func (mr *MockAppMockRecorder) GetStationConfigInt(name, stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationConfigInt", reflect.TypeOf((*MockApp)(nil).GetStationConfigInt), name, stationID)
}

// GetStationConfigString mocks base method.
func (m *MockApp) GetStationConfigString(name string, stationID StationID) (*StationConfigString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationConfigString", name, stationID)
	ret0, _ := ret[0].(*StationConfigString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationConfigString indicates an expected call of GetStationConfigString.
func (mr *MockAppMockRecorder) GetStationConfigString(name, stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationConfigString", reflect.TypeOf((*MockApp)(nil).GetStationConfigString), name, stationID)
}

// GetStationDiscount mocks base method.
func (m *MockApp) GetStationDiscount(id StationID) (*StationDiscount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationDiscount", id)
	ret0, _ := ret[0].(*StationDiscount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationDiscount indicates an expected call of GetStationDiscount.
func (mr *MockAppMockRecorder) GetStationDiscount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationDiscount", reflect.TypeOf((*MockApp)(nil).GetStationDiscount), id)
}

// GetVolumeDispenser mocks base method.
func (m *MockApp) GetVolumeDispenser() (int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeDispenser")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVolumeDispenser indicates an expected call of GetVolumeDispenser.
func (mr *MockAppMockRecorder) GetVolumeDispenser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeDispenser", reflect.TypeOf((*MockApp)(nil).GetVolumeDispenser))
}

// Info mocks base method.
func (m *MockApp) Info() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(string)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockAppMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockApp)(nil).Info))
}

// InitBonusRabbitWorker mocks base method.
func (m *MockApp) InitBonusRabbitWorker(routingKey string, publisherFunc func(interface{}, vo.Service, vo.RoutingKey, vo.MessageType) error, status func() ServiceStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitBonusRabbitWorker", routingKey, publisherFunc, status)
}

// InitBonusRabbitWorker indicates an expected call of InitBonusRabbitWorker.
func (mr *MockAppMockRecorder) InitBonusRabbitWorker(routingKey, publisherFunc, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitBonusRabbitWorker", reflect.TypeOf((*MockApp)(nil).InitBonusRabbitWorker), routingKey, publisherFunc, status)
}

// InitKaspi mocks base method.
func (m *MockApp) InitKaspi(arg0 KaspiService) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitKaspi", arg0)
}

// InitKaspi indicates an expected call of InitKaspi.
func (mr *MockAppMockRecorder) InitKaspi(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitKaspi", reflect.TypeOf((*MockApp)(nil).InitKaspi), arg0)
}

// InitManagement mocks base method.
func (m *MockApp) InitManagement(arg0 ManagementRabbitWorker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitManagement", arg0)
}

// InitManagement indicates an expected call of InitManagement.
func (mr *MockAppMockRecorder) InitManagement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitManagement", reflect.TypeOf((*MockApp)(nil).InitManagement), arg0)
}

// InitSbpRabbitWorker mocks base method.
func (m *MockApp) InitSbpRabbitWorker(config SbpRabbitWorkerConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitSbpRabbitWorker", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitSbpRabbitWorker indicates an expected call of InitSbpRabbitWorker.
func (mr *MockAppMockRecorder) InitSbpRabbitWorker(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitSbpRabbitWorker", reflect.TypeOf((*MockApp)(nil).InitSbpRabbitWorker), config)
}

// IsEnabled mocks base method.
func (m *MockApp) IsEnabled(user *UserData) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled", user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockAppMockRecorder) IsEnabled(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockApp)(nil).IsEnabled), user)
}

// IsSbpAvailableForStation mocks base method.
func (m *MockApp) IsSbpAvailableForStation(stationID StationID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSbpAvailableForStation", stationID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSbpAvailableForStation indicates an expected call of IsSbpAvailableForStation.
func (mr *MockAppMockRecorder) IsSbpAvailableForStation(stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSbpAvailableForStation", reflect.TypeOf((*MockApp)(nil).IsSbpAvailableForStation), stationID)
}

// IsSbpRabbitWorkerInit mocks base method.
func (m *MockApp) IsSbpRabbitWorkerInit() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSbpRabbitWorkerInit")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSbpRabbitWorkerInit indicates an expected call of IsSbpRabbitWorkerInit.
func (mr *MockAppMockRecorder) IsSbpRabbitWorkerInit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSbpRabbitWorkerInit", reflect.TypeOf((*MockApp)(nil).IsSbpRabbitWorkerInit))
}

// KaspiCommand mocks base method.
func (m *MockApp) KaspiCommand(arg0 Command) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "KaspiCommand", arg0)
}

// KaspiCommand indicates an expected call of KaspiCommand.
func (mr *MockAppMockRecorder) KaspiCommand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KaspiCommand", reflect.TypeOf((*MockApp)(nil).KaspiCommand), arg0)
}

// Kasse mocks base method.
func (m *MockApp) Kasse() (Kasse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kasse")
	ret0, _ := ret[0].(Kasse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Kasse indicates an expected call of Kasse.
func (mr *MockAppMockRecorder) Kasse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kasse", reflect.TypeOf((*MockApp)(nil).Kasse))
}

// Load mocks base method.
func (m *MockApp) Load(stationID StationID, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", stationID, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockAppMockRecorder) Load(stationID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockApp)(nil).Load), stationID, key)
}

// LoadMoneyReport mocks base method.
func (m *MockApp) LoadMoneyReport(arg0 StationID) (*MoneyReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadMoneyReport", arg0)
	ret0, _ := ret[0].(*MoneyReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadMoneyReport indicates an expected call of LoadMoneyReport.
func (mr *MockAppMockRecorder) LoadMoneyReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadMoneyReport", reflect.TypeOf((*MockApp)(nil).LoadMoneyReport), arg0)
}

// MarkAdvertisingCampaignSended mocks base method.
func (m *MockApp) MarkAdvertisingCampaignSended(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAdvertisingCampaignSended", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAdvertisingCampaignSended indicates an expected call of MarkAdvertisingCampaignSended.
func (mr *MockAppMockRecorder) MarkAdvertisingCampaignSended(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAdvertisingCampaignSended", reflect.TypeOf((*MockApp)(nil).MarkAdvertisingCampaignSended), ctx, id)
}

// MarkProgramSended mocks base method.
func (m *MockApp) MarkProgramSended(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkProgramSended", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkProgramSended indicates an expected call of MarkProgramSended.
func (mr *MockAppMockRecorder) MarkProgramSended(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkProgramSended", reflect.TypeOf((*MockApp)(nil).MarkProgramSended), ctx, id)
}

// MeasureVolumeMilliliters mocks base method.
func (m *MockApp) MeasureVolumeMilliliters(volume int64, stationID StationID, startProgramID, stopProgramID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeasureVolumeMilliliters", volume, stationID, startProgramID, stopProgramID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MeasureVolumeMilliliters indicates an expected call of MeasureVolumeMilliliters.
func (mr *MockAppMockRecorder) MeasureVolumeMilliliters(volume, stationID, startProgramID, stopProgramID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeasureVolumeMilliliters", reflect.TypeOf((*MockApp)(nil).MeasureVolumeMilliliters), volume, stationID, startProgramID, stopProgramID)
}

// NotSendedAdvertisingCampaigns mocks base method.
func (m *MockApp) NotSendedAdvertisingCampaigns(ctx context.Context) ([]AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotSendedAdvertisingCampaigns", ctx)
	ret0, _ := ret[0].([]AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotSendedAdvertisingCampaigns indicates an expected call of NotSendedAdvertisingCampaigns.
func (mr *MockAppMockRecorder) NotSendedAdvertisingCampaigns(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotSendedAdvertisingCampaigns", reflect.TypeOf((*MockApp)(nil).NotSendedAdvertisingCampaigns), ctx)
}

// NotSendedPrograms mocks base method.
func (m *MockApp) NotSendedPrograms(ctx context.Context) ([]Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotSendedPrograms", ctx)
	ret0, _ := ret[0].([]Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotSendedPrograms indicates an expected call of NotSendedPrograms.
func (mr *MockAppMockRecorder) NotSendedPrograms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotSendedPrograms", reflect.TypeOf((*MockApp)(nil).NotSendedPrograms), ctx)
}

// OpenStation mocks base method.
func (m *MockApp) OpenStation(arg0 StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenStation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenStation indicates an expected call of OpenStation.
func (mr *MockAppMockRecorder) OpenStation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenStation", reflect.TypeOf((*MockApp)(nil).OpenStation), arg0)
}

// Ping mocks base method.
func (m *MockApp) Ping(id StationID, balance, program int, stationIP string) (StationData, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", id, balance, program, stationIP)
	ret0, _ := ret[0].(StationData)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockAppMockRecorder) Ping(id, balance, program, stationIP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockApp)(nil).Ping), id, balance, program, stationIP)
}

// PressButton mocks base method.
func (m *MockApp) PressButton(id StationID, buttonID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PressButton", id, buttonID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PressButton indicates an expected call of PressButton.
func (mr *MockAppMockRecorder) PressButton(id, buttonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PressButton", reflect.TypeOf((*MockApp)(nil).PressButton), id, buttonID)
}

// Programs mocks base method.
func (m *MockApp) Programs(id *int64) ([]Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Programs", id)
	ret0, _ := ret[0].([]Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Programs indicates an expected call of Programs.
func (mr *MockAppMockRecorder) Programs(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Programs", reflect.TypeOf((*MockApp)(nil).Programs), id)
}

// ReceiveNotification mocks base method.
func (m *MockApp) ReceiveNotification(orderID go_uuid.UUID, status PaymentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveNotification", orderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReceiveNotification indicates an expected call of ReceiveNotification.
func (mr *MockAppMockRecorder) ReceiveNotification(orderID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveNotification", reflect.TypeOf((*MockApp)(nil).ReceiveNotification), orderID, status)
}

// RelayReportCurrent mocks base method.
func (m *MockApp) RelayReportCurrent(auth *Auth, id *StationID) (StationsStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayReportCurrent", auth, id)
	ret0, _ := ret[0].(StationsStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelayReportCurrent indicates an expected call of RelayReportCurrent.
func (mr *MockAppMockRecorder) RelayReportCurrent(auth, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayReportCurrent", reflect.TypeOf((*MockApp)(nil).RelayReportCurrent), auth, id)
}

// RelayReportDates mocks base method.
func (m *MockApp) RelayReportDates(auth *Auth, stationID *StationID, startDate, endDate time.Time) (StationsStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayReportDates", auth, stationID, startDate, endDate)
	ret0, _ := ret[0].(StationsStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelayReportDates indicates an expected call of RelayReportDates.
func (mr *MockAppMockRecorder) RelayReportDates(auth, stationID, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayReportDates", reflect.TypeOf((*MockApp)(nil).RelayReportDates), auth, stationID, startDate, endDate)
}

// RequestSessionsFromService mocks base method.
func (m *MockApp) RequestSessionsFromService(count int, stationID StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestSessionsFromService", count, stationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestSessionsFromService indicates an expected call of RequestSessionsFromService.
func (mr *MockAppMockRecorder) RequestSessionsFromService(count, stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestSessionsFromService", reflect.TypeOf((*MockApp)(nil).RequestSessionsFromService), count, stationID)
}

// ResetStationStat mocks base method.
func (m *MockApp) ResetStationStat(auth *Auth, stationID StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetStationStat", auth, stationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetStationStat indicates an expected call of ResetStationStat.
func (mr *MockAppMockRecorder) ResetStationStat(auth, stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetStationStat", reflect.TypeOf((*MockApp)(nil).ResetStationStat), auth, stationID)
}

// Run2Program mocks base method.
func (m *MockApp) Run2Program(id StationID, programID, programID2 int64, preflight bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run2Program", id, programID, programID2, preflight)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run2Program indicates an expected call of Run2Program.
func (mr *MockAppMockRecorder) Run2Program(id, programID, programID2, preflight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run2Program", reflect.TypeOf((*MockApp)(nil).Run2Program), id, programID, programID2, preflight)
}

// RunProgram mocks base method.
func (m *MockApp) RunProgram(id StationID, programID int64, preflight bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunProgram", id, programID, preflight)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunProgram indicates an expected call of RunProgram.
func (mr *MockAppMockRecorder) RunProgram(id, programID, preflight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunProgram", reflect.TypeOf((*MockApp)(nil).RunProgram), id, programID, preflight)
}

// Save mocks base method.
func (m *MockApp) Save(stationID StationID, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", stationID, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAppMockRecorder) Save(stationID, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockApp)(nil).Save), stationID, key, value)
}

// SaveCollectionReport mocks base method.
func (m *MockApp) SaveCollectionReport(auth *Auth, id StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCollectionReport", auth, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCollectionReport indicates an expected call of SaveCollectionReport.
func (mr *MockAppMockRecorder) SaveCollectionReport(auth, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCollectionReport", reflect.TypeOf((*MockApp)(nil).SaveCollectionReport), auth, id)
}

// SaveIfNotExists mocks base method.
func (m *MockApp) SaveIfNotExists(stationID StationID, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveIfNotExists", stationID, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveIfNotExists indicates an expected call of SaveIfNotExists.
func (mr *MockAppMockRecorder) SaveIfNotExists(stationID, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIfNotExists", reflect.TypeOf((*MockApp)(nil).SaveIfNotExists), stationID, key, value)
}

// SaveMoneyReport mocks base method.
func (m *MockApp) SaveMoneyReport(report MoneyReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMoneyReport", report)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMoneyReport indicates an expected call of SaveMoneyReport.
func (mr *MockAppMockRecorder) SaveMoneyReport(report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMoneyReport", reflect.TypeOf((*MockApp)(nil).SaveMoneyReport), report)
}

// SaveRelayReport mocks base method.
func (m *MockApp) SaveRelayReport(report RelayReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRelayReport", report)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRelayReport indicates an expected call of SaveRelayReport.
func (mr *MockAppMockRecorder) SaveRelayReport(report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRelayReport", reflect.TypeOf((*MockApp)(nil).SaveRelayReport), report)
}

// SendPaymentRequest mocks base method.
func (m *MockApp) SendPaymentRequest(postID StationID, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPaymentRequest", postID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPaymentRequest indicates an expected call of SendPaymentRequest.
func (mr *MockAppMockRecorder) SendPaymentRequest(postID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPaymentRequest", reflect.TypeOf((*MockApp)(nil).SendPaymentRequest), postID, amount)
}

// Set mocks base method.
func (m *MockApp) Set(station StationData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", station)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockAppMockRecorder) Set(station interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockApp)(nil).Set), station)
}

// SetBonuses mocks base method.
func (m *MockApp) SetBonuses(stationID StationID, bonuses int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBonuses", stationID, bonuses)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBonuses indicates an expected call of SetBonuses.
func (mr *MockAppMockRecorder) SetBonuses(stationID, bonuses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBonuses", reflect.TypeOf((*MockApp)(nil).SetBonuses), stationID, bonuses)
}

// SetCardReaderConfig mocks base method.
func (m *MockApp) SetCardReaderConfig(arg0 CardReaderConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCardReaderConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCardReaderConfig indicates an expected call of SetCardReaderConfig.
func (mr *MockAppMockRecorder) SetCardReaderConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCardReaderConfig", reflect.TypeOf((*MockApp)(nil).SetCardReaderConfig), arg0)
}

// SetConfigBool mocks base method.
func (m *MockApp) SetConfigBool(auth *Auth, config ConfigBool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfigBool", auth, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfigBool indicates an expected call of SetConfigBool.
func (mr *MockAppMockRecorder) SetConfigBool(auth, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigBool", reflect.TypeOf((*MockApp)(nil).SetConfigBool), auth, config)
}

// SetConfigInt mocks base method.
func (m *MockApp) SetConfigInt(auth *Auth, config ConfigInt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfigInt", auth, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfigInt indicates an expected call of SetConfigInt.
func (mr *MockAppMockRecorder) SetConfigInt(auth, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigInt", reflect.TypeOf((*MockApp)(nil).SetConfigInt), auth, config)
}

// SetConfigString mocks base method.
func (m *MockApp) SetConfigString(auth *Auth, config ConfigString) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfigString", auth, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfigString indicates an expected call of SetConfigString.
func (mr *MockAppMockRecorder) SetConfigString(auth, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigString", reflect.TypeOf((*MockApp)(nil).SetConfigString), auth, config)
}

// SetExternalServicesActive mocks base method.
func (m *MockApp) SetExternalServicesActive(active bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExternalServicesActive", active)
}

// SetExternalServicesActive indicates an expected call of SetExternalServicesActive.
func (mr *MockAppMockRecorder) SetExternalServicesActive(active interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExternalServicesActive", reflect.TypeOf((*MockApp)(nil).SetExternalServicesActive), active)
}

// SetKasse mocks base method.
func (m *MockApp) SetKasse(kasse Kasse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKasse", kasse)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKasse indicates an expected call of SetKasse.
func (mr *MockAppMockRecorder) SetKasse(kasse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKasse", reflect.TypeOf((*MockApp)(nil).SetKasse), kasse)
}

// SetNextSession mocks base method.
func (m *MockApp) SetNextSession(stationID StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNextSession", stationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNextSession indicates an expected call of SetNextSession.
func (mr *MockAppMockRecorder) SetNextSession(stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNextSession", reflect.TypeOf((*MockApp)(nil).SetNextSession), stationID)
}

// SetPaymentCanceled mocks base method.
func (m *MockApp) SetPaymentCanceled(orderID go_uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPaymentCanceled", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPaymentCanceled indicates an expected call of SetPaymentCanceled.
func (mr *MockAppMockRecorder) SetPaymentCanceled(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPaymentCanceled", reflect.TypeOf((*MockApp)(nil).SetPaymentCanceled), orderID)
}

// SetPaymentReceived mocks base method.
func (m *MockApp) SetPaymentReceived(orderID go_uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPaymentReceived", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPaymentReceived indicates an expected call of SetPaymentReceived.
func (mr *MockAppMockRecorder) SetPaymentReceived(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPaymentReceived", reflect.TypeOf((*MockApp)(nil).SetPaymentReceived), orderID)
}

// SetPaymentURL mocks base method.
func (m *MockApp) SetPaymentURL(orderID go_uuid.UUID, urlPay string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPaymentURL", orderID, urlPay)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPaymentURL indicates an expected call of SetPaymentURL.
func (mr *MockAppMockRecorder) SetPaymentURL(orderID, urlPay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPaymentURL", reflect.TypeOf((*MockApp)(nil).SetPaymentURL), orderID, urlPay)
}

// SetProgram mocks base method.
func (m *MockApp) SetProgram(arg0 Program) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProgram", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProgram indicates an expected call of SetProgram.
func (mr *MockAppMockRecorder) SetProgram(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProgram", reflect.TypeOf((*MockApp)(nil).SetProgram), arg0)
}

// SetProgramFromManagement mocks base method.
func (m *MockApp) SetProgramFromManagement(ctx context.Context, program ManagementProgram) (Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProgramFromManagement", ctx, program)
	ret0, _ := ret[0].(Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProgramFromManagement indicates an expected call of SetProgramFromManagement.
func (mr *MockAppMockRecorder) SetProgramFromManagement(ctx, program interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProgramFromManagement", reflect.TypeOf((*MockApp)(nil).SetProgramFromManagement), ctx, program)
}

// SetStation mocks base method.
func (m *MockApp) SetStation(station SetStation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStation", station)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStation indicates an expected call of SetStation.
func (mr *MockAppMockRecorder) SetStation(station interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStation", reflect.TypeOf((*MockApp)(nil).SetStation), station)
}

// SetStationConfigBool mocks base method.
func (m *MockApp) SetStationConfigBool(auth *Auth, config StationConfigBool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStationConfigBool", auth, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStationConfigBool indicates an expected call of SetStationConfigBool.
func (mr *MockAppMockRecorder) SetStationConfigBool(auth, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStationConfigBool", reflect.TypeOf((*MockApp)(nil).SetStationConfigBool), auth, config)
}

// SetStationConfigInt mocks base method.
func (m *MockApp) SetStationConfigInt(auth *Auth, config StationConfigInt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStationConfigInt", auth, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStationConfigInt indicates an expected call of SetStationConfigInt.
func (mr *MockAppMockRecorder) SetStationConfigInt(auth, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStationConfigInt", reflect.TypeOf((*MockApp)(nil).SetStationConfigInt), auth, config)
}

// SetStationConfigString mocks base method.
func (m *MockApp) SetStationConfigString(auth *Auth, config StationConfigString) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStationConfigString", auth, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStationConfigString indicates an expected call of SetStationConfigString.
func (mr *MockAppMockRecorder) SetStationConfigString(auth, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStationConfigString", reflect.TypeOf((*MockApp)(nil).SetStationConfigString), auth, config)
}

// SetStationProgram mocks base method.
func (m *MockApp) SetStationProgram(arg0 StationID, arg1 []StationProgram) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStationProgram", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStationProgram indicates an expected call of SetStationProgram.
func (mr *MockAppMockRecorder) SetStationProgram(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStationProgram", reflect.TypeOf((*MockApp)(nil).SetStationProgram), arg0, arg1)
}

// Station mocks base method.
func (m *MockApp) Station(arg0 StationID) (SetStation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Station", arg0)
	ret0, _ := ret[0].(SetStation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Station indicates an expected call of Station.
func (mr *MockAppMockRecorder) Station(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Station", reflect.TypeOf((*MockApp)(nil).Station), arg0)
}

// StationConfig mocks base method.
func (m *MockApp) StationConfig(arg0 StationID) (StationConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationConfig", arg0)
	ret0, _ := ret[0].(StationConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StationConfig indicates an expected call of StationConfig.
func (mr *MockAppMockRecorder) StationConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationConfig", reflect.TypeOf((*MockApp)(nil).StationConfig), arg0)
}

// StationProgram mocks base method.
func (m *MockApp) StationProgram(arg0 StationID) ([]StationProgram, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationProgram", arg0)
	ret0, _ := ret[0].([]StationProgram)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StationProgram indicates an expected call of StationProgram.
func (mr *MockAppMockRecorder) StationProgram(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationProgram", reflect.TypeOf((*MockApp)(nil).StationProgram), arg0)
}

// StationReportCurrentMoney mocks base method.
func (m *MockApp) StationReportCurrentMoney(id StationID) (MoneyReport, RelayReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationReportCurrentMoney", id)
	ret0, _ := ret[0].(MoneyReport)
	ret1, _ := ret[1].(RelayReport)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StationReportCurrentMoney indicates an expected call of StationReportCurrentMoney.
func (mr *MockAppMockRecorder) StationReportCurrentMoney(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationReportCurrentMoney", reflect.TypeOf((*MockApp)(nil).StationReportCurrentMoney), id)
}

// StationReportDates mocks base method.
func (m *MockApp) StationReportDates(id StationID, startDate, endDate time.Time) (MoneyReport, RelayReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationReportDates", id, startDate, endDate)
	ret0, _ := ret[0].(MoneyReport)
	ret1, _ := ret[1].(RelayReport)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StationReportDates indicates an expected call of StationReportDates.
func (mr *MockAppMockRecorder) StationReportDates(id, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationReportDates", reflect.TypeOf((*MockApp)(nil).StationReportDates), id, startDate, endDate)
}

// StationsVariables mocks base method.
func (m *MockApp) StationsVariables() ([]StationsVariables, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationsVariables")
	ret0, _ := ret[0].([]StationsVariables)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StationsVariables indicates an expected call of StationsVariables.
func (mr *MockAppMockRecorder) StationsVariables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationsVariables", reflect.TypeOf((*MockApp)(nil).StationsVariables))
}

// StatusCollection mocks base method.
func (m *MockApp) StatusCollection() StatusCollection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusCollection")
	ret0, _ := ret[0].(StatusCollection)
	return ret0
}

// StatusCollection indicates an expected call of StatusCollection.
func (mr *MockAppMockRecorder) StatusCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCollection", reflect.TypeOf((*MockApp)(nil).StatusCollection))
}

// StatusReport mocks base method.
func (m *MockApp) StatusReport(arg0 bool) StatusReport {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusReport", arg0)
	ret0, _ := ret[0].(StatusReport)
	return ret0
}

// StatusReport indicates an expected call of StatusReport.
func (mr *MockAppMockRecorder) StatusReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusReport", reflect.TypeOf((*MockApp)(nil).StatusReport), arg0)
}

// UpdateAdvertisingCampaignFromManagement mocks base method.
func (m *MockApp) UpdateAdvertisingCampaignFromManagement(ctx context.Context, advert ManagementAdvertisingCampaign) (AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdvertisingCampaignFromManagement", ctx, advert)
	ret0, _ := ret[0].(AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdvertisingCampaignFromManagement indicates an expected call of UpdateAdvertisingCampaignFromManagement.
func (mr *MockAppMockRecorder) UpdateAdvertisingCampaignFromManagement(ctx, advert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdvertisingCampaignFromManagement", reflect.TypeOf((*MockApp)(nil).UpdateAdvertisingCampaignFromManagement), ctx, advert)
}

// UpdateUser mocks base method.
func (m *MockApp) UpdateUser(userData UpdateUserData, auth *Auth) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", userData, auth)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockAppMockRecorder) UpdateUser(userData, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockApp)(nil).UpdateUser), userData, auth)
}

// UpdateUserPassword mocks base method.
func (m *MockApp) UpdateUserPassword(userData UpdatePasswordData, auth *Auth) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", userData, auth)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockAppMockRecorder) UpdateUserPassword(userData, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockApp)(nil).UpdateUserPassword), userData, auth)
}

// User mocks base method.
func (m *MockApp) User(password string) (*UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", password)
	ret0, _ := ret[0].(*UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockAppMockRecorder) User(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockApp)(nil).User), password)
}

// Users mocks base method.
func (m *MockApp) Users(auth *Auth) ([]UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users", auth)
	ret0, _ := ret[0].([]UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Users indicates an expected call of Users.
func (mr *MockAppMockRecorder) Users(auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockApp)(nil).Users), auth)
}

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddAdvertisingCampaign mocks base method.
func (m *MockRepo) AddAdvertisingCampaign(arg0 context.Context, arg1 AdvertisingCampaign) (AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdvertisingCampaign", arg0, arg1)
	ret0, _ := ret[0].(AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAdvertisingCampaign indicates an expected call of AddAdvertisingCampaign.
func (mr *MockRepoMockRecorder) AddAdvertisingCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdvertisingCampaign", reflect.TypeOf((*MockRepo)(nil).AddAdvertisingCampaign), arg0, arg1)
}

// AddOpenStationLog mocks base method.
func (m *MockRepo) AddOpenStationLog(arg0 StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOpenStationLog", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOpenStationLog indicates an expected call of AddOpenStationLog.
func (mr *MockRepoMockRecorder) AddOpenStationLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOpenStationLog", reflect.TypeOf((*MockRepo)(nil).AddOpenStationLog), arg0)
}

// AddRabbitMessage mocks base method.
func (m *MockRepo) AddRabbitMessage(message RabbitMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRabbitMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRabbitMessage indicates an expected call of AddRabbitMessage.
func (mr *MockRepoMockRecorder) AddRabbitMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRabbitMessage", reflect.TypeOf((*MockRepo)(nil).AddRabbitMessage), message)
}

// AddStation mocks base method.
func (m *MockRepo) AddStation(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStation", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStation indicates an expected call of AddStation.
func (mr *MockRepoMockRecorder) AddStation(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStation", reflect.TypeOf((*MockRepo)(nil).AddStation), name)
}

// AddUpdateConfig mocks base method.
func (m *MockRepo) AddUpdateConfig(note string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUpdateConfig", note)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUpdateConfig indicates an expected call of AddUpdateConfig.
func (mr *MockRepoMockRecorder) AddUpdateConfig(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUpdateConfig", reflect.TypeOf((*MockRepo)(nil).AddUpdateConfig), note)
}

// AdvertisingCampaign mocks base method.
func (m *MockRepo) AdvertisingCampaign(startDate, endDate *time.Time) ([]AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvertisingCampaign", startDate, endDate)
	ret0, _ := ret[0].([]AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdvertisingCampaign indicates an expected call of AdvertisingCampaign.
func (mr *MockRepoMockRecorder) AdvertisingCampaign(startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertisingCampaign", reflect.TypeOf((*MockRepo)(nil).AdvertisingCampaign), startDate, endDate)
}

// AdvertisingCampaignByID mocks base method.
func (m *MockRepo) AdvertisingCampaignByID(id int64) (*AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvertisingCampaignByID", id)
	ret0, _ := ret[0].(*AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdvertisingCampaignByID indicates an expected call of AdvertisingCampaignByID.
func (mr *MockRepoMockRecorder) AdvertisingCampaignByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertisingCampaignByID", reflect.TypeOf((*MockRepo)(nil).AdvertisingCampaignByID), id)
}

// CardReaderConfig mocks base method.
func (m *MockRepo) CardReaderConfig(arg0 StationID) (*CardReaderConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CardReaderConfig", arg0)
	ret0, _ := ret[0].(*CardReaderConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CardReaderConfig indicates an expected call of CardReaderConfig.
func (mr *MockRepoMockRecorder) CardReaderConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CardReaderConfig", reflect.TypeOf((*MockRepo)(nil).CardReaderConfig), arg0)
}

// CheckDB mocks base method.
func (m *MockRepo) CheckDB() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDB")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDB indicates an expected call of CheckDB.
func (mr *MockRepoMockRecorder) CheckDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDB", reflect.TypeOf((*MockRepo)(nil).CheckDB))
}

// CollectionReports mocks base method.
func (m *MockRepo) CollectionReports(id StationID, startDate, endDate *time.Time) ([]CollectionReportWithUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionReports", id, startDate, endDate)
	ret0, _ := ret[0].([]CollectionReportWithUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionReports indicates an expected call of CollectionReports.
func (mr *MockRepoMockRecorder) CollectionReports(id, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionReports", reflect.TypeOf((*MockRepo)(nil).CollectionReports), id, startDate, endDate)
}

// CollectionSetSended mocks base method.
func (m *MockRepo) CollectionSetSended(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionSetSended", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectionSetSended indicates an expected call of CollectionSetSended.
func (mr *MockRepoMockRecorder) CollectionSetSended(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionSetSended", reflect.TypeOf((*MockRepo)(nil).CollectionSetSended), arg0)
}

// Collections mocks base method.
func (m *MockRepo) Collections() ([]CollectionReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collections")
	ret0, _ := ret[0].([]CollectionReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collections indicates an expected call of Collections.
func (mr *MockRepoMockRecorder) Collections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collections", reflect.TypeOf((*MockRepo)(nil).Collections))
}

// CreateUser mocks base method.
func (m *MockRepo) CreateUser(userData UserData) (UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userData)
	ret0, _ := ret[0].(UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepoMockRecorder) CreateUser(userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepo)(nil).CreateUser), userData)
}

// CurrentMoney mocks base method.
func (m *MockRepo) CurrentMoney(arg0 StationID) (MoneyReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentMoney", arg0)
	ret0, _ := ret[0].(MoneyReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentMoney indicates an expected call of CurrentMoney.
func (mr *MockRepoMockRecorder) CurrentMoney(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentMoney", reflect.TypeOf((*MockRepo)(nil).CurrentMoney), arg0)
}

// DelAdvertisingCampaign mocks base method.
func (m *MockRepo) DelAdvertisingCampaign(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelAdvertisingCampaign", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelAdvertisingCampaign indicates an expected call of DelAdvertisingCampaign.
func (mr *MockRepoMockRecorder) DelAdvertisingCampaign(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelAdvertisingCampaign", reflect.TypeOf((*MockRepo)(nil).DelAdvertisingCampaign), id)
}

// DelStation mocks base method.
func (m *MockRepo) DelStation(arg0 StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelStation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelStation indicates an expected call of DelStation.
func (mr *MockRepoMockRecorder) DelStation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelStation", reflect.TypeOf((*MockRepo)(nil).DelStation), arg0)
}

// DeleteConfigString mocks base method.
func (m *MockRepo) DeleteConfigString(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigString", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfigString indicates an expected call of DeleteConfigString.
func (mr *MockRepoMockRecorder) DeleteConfigString(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigString", reflect.TypeOf((*MockRepo)(nil).DeleteConfigString), name)
}

// DeleteUser mocks base method.
func (m *MockRepo) DeleteUser(login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", login)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepoMockRecorder) DeleteUser(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepo)(nil).DeleteUser), login)
}

// EditAdvertisingCampaign mocks base method.
func (m *MockRepo) EditAdvertisingCampaign(arg0 AdvertisingCampaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditAdvertisingCampaign", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditAdvertisingCampaign indicates an expected call of EditAdvertisingCampaign.
func (mr *MockRepoMockRecorder) EditAdvertisingCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditAdvertisingCampaign", reflect.TypeOf((*MockRepo)(nil).EditAdvertisingCampaign), arg0)
}

// GetConfigBool mocks base method.
func (m *MockRepo) GetConfigBool(name string) (*ConfigBool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigBool", name)
	ret0, _ := ret[0].(*ConfigBool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigBool indicates an expected call of GetConfigBool.
func (mr *MockRepoMockRecorder) GetConfigBool(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigBool", reflect.TypeOf((*MockRepo)(nil).GetConfigBool), name)
}

// GetConfigInt mocks base method.
func (m *MockRepo) GetConfigInt(name string) (*ConfigInt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigInt", name)
	ret0, _ := ret[0].(*ConfigInt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigInt indicates an expected call of GetConfigInt.
func (mr *MockRepoMockRecorder) GetConfigInt(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigInt", reflect.TypeOf((*MockRepo)(nil).GetConfigInt), name)
}

// GetConfigString mocks base method.
func (m *MockRepo) GetConfigString(name string) (*ConfigString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigString", name)
	ret0, _ := ret[0].(*ConfigString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigString indicates an expected call of GetConfigString.
func (mr *MockRepoMockRecorder) GetConfigString(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigString", reflect.TypeOf((*MockRepo)(nil).GetConfigString), name)
}

// GetCurrentAdvertisingCampaigns mocks base method.
func (m *MockRepo) GetCurrentAdvertisingCampaigns(arg0 time.Time) ([]AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentAdvertisingCampaigns", arg0)
	ret0, _ := ret[0].([]AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentAdvertisingCampaigns indicates an expected call of GetCurrentAdvertisingCampaigns.
func (mr *MockRepoMockRecorder) GetCurrentAdvertisingCampaigns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentAdvertisingCampaigns", reflect.TypeOf((*MockRepo)(nil).GetCurrentAdvertisingCampaigns), arg0)
}

// GetStationConfigBool mocks base method.
func (m *MockRepo) GetStationConfigBool(name string, stationID StationID) (*StationConfigBool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationConfigBool", name, stationID)
	ret0, _ := ret[0].(*StationConfigBool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationConfigBool indicates an expected call of GetStationConfigBool.
func (mr *MockRepoMockRecorder) GetStationConfigBool(name, stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationConfigBool", reflect.TypeOf((*MockRepo)(nil).GetStationConfigBool), name, stationID)
}

// GetStationConfigInt mocks base method.
func (m *MockRepo) GetStationConfigInt(name string, stationID StationID) (*StationConfigInt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationConfigInt", name, stationID)
	ret0, _ := ret[0].(*StationConfigInt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationConfigInt indicates an expected call of GetStationConfigInt.
func (mr *MockRepoMockRecorder) GetStationConfigInt(name, stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationConfigInt", reflect.TypeOf((*MockRepo)(nil).GetStationConfigInt), name, stationID)
}

// GetStationConfigString mocks base method.
func (m *MockRepo) GetStationConfigString(name string, stationID StationID) (*StationConfigString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationConfigString", name, stationID)
	ret0, _ := ret[0].(*StationConfigString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationConfigString indicates an expected call of GetStationConfigString.
func (mr *MockRepoMockRecorder) GetStationConfigString(name, stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationConfigString", reflect.TypeOf((*MockRepo)(nil).GetStationConfigString), name, stationID)
}

// GetUnsendedMoneyReports mocks base method.
func (m *MockRepo) GetUnsendedMoneyReports(lastMessageID int64) ([]RabbitMoneyReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnsendedMoneyReports", lastMessageID)
	ret0, _ := ret[0].([]RabbitMoneyReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnsendedMoneyReports indicates an expected call of GetUnsendedMoneyReports.
func (mr *MockRepoMockRecorder) GetUnsendedMoneyReports(lastMessageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnsendedMoneyReports", reflect.TypeOf((*MockRepo)(nil).GetUnsendedMoneyReports), lastMessageID)
}

// GetUnsendedRabbitMessages mocks base method.
func (m *MockRepo) GetUnsendedRabbitMessages(lastMessageID int64) ([]RabbitMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnsendedRabbitMessages", lastMessageID)
	ret0, _ := ret[0].([]RabbitMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnsendedRabbitMessages indicates an expected call of GetUnsendedRabbitMessages.
func (mr *MockRepoMockRecorder) GetUnsendedRabbitMessages(lastMessageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnsendedRabbitMessages", reflect.TypeOf((*MockRepo)(nil).GetUnsendedRabbitMessages), lastMessageID)
}

// Info mocks base method.
func (m *MockRepo) Info() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(string)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockRepoMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockRepo)(nil).Info))
}

// Kasse mocks base method.
func (m *MockRepo) Kasse() (Kasse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kasse")
	ret0, _ := ret[0].(Kasse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Kasse indicates an expected call of Kasse.
func (mr *MockRepoMockRecorder) Kasse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kasse", reflect.TypeOf((*MockRepo)(nil).Kasse))
}

// LastCollectionReport mocks base method.
func (m *MockRepo) LastCollectionReport(stationID StationID) (CollectionReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCollectionReport", stationID)
	ret0, _ := ret[0].(CollectionReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastCollectionReport indicates an expected call of LastCollectionReport.
func (mr *MockRepoMockRecorder) LastCollectionReport(stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCollectionReport", reflect.TypeOf((*MockRepo)(nil).LastCollectionReport), stationID)
}

// LastMoneyReport mocks base method.
func (m *MockRepo) LastMoneyReport(stationID StationID) (MoneyReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastMoneyReport", stationID)
	ret0, _ := ret[0].(MoneyReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastMoneyReport indicates an expected call of LastMoneyReport.
func (mr *MockRepoMockRecorder) LastMoneyReport(stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastMoneyReport", reflect.TypeOf((*MockRepo)(nil).LastMoneyReport), stationID)
}

// LastUpdateConfig mocks base method.
func (m *MockRepo) LastUpdateConfig() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastUpdateConfig")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastUpdateConfig indicates an expected call of LastUpdateConfig.
func (mr *MockRepoMockRecorder) LastUpdateConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastUpdateConfig", reflect.TypeOf((*MockRepo)(nil).LastUpdateConfig))
}

// Load mocks base method.
func (m *MockRepo) Load(stationID StationID, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", stationID, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockRepoMockRecorder) Load(stationID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockRepo)(nil).Load), stationID, key)
}

// LoadHash mocks base method.
func (m *MockRepo) LoadHash() ([]StationID, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadHash")
	ret0, _ := ret[0].([]StationID)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadHash indicates an expected call of LoadHash.
func (mr *MockRepoMockRecorder) LoadHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadHash", reflect.TypeOf((*MockRepo)(nil).LoadHash))
}

// MarkAdvertisingCampaignSended mocks base method.
func (m *MockRepo) MarkAdvertisingCampaignSended(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAdvertisingCampaignSended", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAdvertisingCampaignSended indicates an expected call of MarkAdvertisingCampaignSended.
func (mr *MockRepoMockRecorder) MarkAdvertisingCampaignSended(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAdvertisingCampaignSended", reflect.TypeOf((*MockRepo)(nil).MarkAdvertisingCampaignSended), ctx, id)
}

// MarkProgramSended mocks base method.
func (m *MockRepo) MarkProgramSended(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkProgramSended", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkProgramSended indicates an expected call of MarkProgramSended.
func (mr *MockRepoMockRecorder) MarkProgramSended(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkProgramSended", reflect.TypeOf((*MockRepo)(nil).MarkProgramSended), ctx, id)
}

// MarkRabbitMessageAsSent mocks base method.
func (m *MockRepo) MarkRabbitMessageAsSent(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRabbitMessageAsSent", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRabbitMessageAsSent indicates an expected call of MarkRabbitMessageAsSent.
func (mr *MockRepoMockRecorder) MarkRabbitMessageAsSent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRabbitMessageAsSent", reflect.TypeOf((*MockRepo)(nil).MarkRabbitMessageAsSent), id)
}

// MarkRabbitMoneyReportAsSent mocks base method.
func (m *MockRepo) MarkRabbitMoneyReportAsSent(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRabbitMoneyReportAsSent", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRabbitMoneyReportAsSent indicates an expected call of MarkRabbitMoneyReportAsSent.
func (mr *MockRepoMockRecorder) MarkRabbitMoneyReportAsSent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRabbitMoneyReportAsSent", reflect.TypeOf((*MockRepo)(nil).MarkRabbitMoneyReportAsSent), id)
}

// MoneyReport mocks base method.
func (m *MockRepo) MoneyReport(stationID StationID, startDate, endDate time.Time) (MoneyReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoneyReport", stationID, startDate, endDate)
	ret0, _ := ret[0].(MoneyReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoneyReport indicates an expected call of MoneyReport.
func (mr *MockRepoMockRecorder) MoneyReport(stationID, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoneyReport", reflect.TypeOf((*MockRepo)(nil).MoneyReport), stationID, startDate, endDate)
}

// MoneyReportSetSended mocks base method.
func (m *MockRepo) MoneyReportSetSended(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoneyReportSetSended", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoneyReportSetSended indicates an expected call of MoneyReportSetSended.
func (mr *MockRepoMockRecorder) MoneyReportSetSended(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoneyReportSetSended", reflect.TypeOf((*MockRepo)(nil).MoneyReportSetSended), arg0)
}

// MoneyReports mocks base method.
func (m *MockRepo) MoneyReports() ([]MngtMoneyReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoneyReports")
	ret0, _ := ret[0].([]MngtMoneyReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoneyReports indicates an expected call of MoneyReports.
func (mr *MockRepoMockRecorder) MoneyReports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoneyReports", reflect.TypeOf((*MockRepo)(nil).MoneyReports))
}

// NotSendedAdvertisingCampaigns mocks base method.
func (m *MockRepo) NotSendedAdvertisingCampaigns(ctx context.Context) ([]AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotSendedAdvertisingCampaigns", ctx)
	ret0, _ := ret[0].([]AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotSendedAdvertisingCampaigns indicates an expected call of NotSendedAdvertisingCampaigns.
func (mr *MockRepoMockRecorder) NotSendedAdvertisingCampaigns(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotSendedAdvertisingCampaigns", reflect.TypeOf((*MockRepo)(nil).NotSendedAdvertisingCampaigns), ctx)
}

// NotSendedPrograms mocks base method.
func (m *MockRepo) NotSendedPrograms(ctx context.Context) ([]Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotSendedPrograms", ctx)
	ret0, _ := ret[0].([]Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotSendedPrograms indicates an expected call of NotSendedPrograms.
func (mr *MockRepoMockRecorder) NotSendedPrograms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotSendedPrograms", reflect.TypeOf((*MockRepo)(nil).NotSendedPrograms), ctx)
}

// Programs mocks base method.
func (m *MockRepo) Programs(id *int64) ([]Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Programs", id)
	ret0, _ := ret[0].([]Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Programs indicates an expected call of Programs.
func (mr *MockRepoMockRecorder) Programs(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Programs", reflect.TypeOf((*MockRepo)(nil).Programs), id)
}

// RefreshMotorStatsCurrent mocks base method.
func (m *MockRepo) RefreshMotorStatsCurrent() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshMotorStatsCurrent")
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshMotorStatsCurrent indicates an expected call of RefreshMotorStatsCurrent.
func (mr *MockRepoMockRecorder) RefreshMotorStatsCurrent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshMotorStatsCurrent", reflect.TypeOf((*MockRepo)(nil).RefreshMotorStatsCurrent))
}

// RefreshMotorStatsDates mocks base method.
func (m *MockRepo) RefreshMotorStatsDates() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshMotorStatsDates")
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshMotorStatsDates indicates an expected call of RefreshMotorStatsDates.
func (mr *MockRepoMockRecorder) RefreshMotorStatsDates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshMotorStatsDates", reflect.TypeOf((*MockRepo)(nil).RefreshMotorStatsDates))
}

// RelayReportCurrent mocks base method.
func (m *MockRepo) RelayReportCurrent(stationID *StationID) (StationsStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayReportCurrent", stationID)
	ret0, _ := ret[0].(StationsStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelayReportCurrent indicates an expected call of RelayReportCurrent.
func (mr *MockRepoMockRecorder) RelayReportCurrent(stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayReportCurrent", reflect.TypeOf((*MockRepo)(nil).RelayReportCurrent), stationID)
}

// RelayReportDates mocks base method.
func (m *MockRepo) RelayReportDates(stationID *StationID, startDate, endDate time.Time) (StationsStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayReportDates", stationID, startDate, endDate)
	ret0, _ := ret[0].(StationsStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelayReportDates indicates an expected call of RelayReportDates.
func (mr *MockRepoMockRecorder) RelayReportDates(stationID, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayReportDates", reflect.TypeOf((*MockRepo)(nil).RelayReportDates), stationID, startDate, endDate)
}

// RelayStatReport mocks base method.
func (m *MockRepo) RelayStatReport(stationID StationID, startDate, endDate time.Time) (RelayReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayStatReport", stationID, startDate, endDate)
	ret0, _ := ret[0].(RelayReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelayStatReport indicates an expected call of RelayStatReport.
func (mr *MockRepoMockRecorder) RelayStatReport(stationID, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayStatReport", reflect.TypeOf((*MockRepo)(nil).RelayStatReport), stationID, startDate, endDate)
}

// ResetStationStat mocks base method.
func (m *MockRepo) ResetStationStat(stationID StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetStationStat", stationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetStationStat indicates an expected call of ResetStationStat.
func (mr *MockRepoMockRecorder) ResetStationStat(stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetStationStat", reflect.TypeOf((*MockRepo)(nil).ResetStationStat), stationID)
}

// Save mocks base method.
func (m *MockRepo) Save(stationID StationID, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", stationID, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepoMockRecorder) Save(stationID, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepo)(nil).Save), stationID, key, value)
}

// SaveCollectionReport mocks base method.
func (m *MockRepo) SaveCollectionReport(userID int, stationID StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCollectionReport", userID, stationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCollectionReport indicates an expected call of SaveCollectionReport.
func (mr *MockRepoMockRecorder) SaveCollectionReport(userID, stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCollectionReport", reflect.TypeOf((*MockRepo)(nil).SaveCollectionReport), userID, stationID)
}

// SaveIfNotExists mocks base method.
func (m *MockRepo) SaveIfNotExists(stationID StationID, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveIfNotExists", stationID, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveIfNotExists indicates an expected call of SaveIfNotExists.
func (mr *MockRepoMockRecorder) SaveIfNotExists(stationID, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIfNotExists", reflect.TypeOf((*MockRepo)(nil).SaveIfNotExists), stationID, key, value)
}

// SaveMoneyReport mocks base method.
func (m *MockRepo) SaveMoneyReport(arg0 MoneyReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMoneyReport", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMoneyReport indicates an expected call of SaveMoneyReport.
func (mr *MockRepoMockRecorder) SaveMoneyReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMoneyReport", reflect.TypeOf((*MockRepo)(nil).SaveMoneyReport), arg0)
}

// SaveMoneyReportAndMessage mocks base method.
func (m *MockRepo) SaveMoneyReportAndMessage(report RabbitMoneyReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMoneyReportAndMessage", report)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMoneyReportAndMessage indicates an expected call of SaveMoneyReportAndMessage.
func (mr *MockRepoMockRecorder) SaveMoneyReportAndMessage(report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMoneyReportAndMessage", reflect.TypeOf((*MockRepo)(nil).SaveMoneyReportAndMessage), report)
}

// SaveRelayReport mocks base method.
func (m *MockRepo) SaveRelayReport(arg0 RelayReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRelayReport", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRelayReport indicates an expected call of SaveRelayReport.
func (mr *MockRepoMockRecorder) SaveRelayReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRelayReport", reflect.TypeOf((*MockRepo)(nil).SaveRelayReport), arg0)
}

// SetCardReaderConfig mocks base method.
func (m *MockRepo) SetCardReaderConfig(arg0 CardReaderConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCardReaderConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCardReaderConfig indicates an expected call of SetCardReaderConfig.
func (mr *MockRepoMockRecorder) SetCardReaderConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCardReaderConfig", reflect.TypeOf((*MockRepo)(nil).SetCardReaderConfig), arg0)
}

// SetConfigBool mocks base method.
func (m *MockRepo) SetConfigBool(config ConfigBool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfigBool", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfigBool indicates an expected call of SetConfigBool.
func (mr *MockRepoMockRecorder) SetConfigBool(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigBool", reflect.TypeOf((*MockRepo)(nil).SetConfigBool), config)
}

// SetConfigInt mocks base method.
func (m *MockRepo) SetConfigInt(config ConfigInt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfigInt", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfigInt indicates an expected call of SetConfigInt.
func (mr *MockRepoMockRecorder) SetConfigInt(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigInt", reflect.TypeOf((*MockRepo)(nil).SetConfigInt), config)
}

// SetConfigIntIfNotExists mocks base method.
func (m *MockRepo) SetConfigIntIfNotExists(arg0 ConfigInt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfigIntIfNotExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfigIntIfNotExists indicates an expected call of SetConfigIntIfNotExists.
func (mr *MockRepoMockRecorder) SetConfigIntIfNotExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigIntIfNotExists", reflect.TypeOf((*MockRepo)(nil).SetConfigIntIfNotExists), arg0)
}

// SetConfigString mocks base method.
func (m *MockRepo) SetConfigString(config ConfigString) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfigString", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfigString indicates an expected call of SetConfigString.
func (mr *MockRepoMockRecorder) SetConfigString(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigString", reflect.TypeOf((*MockRepo)(nil).SetConfigString), config)
}

// SetHash mocks base method.
func (m *MockRepo) SetHash(arg0 StationID, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHash", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHash indicates an expected call of SetHash.
func (mr *MockRepoMockRecorder) SetHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHash", reflect.TypeOf((*MockRepo)(nil).SetHash), arg0, arg1)
}

// SetKasse mocks base method.
func (m *MockRepo) SetKasse(kasse Kasse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKasse", kasse)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKasse indicates an expected call of SetKasse.
func (mr *MockRepoMockRecorder) SetKasse(kasse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKasse", reflect.TypeOf((*MockRepo)(nil).SetKasse), kasse)
}

// SetProgram mocks base method.
func (m *MockRepo) SetProgram(arg0 Program) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProgram", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProgram indicates an expected call of SetProgram.
func (mr *MockRepoMockRecorder) SetProgram(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProgram", reflect.TypeOf((*MockRepo)(nil).SetProgram), arg0)
}

// SetProgramFromManagement mocks base method.
func (m *MockRepo) SetProgramFromManagement(ctx context.Context, program ManagementProgram) (Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProgramFromManagement", ctx, program)
	ret0, _ := ret[0].(Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProgramFromManagement indicates an expected call of SetProgramFromManagement.
func (mr *MockRepoMockRecorder) SetProgramFromManagement(ctx, program interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProgramFromManagement", reflect.TypeOf((*MockRepo)(nil).SetProgramFromManagement), ctx, program)
}

// SetStation mocks base method.
func (m *MockRepo) SetStation(station SetStation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStation", station)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStation indicates an expected call of SetStation.
func (mr *MockRepoMockRecorder) SetStation(station interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStation", reflect.TypeOf((*MockRepo)(nil).SetStation), station)
}

// SetStationConfigBool mocks base method.
func (m *MockRepo) SetStationConfigBool(config StationConfigBool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStationConfigBool", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStationConfigBool indicates an expected call of SetStationConfigBool.
func (mr *MockRepoMockRecorder) SetStationConfigBool(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStationConfigBool", reflect.TypeOf((*MockRepo)(nil).SetStationConfigBool), config)
}

// SetStationConfigInt mocks base method.
func (m *MockRepo) SetStationConfigInt(config StationConfigInt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStationConfigInt", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStationConfigInt indicates an expected call of SetStationConfigInt.
func (mr *MockRepoMockRecorder) SetStationConfigInt(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStationConfigInt", reflect.TypeOf((*MockRepo)(nil).SetStationConfigInt), config)
}

// SetStationConfigString mocks base method.
func (m *MockRepo) SetStationConfigString(config StationConfigString) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStationConfigString", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStationConfigString indicates an expected call of SetStationConfigString.
func (mr *MockRepoMockRecorder) SetStationConfigString(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStationConfigString", reflect.TypeOf((*MockRepo)(nil).SetStationConfigString), config)
}

// SetStationProgram mocks base method.
func (m *MockRepo) SetStationProgram(arg0 StationID, arg1 []StationProgram) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStationProgram", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStationProgram indicates an expected call of SetStationProgram.
func (mr *MockRepoMockRecorder) SetStationProgram(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStationProgram", reflect.TypeOf((*MockRepo)(nil).SetStationProgram), arg0, arg1)
}

// Station mocks base method.
func (m *MockRepo) Station(arg0 StationID) (SetStation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Station", arg0)
	ret0, _ := ret[0].(SetStation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Station indicates an expected call of Station.
func (mr *MockRepoMockRecorder) Station(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Station", reflect.TypeOf((*MockRepo)(nil).Station), arg0)
}

// StationConfig mocks base method.
func (m *MockRepo) StationConfig(arg0 StationID) (StationConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationConfig", arg0)
	ret0, _ := ret[0].(StationConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StationConfig indicates an expected call of StationConfig.
func (mr *MockRepoMockRecorder) StationConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationConfig", reflect.TypeOf((*MockRepo)(nil).StationConfig), arg0)
}

// StationProgram mocks base method.
func (m *MockRepo) StationProgram(arg0 StationID) ([]StationProgram, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationProgram", arg0)
	ret0, _ := ret[0].([]StationProgram)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StationProgram indicates an expected call of StationProgram.
func (mr *MockRepoMockRecorder) StationProgram(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationProgram", reflect.TypeOf((*MockRepo)(nil).StationProgram), arg0)
}

// Stations mocks base method.
func (m *MockRepo) Stations() ([]SetStation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stations")
	ret0, _ := ret[0].([]SetStation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stations indicates an expected call of Stations.
func (mr *MockRepoMockRecorder) Stations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stations", reflect.TypeOf((*MockRepo)(nil).Stations))
}

// StationsVariables mocks base method.
func (m *MockRepo) StationsVariables() ([]StationsVariables, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationsVariables")
	ret0, _ := ret[0].([]StationsVariables)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StationsVariables indicates an expected call of StationsVariables.
func (mr *MockRepoMockRecorder) StationsVariables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationsVariables", reflect.TypeOf((*MockRepo)(nil).StationsVariables))
}

// UpdateAdvertisingCampaignFromManagement mocks base method.
func (m *MockRepo) UpdateAdvertisingCampaignFromManagement(ctx context.Context, advert ManagementAdvertisingCampaign) (AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdvertisingCampaignFromManagement", ctx, advert)
	ret0, _ := ret[0].(AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdvertisingCampaignFromManagement indicates an expected call of UpdateAdvertisingCampaignFromManagement.
func (mr *MockRepoMockRecorder) UpdateAdvertisingCampaignFromManagement(ctx, advert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdvertisingCampaignFromManagement", reflect.TypeOf((*MockRepo)(nil).UpdateAdvertisingCampaignFromManagement), ctx, advert)
}

// UpdateUser mocks base method.
func (m *MockRepo) UpdateUser(userData UserData) (UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", userData)
	ret0, _ := ret[0].(UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepoMockRecorder) UpdateUser(userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepo)(nil).UpdateUser), userData)
}

// UpdateUserPassword mocks base method.
func (m *MockRepo) UpdateUserPassword(userData UpdatePasswordData) (UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", userData)
	ret0, _ := ret[0].(UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockRepoMockRecorder) UpdateUserPassword(userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockRepo)(nil).UpdateUserPassword), userData)
}

// User mocks base method.
func (m *MockRepo) User(login string) (UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", login)
	ret0, _ := ret[0].(UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockRepoMockRecorder) User(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockRepo)(nil).User), login)
}

// Users mocks base method.
func (m *MockRepo) Users() ([]UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].([]UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Users indicates an expected call of Users.
func (mr *MockRepoMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockRepo)(nil).Users))
}

// MockKasseSvc is a mock of KasseSvc interface.
type MockKasseSvc struct {
	ctrl     *gomock.Controller
	recorder *MockKasseSvcMockRecorder
}

// MockKasseSvcMockRecorder is the mock recorder for MockKasseSvc.
type MockKasseSvcMockRecorder struct {
	mock *MockKasseSvc
}

// NewMockKasseSvc creates a new mock instance.
func NewMockKasseSvc(ctrl *gomock.Controller) *MockKasseSvc {
	mock := &MockKasseSvc{ctrl: ctrl}
	mock.recorder = &MockKasseSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKasseSvc) EXPECT() *MockKasseSvcMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockKasseSvc) Info() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockKasseSvcMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockKasseSvc)(nil).Info))
}

// MockWeatherSvc is a mock of WeatherSvc interface.
type MockWeatherSvc struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherSvcMockRecorder
}

// MockWeatherSvcMockRecorder is the mock recorder for MockWeatherSvc.
type MockWeatherSvcMockRecorder struct {
	mock *MockWeatherSvc
}

// NewMockWeatherSvc creates a new mock instance.
func NewMockWeatherSvc(ctrl *gomock.Controller) *MockWeatherSvc {
	mock := &MockWeatherSvc{ctrl: ctrl}
	mock.recorder = &MockWeatherSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherSvc) EXPECT() *MockWeatherSvcMockRecorder {
	return m.recorder
}

// CurrentTemperature mocks base method.
func (m *MockWeatherSvc) CurrentTemperature() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentTemperature")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentTemperature indicates an expected call of CurrentTemperature.
func (mr *MockWeatherSvcMockRecorder) CurrentTemperature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentTemperature", reflect.TypeOf((*MockWeatherSvc)(nil).CurrentTemperature))
}

// MockHardwareAccessLayer is a mock of HardwareAccessLayer interface.
type MockHardwareAccessLayer struct {
	ctrl     *gomock.Controller
	recorder *MockHardwareAccessLayerMockRecorder
}

// MockHardwareAccessLayerMockRecorder is the mock recorder for MockHardwareAccessLayer.
type MockHardwareAccessLayerMockRecorder struct {
	mock *MockHardwareAccessLayer
}

// NewMockHardwareAccessLayer creates a new mock instance.
func NewMockHardwareAccessLayer(ctrl *gomock.Controller) *MockHardwareAccessLayer {
	mock := &MockHardwareAccessLayer{ctrl: ctrl}
	mock.recorder = &MockHardwareAccessLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHardwareAccessLayer) EXPECT() *MockHardwareAccessLayerMockRecorder {
	return m.recorder
}

// DispenserStop mocks base method.
func (m *MockHardwareAccessLayer) DispenserStop(stationID StationID, cfg RelayConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispenserStop", stationID, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispenserStop indicates an expected call of DispenserStop.
func (mr *MockHardwareAccessLayerMockRecorder) DispenserStop(stationID, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispenserStop", reflect.TypeOf((*MockHardwareAccessLayer)(nil).DispenserStop), stationID, cfg)
}

// GetLevel mocks base method.
func (m *MockHardwareAccessLayer) GetLevel() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockHardwareAccessLayerMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockHardwareAccessLayer)(nil).GetLevel))
}

// MeasureVolumeMilliliters mocks base method.
func (m *MockHardwareAccessLayer) MeasureVolumeMilliliters(volume int64, stationID StationID, startCfg, stopCfg RelayConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeasureVolumeMilliliters", volume, stationID, startCfg, stopCfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// MeasureVolumeMilliliters indicates an expected call of MeasureVolumeMilliliters.
func (mr *MockHardwareAccessLayerMockRecorder) MeasureVolumeMilliliters(volume, stationID, startCfg, stopCfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeasureVolumeMilliliters", reflect.TypeOf((*MockHardwareAccessLayer)(nil).MeasureVolumeMilliliters), volume, stationID, startCfg, stopCfg)
}

// RunProgram mocks base method.
func (m *MockHardwareAccessLayer) RunProgram(id int32, cfg RelayConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunProgram", id, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunProgram indicates an expected call of RunProgram.
func (mr *MockHardwareAccessLayerMockRecorder) RunProgram(id, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunProgram", reflect.TypeOf((*MockHardwareAccessLayer)(nil).RunProgram), id, cfg)
}

// Volume mocks base method.
func (m *MockHardwareAccessLayer) Volume() (int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Volume")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Volume indicates an expected call of Volume.
func (mr *MockHardwareAccessLayerMockRecorder) Volume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Volume", reflect.TypeOf((*MockHardwareAccessLayer)(nil).Volume))
}

// MockControlBoard is a mock of ControlBoard interface.
type MockControlBoard struct {
	ctrl     *gomock.Controller
	recorder *MockControlBoardMockRecorder
}

// MockControlBoardMockRecorder is the mock recorder for MockControlBoard.
type MockControlBoardMockRecorder struct {
	mock *MockControlBoard
}

// NewMockControlBoard creates a new mock instance.
func NewMockControlBoard(ctrl *gomock.Controller) *MockControlBoard {
	mock := &MockControlBoard{ctrl: ctrl}
	mock.recorder = &MockControlBoardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControlBoard) EXPECT() *MockControlBoardMockRecorder {
	return m.recorder
}

// MyPosition mocks base method.
func (m *MockControlBoard) MyPosition() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyPosition")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyPosition indicates an expected call of MyPosition.
func (mr *MockControlBoardMockRecorder) MyPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyPosition", reflect.TypeOf((*MockControlBoard)(nil).MyPosition))
}

// RunConfig mocks base method.
func (m *MockControlBoard) RunConfig(config RelayConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunConfig", config)
}

// RunConfig indicates an expected call of RunConfig.
func (mr *MockControlBoardMockRecorder) RunConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunConfig", reflect.TypeOf((*MockControlBoard)(nil).RunConfig), config)
}

// StopAll mocks base method.
func (m *MockControlBoard) StopAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopAll indicates an expected call of StopAll.
func (mr *MockControlBoardMockRecorder) StopAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAll", reflect.TypeOf((*MockControlBoard)(nil).StopAll))
}

// MockManagementRabbitWorker is a mock of ManagementRabbitWorker interface.
type MockManagementRabbitWorker struct {
	ctrl     *gomock.Controller
	recorder *MockManagementRabbitWorkerMockRecorder
}

// MockManagementRabbitWorkerMockRecorder is the mock recorder for MockManagementRabbitWorker.
type MockManagementRabbitWorkerMockRecorder struct {
	mock *MockManagementRabbitWorker
}

// NewMockManagementRabbitWorker creates a new mock instance.
func NewMockManagementRabbitWorker(ctrl *gomock.Controller) *MockManagementRabbitWorker {
	mock := &MockManagementRabbitWorker{ctrl: ctrl}
	mock.recorder = &MockManagementRabbitWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementRabbitWorker) EXPECT() *MockManagementRabbitWorkerMockRecorder {
	return m.recorder
}

// SendAdvertisingCampaign mocks base method.
func (m *MockManagementRabbitWorker) SendAdvertisingCampaign(arg0 AdvertisingCampaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAdvertisingCampaign", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAdvertisingCampaign indicates an expected call of SendAdvertisingCampaign.
func (mr *MockManagementRabbitWorkerMockRecorder) SendAdvertisingCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAdvertisingCampaign", reflect.TypeOf((*MockManagementRabbitWorker)(nil).SendAdvertisingCampaign), arg0)
}

// SendCollectionReport mocks base method.
func (m *MockManagementRabbitWorker) SendCollectionReport(arg0 CollectionReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCollectionReport", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCollectionReport indicates an expected call of SendCollectionReport.
func (mr *MockManagementRabbitWorkerMockRecorder) SendCollectionReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCollectionReport", reflect.TypeOf((*MockManagementRabbitWorker)(nil).SendCollectionReport), arg0)
}

// SendMoneyReport mocks base method.
func (m *MockManagementRabbitWorker) SendMoneyReport(arg0 MngtMoneyReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMoneyReport", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMoneyReport indicates an expected call of SendMoneyReport.
func (mr *MockManagementRabbitWorkerMockRecorder) SendMoneyReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMoneyReport", reflect.TypeOf((*MockManagementRabbitWorker)(nil).SendMoneyReport), arg0)
}

// SendProgram mocks base method.
func (m *MockManagementRabbitWorker) SendProgram(arg0 Program) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendProgram", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendProgram indicates an expected call of SendProgram.
func (mr *MockManagementRabbitWorkerMockRecorder) SendProgram(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendProgram", reflect.TypeOf((*MockManagementRabbitWorker)(nil).SendProgram), arg0)
}

// SendStatus mocks base method.
func (m *MockManagementRabbitWorker) SendStatus(arg0 StatusReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendStatus indicates an expected call of SendStatus.
func (mr *MockManagementRabbitWorkerMockRecorder) SendStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendStatus", reflect.TypeOf((*MockManagementRabbitWorker)(nil).SendStatus), arg0)
}

// Status mocks base method.
func (m *MockManagementRabbitWorker) Status() ServiceStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(ServiceStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockManagementRabbitWorkerMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockManagementRabbitWorker)(nil).Status))
}

// MockKaspiService is a mock of KaspiService interface.
type MockKaspiService struct {
	ctrl     *gomock.Controller
	recorder *MockKaspiServiceMockRecorder
}

// MockKaspiServiceMockRecorder is the mock recorder for MockKaspiService.
type MockKaspiServiceMockRecorder struct {
	mock *MockKaspiService
}

// NewMockKaspiService creates a new mock instance.
func NewMockKaspiService(ctrl *gomock.Controller) *MockKaspiService {
	mock := &MockKaspiService{ctrl: ctrl}
	mock.recorder = &MockKaspiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKaspiService) EXPECT() *MockKaspiServiceMockRecorder {
	return m.recorder
}

// SendAnswer mocks base method.
func (m *MockKaspiService) SendAnswer(arg0 KaspiAnswer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAnswer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAnswer indicates an expected call of SendAnswer.
func (mr *MockKaspiServiceMockRecorder) SendAnswer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAnswer", reflect.TypeOf((*MockKaspiService)(nil).SendAnswer), arg0)
}

// Status mocks base method.
func (m *MockKaspiService) Status() ServiceStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(ServiceStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockKaspiServiceMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockKaspiService)(nil).Status))
}
