// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DiaElectronics/lea-central-wash/cmd/storage/internal/app (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	app "github.com/DiaElectronics/lea-central-wash/cmd/storage/internal/app"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockRepo is a mock of Repo interface
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddAdvertisingCampaign mocks base method
func (m *MockRepo) AddAdvertisingCampaign(arg0 app.AdvertisingCampaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdvertisingCampaign", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAdvertisingCampaign indicates an expected call of AddAdvertisingCampaign
func (mr *MockRepoMockRecorder) AddAdvertisingCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdvertisingCampaign", reflect.TypeOf((*MockRepo)(nil).AddAdvertisingCampaign), arg0)
}

// AddOpenStationLog mocks base method
func (m *MockRepo) AddOpenStationLog(arg0 app.StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOpenStationLog", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOpenStationLog indicates an expected call of AddOpenStationLog
func (mr *MockRepoMockRecorder) AddOpenStationLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOpenStationLog", reflect.TypeOf((*MockRepo)(nil).AddOpenStationLog), arg0)
}

// AddStation mocks base method
func (m *MockRepo) AddStation(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStation indicates an expected call of AddStation
func (mr *MockRepoMockRecorder) AddStation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStation", reflect.TypeOf((*MockRepo)(nil).AddStation), arg0)
}

// AddUpdateConfig mocks base method
func (m *MockRepo) AddUpdateConfig(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUpdateConfig", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUpdateConfig indicates an expected call of AddUpdateConfig
func (mr *MockRepoMockRecorder) AddUpdateConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUpdateConfig", reflect.TypeOf((*MockRepo)(nil).AddUpdateConfig), arg0)
}

// AdvertisingCampaign mocks base method
func (m *MockRepo) AdvertisingCampaign(arg0, arg1 *time.Time) ([]app.AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvertisingCampaign", arg0, arg1)
	ret0, _ := ret[0].([]app.AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdvertisingCampaign indicates an expected call of AdvertisingCampaign
func (mr *MockRepoMockRecorder) AdvertisingCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertisingCampaign", reflect.TypeOf((*MockRepo)(nil).AdvertisingCampaign), arg0, arg1)
}

// AdvertisingCampaignByID mocks base method
func (m *MockRepo) AdvertisingCampaignByID(arg0 int64) (*app.AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvertisingCampaignByID", arg0)
	ret0, _ := ret[0].(*app.AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdvertisingCampaignByID indicates an expected call of AdvertisingCampaignByID
func (mr *MockRepoMockRecorder) AdvertisingCampaignByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertisingCampaignByID", reflect.TypeOf((*MockRepo)(nil).AdvertisingCampaignByID), arg0)
}

// CardReaderConfig mocks base method
func (m *MockRepo) CardReaderConfig(arg0 app.StationID) (*app.CardReaderConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CardReaderConfig", arg0)
	ret0, _ := ret[0].(*app.CardReaderConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CardReaderConfig indicates an expected call of CardReaderConfig
func (mr *MockRepoMockRecorder) CardReaderConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CardReaderConfig", reflect.TypeOf((*MockRepo)(nil).CardReaderConfig), arg0)
}

// CheckDB mocks base method
func (m *MockRepo) CheckDB() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDB")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDB indicates an expected call of CheckDB
func (mr *MockRepoMockRecorder) CheckDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDB", reflect.TypeOf((*MockRepo)(nil).CheckDB))
}

// CollectionReports mocks base method
func (m *MockRepo) CollectionReports(arg0 app.StationID, arg1, arg2 *time.Time) ([]app.CollectionReportWithUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionReports", arg0, arg1, arg2)
	ret0, _ := ret[0].([]app.CollectionReportWithUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionReports indicates an expected call of CollectionReports
func (mr *MockRepoMockRecorder) CollectionReports(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionReports", reflect.TypeOf((*MockRepo)(nil).CollectionReports), arg0, arg1, arg2)
}

// CreateUser mocks base method
func (m *MockRepo) CreateUser(arg0 app.UserData) (app.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(app.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockRepoMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepo)(nil).CreateUser), arg0)
}

// CurrentMoney mocks base method
func (m *MockRepo) CurrentMoney(arg0 app.StationID) (app.MoneyReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentMoney", arg0)
	ret0, _ := ret[0].(app.MoneyReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentMoney indicates an expected call of CurrentMoney
func (mr *MockRepoMockRecorder) CurrentMoney(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentMoney", reflect.TypeOf((*MockRepo)(nil).CurrentMoney), arg0)
}

// DelAdvertisingCampaign mocks base method
func (m *MockRepo) DelAdvertisingCampaign(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelAdvertisingCampaign", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelAdvertisingCampaign indicates an expected call of DelAdvertisingCampaign
func (mr *MockRepoMockRecorder) DelAdvertisingCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelAdvertisingCampaign", reflect.TypeOf((*MockRepo)(nil).DelAdvertisingCampaign), arg0)
}

// DelStation mocks base method
func (m *MockRepo) DelStation(arg0 app.StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelStation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelStation indicates an expected call of DelStation
func (mr *MockRepoMockRecorder) DelStation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelStation", reflect.TypeOf((*MockRepo)(nil).DelStation), arg0)
}

// DeleteUser mocks base method
func (m *MockRepo) DeleteUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockRepoMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepo)(nil).DeleteUser), arg0)
}

// EditAdvertisingCampaign mocks base method
func (m *MockRepo) EditAdvertisingCampaign(arg0 app.AdvertisingCampaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditAdvertisingCampaign", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditAdvertisingCampaign indicates an expected call of EditAdvertisingCampaign
func (mr *MockRepoMockRecorder) EditAdvertisingCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditAdvertisingCampaign", reflect.TypeOf((*MockRepo)(nil).EditAdvertisingCampaign), arg0)
}

// GetCurrentAdvertisingCampaigns mocks base method
func (m *MockRepo) GetCurrentAdvertisingCampaigns() ([]app.AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentAdvertisingCampaigns")
	ret0, _ := ret[0].([]app.AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentAdvertisingCampaigns indicates an expected call of GetCurrentAdvertisingCampaigns
func (mr *MockRepoMockRecorder) GetCurrentAdvertisingCampaigns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentAdvertisingCampaigns", reflect.TypeOf((*MockRepo)(nil).GetCurrentAdvertisingCampaigns))
}

// Info mocks base method
func (m *MockRepo) Info() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(string)
	return ret0
}

// Info indicates an expected call of Info
func (mr *MockRepoMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockRepo)(nil).Info))
}

// Kasse mocks base method
func (m *MockRepo) Kasse() (app.Kasse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kasse")
	ret0, _ := ret[0].(app.Kasse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Kasse indicates an expected call of Kasse
func (mr *MockRepoMockRecorder) Kasse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kasse", reflect.TypeOf((*MockRepo)(nil).Kasse))
}

// LastCollectionReport mocks base method
func (m *MockRepo) LastCollectionReport(arg0 app.StationID) (app.CollectionReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCollectionReport", arg0)
	ret0, _ := ret[0].(app.CollectionReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastCollectionReport indicates an expected call of LastCollectionReport
func (mr *MockRepoMockRecorder) LastCollectionReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCollectionReport", reflect.TypeOf((*MockRepo)(nil).LastCollectionReport), arg0)
}

// LastMoneyReport mocks base method
func (m *MockRepo) LastMoneyReport(arg0 app.StationID) (app.MoneyReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastMoneyReport", arg0)
	ret0, _ := ret[0].(app.MoneyReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastMoneyReport indicates an expected call of LastMoneyReport
func (mr *MockRepoMockRecorder) LastMoneyReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastMoneyReport", reflect.TypeOf((*MockRepo)(nil).LastMoneyReport), arg0)
}

// LastUpdateConfig mocks base method
func (m *MockRepo) LastUpdateConfig() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastUpdateConfig")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastUpdateConfig indicates an expected call of LastUpdateConfig
func (mr *MockRepoMockRecorder) LastUpdateConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastUpdateConfig", reflect.TypeOf((*MockRepo)(nil).LastUpdateConfig))
}

// Load mocks base method
func (m *MockRepo) Load(arg0 app.StationID, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockRepoMockRecorder) Load(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockRepo)(nil).Load), arg0, arg1)
}

// LoadHash mocks base method
func (m *MockRepo) LoadHash() ([]app.StationID, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadHash")
	ret0, _ := ret[0].([]app.StationID)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadHash indicates an expected call of LoadHash
func (mr *MockRepoMockRecorder) LoadHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadHash", reflect.TypeOf((*MockRepo)(nil).LoadHash))
}

// MoneyReport mocks base method
func (m *MockRepo) MoneyReport(arg0 app.StationID, arg1, arg2 time.Time) (app.MoneyReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoneyReport", arg0, arg1, arg2)
	ret0, _ := ret[0].(app.MoneyReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoneyReport indicates an expected call of MoneyReport
func (mr *MockRepoMockRecorder) MoneyReport(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoneyReport", reflect.TypeOf((*MockRepo)(nil).MoneyReport), arg0, arg1, arg2)
}

// Programs mocks base method
func (m *MockRepo) Programs(arg0 *int64) ([]app.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Programs", arg0)
	ret0, _ := ret[0].([]app.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Programs indicates an expected call of Programs
func (mr *MockRepoMockRecorder) Programs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Programs", reflect.TypeOf((*MockRepo)(nil).Programs), arg0)
}

// RelayReportCurrent mocks base method
func (m *MockRepo) RelayReportCurrent(arg0 *app.StationID) (app.StationsStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayReportCurrent", arg0)
	ret0, _ := ret[0].(app.StationsStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelayReportCurrent indicates an expected call of RelayReportCurrent
func (mr *MockRepoMockRecorder) RelayReportCurrent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayReportCurrent", reflect.TypeOf((*MockRepo)(nil).RelayReportCurrent), arg0)
}

// RelayReportDates mocks base method
func (m *MockRepo) RelayReportDates(arg0 *app.StationID, arg1, arg2 time.Time) (app.StationsStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayReportDates", arg0, arg1, arg2)
	ret0, _ := ret[0].(app.StationsStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelayReportDates indicates an expected call of RelayReportDates
func (mr *MockRepoMockRecorder) RelayReportDates(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayReportDates", reflect.TypeOf((*MockRepo)(nil).RelayReportDates), arg0, arg1, arg2)
}

// RelayStatReport mocks base method
func (m *MockRepo) RelayStatReport(arg0 app.StationID, arg1, arg2 time.Time) (app.RelayReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayStatReport", arg0, arg1, arg2)
	ret0, _ := ret[0].(app.RelayReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelayStatReport indicates an expected call of RelayStatReport
func (mr *MockRepoMockRecorder) RelayStatReport(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayStatReport", reflect.TypeOf((*MockRepo)(nil).RelayStatReport), arg0, arg1, arg2)
}

// ResetStationStat mocks base method
func (m *MockRepo) ResetStationStat(arg0 app.StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetStationStat", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetStationStat indicates an expected call of ResetStationStat
func (mr *MockRepoMockRecorder) ResetStationStat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetStationStat", reflect.TypeOf((*MockRepo)(nil).ResetStationStat), arg0)
}

// Save mocks base method
func (m *MockRepo) Save(arg0 app.StationID, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockRepoMockRecorder) Save(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepo)(nil).Save), arg0, arg1, arg2)
}

// SaveCollectionReport mocks base method
func (m *MockRepo) SaveCollectionReport(arg0 int, arg1 app.StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCollectionReport", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCollectionReport indicates an expected call of SaveCollectionReport
func (mr *MockRepoMockRecorder) SaveCollectionReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCollectionReport", reflect.TypeOf((*MockRepo)(nil).SaveCollectionReport), arg0, arg1)
}

// SaveIfNotExists mocks base method
func (m *MockRepo) SaveIfNotExists(arg0 app.StationID, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveIfNotExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveIfNotExists indicates an expected call of SaveIfNotExists
func (mr *MockRepoMockRecorder) SaveIfNotExists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIfNotExists", reflect.TypeOf((*MockRepo)(nil).SaveIfNotExists), arg0, arg1, arg2)
}

// SaveMoneyReport mocks base method
func (m *MockRepo) SaveMoneyReport(arg0 app.MoneyReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMoneyReport", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMoneyReport indicates an expected call of SaveMoneyReport
func (mr *MockRepoMockRecorder) SaveMoneyReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMoneyReport", reflect.TypeOf((*MockRepo)(nil).SaveMoneyReport), arg0)
}

// SaveRelayReport mocks base method
func (m *MockRepo) SaveRelayReport(arg0 app.RelayReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRelayReport", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRelayReport indicates an expected call of SaveRelayReport
func (mr *MockRepoMockRecorder) SaveRelayReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRelayReport", reflect.TypeOf((*MockRepo)(nil).SaveRelayReport), arg0)
}

// SetCardReaderConfig mocks base method
func (m *MockRepo) SetCardReaderConfig(arg0 app.CardReaderConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCardReaderConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCardReaderConfig indicates an expected call of SetCardReaderConfig
func (mr *MockRepoMockRecorder) SetCardReaderConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCardReaderConfig", reflect.TypeOf((*MockRepo)(nil).SetCardReaderConfig), arg0)
}

// SetHash mocks base method
func (m *MockRepo) SetHash(arg0 app.StationID, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHash", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHash indicates an expected call of SetHash
func (mr *MockRepoMockRecorder) SetHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHash", reflect.TypeOf((*MockRepo)(nil).SetHash), arg0, arg1)
}

// SetKasse mocks base method
func (m *MockRepo) SetKasse(arg0 app.Kasse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKasse", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKasse indicates an expected call of SetKasse
func (mr *MockRepoMockRecorder) SetKasse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKasse", reflect.TypeOf((*MockRepo)(nil).SetKasse), arg0)
}

// SetProgram mocks base method
func (m *MockRepo) SetProgram(arg0 app.Program) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProgram", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProgram indicates an expected call of SetProgram
func (mr *MockRepoMockRecorder) SetProgram(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProgram", reflect.TypeOf((*MockRepo)(nil).SetProgram), arg0)
}

// SetStation mocks base method
func (m *MockRepo) SetStation(arg0 app.SetStation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStation indicates an expected call of SetStation
func (mr *MockRepoMockRecorder) SetStation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStation", reflect.TypeOf((*MockRepo)(nil).SetStation), arg0)
}

// SetStationProgram mocks base method
func (m *MockRepo) SetStationProgram(arg0 app.StationID, arg1 []app.StationProgram) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStationProgram", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStationProgram indicates an expected call of SetStationProgram
func (mr *MockRepoMockRecorder) SetStationProgram(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStationProgram", reflect.TypeOf((*MockRepo)(nil).SetStationProgram), arg0, arg1)
}

// Station mocks base method
func (m *MockRepo) Station(arg0 app.StationID) (app.SetStation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Station", arg0)
	ret0, _ := ret[0].(app.SetStation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Station indicates an expected call of Station
func (mr *MockRepoMockRecorder) Station(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Station", reflect.TypeOf((*MockRepo)(nil).Station), arg0)
}

// StationConfig mocks base method
func (m *MockRepo) StationConfig(arg0 app.StationID) (app.StationConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationConfig", arg0)
	ret0, _ := ret[0].(app.StationConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StationConfig indicates an expected call of StationConfig
func (mr *MockRepoMockRecorder) StationConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationConfig", reflect.TypeOf((*MockRepo)(nil).StationConfig), arg0)
}

// StationProgram mocks base method
func (m *MockRepo) StationProgram(arg0 app.StationID) ([]app.StationProgram, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationProgram", arg0)
	ret0, _ := ret[0].([]app.StationProgram)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StationProgram indicates an expected call of StationProgram
func (mr *MockRepoMockRecorder) StationProgram(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationProgram", reflect.TypeOf((*MockRepo)(nil).StationProgram), arg0)
}

// Stations mocks base method
func (m *MockRepo) Stations() ([]app.SetStation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stations")
	ret0, _ := ret[0].([]app.SetStation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stations indicates an expected call of Stations
func (mr *MockRepoMockRecorder) Stations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stations", reflect.TypeOf((*MockRepo)(nil).Stations))
}

// StationsVariables mocks base method
func (m *MockRepo) StationsVariables() ([]app.StationsVariables, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationsVariables")
	ret0, _ := ret[0].([]app.StationsVariables)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StationsVariables indicates an expected call of StationsVariables
func (mr *MockRepoMockRecorder) StationsVariables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationsVariables", reflect.TypeOf((*MockRepo)(nil).StationsVariables))
}

// UpdateUser mocks base method
func (m *MockRepo) UpdateUser(arg0 app.UserData) (app.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(app.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockRepoMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepo)(nil).UpdateUser), arg0)
}

// UpdateUserPassword mocks base method
func (m *MockRepo) UpdateUserPassword(arg0 app.UpdatePasswordData) (app.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0)
	ret0, _ := ret[0].(app.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword
func (mr *MockRepoMockRecorder) UpdateUserPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockRepo)(nil).UpdateUserPassword), arg0)
}

// User mocks base method
func (m *MockRepo) User(arg0 string) (app.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0)
	ret0, _ := ret[0].(app.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User
func (mr *MockRepoMockRecorder) User(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockRepo)(nil).User), arg0)
}

// Users mocks base method
func (m *MockRepo) Users() ([]app.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].([]app.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Users indicates an expected call of Users
func (mr *MockRepoMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockRepo)(nil).Users))
}
