// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DiaElectronics/lea-central-wash/cmd/storage/internal/app (interfaces: App)

// Package mocks is a generated GoMock package.
package mocks

import (
	app "github.com/DiaElectronics/lea-central-wash/cmd/storage/internal/app"
	storageapi "github.com/DiaElectronics/lea-central-wash/storageapi"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockApp is a mock of App interface
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// AddAdvertisingCampaign mocks base method
func (m *MockApp) AddAdvertisingCampaign(arg0 *storageapi.Profile, arg1 app.AdvertisingCampaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdvertisingCampaign", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAdvertisingCampaign indicates an expected call of AddAdvertisingCampaign
func (mr *MockAppMockRecorder) AddAdvertisingCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdvertisingCampaign", reflect.TypeOf((*MockApp)(nil).AddAdvertisingCampaign), arg0, arg1)
}

// AddServiceAmount mocks base method
func (m *MockApp) AddServiceAmount(arg0 app.StationID, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddServiceAmount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddServiceAmount indicates an expected call of AddServiceAmount
func (mr *MockAppMockRecorder) AddServiceAmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceAmount", reflect.TypeOf((*MockApp)(nil).AddServiceAmount), arg0, arg1)
}

// AdvertisingCampaign mocks base method
func (m *MockApp) AdvertisingCampaign(arg0 *storageapi.Profile, arg1, arg2 *time.Time) ([]app.AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvertisingCampaign", arg0, arg1, arg2)
	ret0, _ := ret[0].([]app.AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdvertisingCampaign indicates an expected call of AdvertisingCampaign
func (mr *MockAppMockRecorder) AdvertisingCampaign(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertisingCampaign", reflect.TypeOf((*MockApp)(nil).AdvertisingCampaign), arg0, arg1, arg2)
}

// AdvertisingCampaignByID mocks base method
func (m *MockApp) AdvertisingCampaignByID(arg0 *storageapi.Profile, arg1 int64) (*app.AdvertisingCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvertisingCampaignByID", arg0, arg1)
	ret0, _ := ret[0].(*app.AdvertisingCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdvertisingCampaignByID indicates an expected call of AdvertisingCampaignByID
func (mr *MockAppMockRecorder) AdvertisingCampaignByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertisingCampaignByID", reflect.TypeOf((*MockApp)(nil).AdvertisingCampaignByID), arg0, arg1)
}

// CardReaderConfig mocks base method
func (m *MockApp) CardReaderConfig(arg0 app.StationID) (*app.CardReaderConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CardReaderConfig", arg0)
	ret0, _ := ret[0].(*app.CardReaderConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CardReaderConfig indicates an expected call of CardReaderConfig
func (mr *MockAppMockRecorder) CardReaderConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CardReaderConfig", reflect.TypeOf((*MockApp)(nil).CardReaderConfig), arg0)
}

// CheckDiscounts mocks base method
func (m *MockApp) CheckDiscounts() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDiscounts")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDiscounts indicates an expected call of CheckDiscounts
func (mr *MockAppMockRecorder) CheckDiscounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDiscounts", reflect.TypeOf((*MockApp)(nil).CheckDiscounts))
}

// CollectionReports mocks base method
func (m *MockApp) CollectionReports(arg0 app.StationID, arg1, arg2 *time.Time) ([]app.CollectionReportWithUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionReports", arg0, arg1, arg2)
	ret0, _ := ret[0].([]app.CollectionReportWithUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionReports indicates an expected call of CollectionReports
func (mr *MockAppMockRecorder) CollectionReports(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionReports", reflect.TypeOf((*MockApp)(nil).CollectionReports), arg0, arg1, arg2)
}

// CreateUser mocks base method
func (m *MockApp) CreateUser(arg0 app.UserData, arg1 *storageapi.Profile) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockAppMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockApp)(nil).CreateUser), arg0, arg1)
}

// DelAdvertisingCampaign mocks base method
func (m *MockApp) DelAdvertisingCampaign(arg0 *storageapi.Profile, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelAdvertisingCampaign", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelAdvertisingCampaign indicates an expected call of DelAdvertisingCampaign
func (mr *MockAppMockRecorder) DelAdvertisingCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelAdvertisingCampaign", reflect.TypeOf((*MockApp)(nil).DelAdvertisingCampaign), arg0, arg1)
}

// DelStation mocks base method
func (m *MockApp) DelStation(arg0 app.StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelStation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelStation indicates an expected call of DelStation
func (mr *MockAppMockRecorder) DelStation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelStation", reflect.TypeOf((*MockApp)(nil).DelStation), arg0)
}

// DeleteUser mocks base method
func (m *MockApp) DeleteUser(arg0 string, arg1 *storageapi.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockAppMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockApp)(nil).DeleteUser), arg0, arg1)
}

// EditAdvertisingCampaign mocks base method
func (m *MockApp) EditAdvertisingCampaign(arg0 *storageapi.Profile, arg1 app.AdvertisingCampaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditAdvertisingCampaign", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditAdvertisingCampaign indicates an expected call of EditAdvertisingCampaign
func (mr *MockAppMockRecorder) EditAdvertisingCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditAdvertisingCampaign", reflect.TypeOf((*MockApp)(nil).EditAdvertisingCampaign), arg0, arg1)
}

// Get mocks base method
func (m *MockApp) Get(arg0 app.StationID) (app.StationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(app.StationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAppMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApp)(nil).Get), arg0)
}

// GetStationDiscount mocks base method
func (m *MockApp) GetStationDiscount(arg0 app.StationID) (*app.StationDiscount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationDiscount", arg0)
	ret0, _ := ret[0].(*app.StationDiscount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationDiscount indicates an expected call of GetStationDiscount
func (mr *MockAppMockRecorder) GetStationDiscount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationDiscount", reflect.TypeOf((*MockApp)(nil).GetStationDiscount), arg0)
}

// Info mocks base method
func (m *MockApp) Info() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(string)
	return ret0
}

// Info indicates an expected call of Info
func (mr *MockAppMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockApp)(nil).Info))
}

// IsEnabled mocks base method
func (m *MockApp) IsEnabled(arg0 *app.UserData) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled
func (mr *MockAppMockRecorder) IsEnabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockApp)(nil).IsEnabled), arg0)
}

// Kasse mocks base method
func (m *MockApp) Kasse() (app.Kasse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kasse")
	ret0, _ := ret[0].(app.Kasse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Kasse indicates an expected call of Kasse
func (mr *MockAppMockRecorder) Kasse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kasse", reflect.TypeOf((*MockApp)(nil).Kasse))
}

// Load mocks base method
func (m *MockApp) Load(arg0 app.StationID, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockAppMockRecorder) Load(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockApp)(nil).Load), arg0, arg1)
}

// LoadMoneyReport mocks base method
func (m *MockApp) LoadMoneyReport(arg0 app.StationID) (*app.MoneyReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadMoneyReport", arg0)
	ret0, _ := ret[0].(*app.MoneyReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadMoneyReport indicates an expected call of LoadMoneyReport
func (mr *MockAppMockRecorder) LoadMoneyReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadMoneyReport", reflect.TypeOf((*MockApp)(nil).LoadMoneyReport), arg0)
}

// OpenStation mocks base method
func (m *MockApp) OpenStation(arg0 app.StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenStation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenStation indicates an expected call of OpenStation
func (mr *MockAppMockRecorder) OpenStation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenStation", reflect.TypeOf((*MockApp)(nil).OpenStation), arg0)
}

// Ping mocks base method
func (m *MockApp) Ping(arg0 app.StationID, arg1, arg2 int, arg3 string) app.StationData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(app.StationData)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockAppMockRecorder) Ping(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockApp)(nil).Ping), arg0, arg1, arg2, arg3)
}

// PressButton mocks base method
func (m *MockApp) PressButton(arg0 app.StationID, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PressButton", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PressButton indicates an expected call of PressButton
func (mr *MockAppMockRecorder) PressButton(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PressButton", reflect.TypeOf((*MockApp)(nil).PressButton), arg0, arg1)
}

// Programs mocks base method
func (m *MockApp) Programs(arg0 *int64) ([]app.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Programs", arg0)
	ret0, _ := ret[0].([]app.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Programs indicates an expected call of Programs
func (mr *MockAppMockRecorder) Programs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Programs", reflect.TypeOf((*MockApp)(nil).Programs), arg0)
}

// RelayReportCurrent mocks base method
func (m *MockApp) RelayReportCurrent(arg0 *storageapi.Profile, arg1 *app.StationID) (app.StationsStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayReportCurrent", arg0, arg1)
	ret0, _ := ret[0].(app.StationsStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelayReportCurrent indicates an expected call of RelayReportCurrent
func (mr *MockAppMockRecorder) RelayReportCurrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayReportCurrent", reflect.TypeOf((*MockApp)(nil).RelayReportCurrent), arg0, arg1)
}

// RelayReportDates mocks base method
func (m *MockApp) RelayReportDates(arg0 *storageapi.Profile, arg1 *app.StationID, arg2, arg3 time.Time) (app.StationsStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayReportDates", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(app.StationsStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelayReportDates indicates an expected call of RelayReportDates
func (mr *MockAppMockRecorder) RelayReportDates(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayReportDates", reflect.TypeOf((*MockApp)(nil).RelayReportDates), arg0, arg1, arg2, arg3)
}

// ResetStationStat mocks base method
func (m *MockApp) ResetStationStat(arg0 *storageapi.Profile, arg1 app.StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetStationStat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetStationStat indicates an expected call of ResetStationStat
func (mr *MockAppMockRecorder) ResetStationStat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetStationStat", reflect.TypeOf((*MockApp)(nil).ResetStationStat), arg0, arg1)
}

// RunProgram mocks base method
func (m *MockApp) RunProgram(arg0 app.StationID, arg1 int64, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunProgram", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunProgram indicates an expected call of RunProgram
func (mr *MockAppMockRecorder) RunProgram(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunProgram", reflect.TypeOf((*MockApp)(nil).RunProgram), arg0, arg1, arg2)
}

// Save mocks base method
func (m *MockApp) Save(arg0 app.StationID, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAppMockRecorder) Save(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockApp)(nil).Save), arg0, arg1, arg2)
}

// SaveCollectionReport mocks base method
func (m *MockApp) SaveCollectionReport(arg0 *storageapi.Profile, arg1 app.StationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCollectionReport", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCollectionReport indicates an expected call of SaveCollectionReport
func (mr *MockAppMockRecorder) SaveCollectionReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCollectionReport", reflect.TypeOf((*MockApp)(nil).SaveCollectionReport), arg0, arg1)
}

// SaveIfNotExists mocks base method
func (m *MockApp) SaveIfNotExists(arg0 app.StationID, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveIfNotExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveIfNotExists indicates an expected call of SaveIfNotExists
func (mr *MockAppMockRecorder) SaveIfNotExists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIfNotExists", reflect.TypeOf((*MockApp)(nil).SaveIfNotExists), arg0, arg1, arg2)
}

// SaveMoneyReport mocks base method
func (m *MockApp) SaveMoneyReport(arg0 app.MoneyReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMoneyReport", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMoneyReport indicates an expected call of SaveMoneyReport
func (mr *MockAppMockRecorder) SaveMoneyReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMoneyReport", reflect.TypeOf((*MockApp)(nil).SaveMoneyReport), arg0)
}

// SaveRelayReport mocks base method
func (m *MockApp) SaveRelayReport(arg0 app.RelayReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRelayReport", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRelayReport indicates an expected call of SaveRelayReport
func (mr *MockAppMockRecorder) SaveRelayReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRelayReport", reflect.TypeOf((*MockApp)(nil).SaveRelayReport), arg0)
}

// Set mocks base method
func (m *MockApp) Set(arg0 app.StationData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockAppMockRecorder) Set(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockApp)(nil).Set), arg0)
}

// SetCardReaderConfig mocks base method
func (m *MockApp) SetCardReaderConfig(arg0 app.CardReaderConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCardReaderConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCardReaderConfig indicates an expected call of SetCardReaderConfig
func (mr *MockAppMockRecorder) SetCardReaderConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCardReaderConfig", reflect.TypeOf((*MockApp)(nil).SetCardReaderConfig), arg0)
}

// SetKasse mocks base method
func (m *MockApp) SetKasse(arg0 app.Kasse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKasse", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKasse indicates an expected call of SetKasse
func (mr *MockAppMockRecorder) SetKasse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKasse", reflect.TypeOf((*MockApp)(nil).SetKasse), arg0)
}

// SetProgram mocks base method
func (m *MockApp) SetProgram(arg0 app.Program) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProgram", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProgram indicates an expected call of SetProgram
func (mr *MockAppMockRecorder) SetProgram(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProgram", reflect.TypeOf((*MockApp)(nil).SetProgram), arg0)
}

// SetStation mocks base method
func (m *MockApp) SetStation(arg0 app.SetStation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStation indicates an expected call of SetStation
func (mr *MockAppMockRecorder) SetStation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStation", reflect.TypeOf((*MockApp)(nil).SetStation), arg0)
}

// SetStationProgram mocks base method
func (m *MockApp) SetStationProgram(arg0 app.StationID, arg1 []app.StationProgram) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStationProgram", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStationProgram indicates an expected call of SetStationProgram
func (mr *MockAppMockRecorder) SetStationProgram(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStationProgram", reflect.TypeOf((*MockApp)(nil).SetStationProgram), arg0, arg1)
}

// Station mocks base method
func (m *MockApp) Station(arg0 app.StationID) (app.SetStation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Station", arg0)
	ret0, _ := ret[0].(app.SetStation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Station indicates an expected call of Station
func (mr *MockAppMockRecorder) Station(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Station", reflect.TypeOf((*MockApp)(nil).Station), arg0)
}

// StationConfig mocks base method
func (m *MockApp) StationConfig(arg0 app.StationID) (app.StationConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationConfig", arg0)
	ret0, _ := ret[0].(app.StationConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StationConfig indicates an expected call of StationConfig
func (mr *MockAppMockRecorder) StationConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationConfig", reflect.TypeOf((*MockApp)(nil).StationConfig), arg0)
}

// StationProgram mocks base method
func (m *MockApp) StationProgram(arg0 app.StationID) ([]app.StationProgram, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationProgram", arg0)
	ret0, _ := ret[0].([]app.StationProgram)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StationProgram indicates an expected call of StationProgram
func (mr *MockAppMockRecorder) StationProgram(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationProgram", reflect.TypeOf((*MockApp)(nil).StationProgram), arg0)
}

// StationReportCurrentMoney mocks base method
func (m *MockApp) StationReportCurrentMoney(arg0 app.StationID) (app.MoneyReport, app.RelayReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationReportCurrentMoney", arg0)
	ret0, _ := ret[0].(app.MoneyReport)
	ret1, _ := ret[1].(app.RelayReport)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StationReportCurrentMoney indicates an expected call of StationReportCurrentMoney
func (mr *MockAppMockRecorder) StationReportCurrentMoney(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationReportCurrentMoney", reflect.TypeOf((*MockApp)(nil).StationReportCurrentMoney), arg0)
}

// StationReportDates mocks base method
func (m *MockApp) StationReportDates(arg0 app.StationID, arg1, arg2 time.Time) (app.MoneyReport, app.RelayReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationReportDates", arg0, arg1, arg2)
	ret0, _ := ret[0].(app.MoneyReport)
	ret1, _ := ret[1].(app.RelayReport)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StationReportDates indicates an expected call of StationReportDates
func (mr *MockAppMockRecorder) StationReportDates(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationReportDates", reflect.TypeOf((*MockApp)(nil).StationReportDates), arg0, arg1, arg2)
}

// StationsVariables mocks base method
func (m *MockApp) StationsVariables() ([]app.StationsVariables, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StationsVariables")
	ret0, _ := ret[0].([]app.StationsVariables)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StationsVariables indicates an expected call of StationsVariables
func (mr *MockAppMockRecorder) StationsVariables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StationsVariables", reflect.TypeOf((*MockApp)(nil).StationsVariables))
}

// StatusCollection mocks base method
func (m *MockApp) StatusCollection() app.StatusCollection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusCollection")
	ret0, _ := ret[0].(app.StatusCollection)
	return ret0
}

// StatusCollection indicates an expected call of StatusCollection
func (mr *MockAppMockRecorder) StatusCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCollection", reflect.TypeOf((*MockApp)(nil).StatusCollection))
}

// StatusReport mocks base method
func (m *MockApp) StatusReport() app.StatusReport {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusReport")
	ret0, _ := ret[0].(app.StatusReport)
	return ret0
}

// StatusReport indicates an expected call of StatusReport
func (mr *MockAppMockRecorder) StatusReport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusReport", reflect.TypeOf((*MockApp)(nil).StatusReport))
}

// UpdateUser mocks base method
func (m *MockApp) UpdateUser(arg0 app.UpdateUserData, arg1 *storageapi.Profile) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockAppMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockApp)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserPassword mocks base method
func (m *MockApp) UpdateUserPassword(arg0 app.UpdatePasswordData, arg1 *storageapi.Profile) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword
func (mr *MockAppMockRecorder) UpdateUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockApp)(nil).UpdateUserPassword), arg0, arg1)
}

// User mocks base method
func (m *MockApp) User(arg0 string) (*app.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0)
	ret0, _ := ret[0].(*app.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User
func (mr *MockAppMockRecorder) User(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockApp)(nil).User), arg0)
}

// Users mocks base method
func (m *MockApp) Users(arg0 *storageapi.Profile) ([]app.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users", arg0)
	ret0, _ := ret[0].([]app.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Users indicates an expected call of Users
func (mr *MockAppMockRecorder) Users(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockApp)(nil).Users), arg0)
}
